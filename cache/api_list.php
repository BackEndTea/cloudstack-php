<?php

// api_list.php @generated by api:list command

return array(
    'listNetworkACLs' => array(
        'description' => 'Lists all network ACL items',
        'isasync'     => false,
        'params'      => array(
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'aclid' => array(
                'description' => 'list network ACL items by ACL ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'Lists network ACL Item with the specified ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'list network ACL items by network ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'action' => array(
                'description' => 'list network ACL items by action',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'protocol' => array(
                'description' => 'list network ACL items by protocol',
                'type'        => 'string',
                'required'    => false,
            ),
            'traffictype' => array(
                'description' => 'list network ACL items by traffic type - ingress or egress',
                'type'        => 'string',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'createCondition' => array(
        'description' => 'Creates a condition',
        'isasync'     => true,
        'params'      => array(
            'domainid' => array(
                'description' => 'the domain ID of the account.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'relationaloperator' => array(
                'description' => 'Relational Operator to be used with threshold.',
                'type'        => 'string',
                'required'    => true,
            ),
            'counterid' => array(
                'description' => 'ID of the Counter.',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'threshold' => array(
                'description' => 'Threshold value.',
                'type'        => 'long',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'the account of the condition. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'reconnectHost' => array(
        'description' => 'Reconnects a host.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the host ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'copyTemplate' => array(
        'description' => 'Copies a template from one zone to another.',
        'isasync'     => true,
        'params'      => array(
            'destzoneid' => array(
                'description' => 'ID of the zone the template is being copied to.',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'sourcezoneid' => array(
                'description' => 'ID of the zone the template is currently hosted on. If not specified and template is cross-zone, then we will sync this template to region wide image store.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'Template ID.',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listRouters' => array(
        'description' => 'List routers.',
        'isasync'     => false,
        'params'      => array(
            'version' => array(
                'description' => 'list virtual router elements by version',
                'type'        => 'string',
                'required'    => false,
            ),
            'forvpc' => array(
                'description' => 'if true is passed for this parameter, list only VPC routers',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'the state of the router',
                'type'        => 'string',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'List networks by VPC',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'list by network id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the Pod ID of the router',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID of the router',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the disk router',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'hostid' => array(
                'description' => 'the host ID of the router',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the router',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'clusterid' => array(
                'description' => 'the cluster ID of the router',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listNiciraNvpDeviceNetworks' => array(
        'description' => 'lists network that are using a nicira nvp device',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'nvpdeviceid' => array(
                'description' => 'nicira nvp device ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'configureOutOfBandManagement' => array(
        'description' => 'Configures a host\'s out-of-band management interface',
        'isasync'     => false,
        'params'      => array(
            'hostid' => array(
                'description' => 'the ID of the host',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'username' => array(
                'description' => 'the host management interface user',
                'type'        => 'string',
                'required'    => true,
            ),
            'password' => array(
                'description' => 'the host management interface password',
                'type'        => 'string',
                'required'    => true,
            ),
            'port' => array(
                'description' => 'the host management interface port',
                'type'        => 'string',
                'required'    => true,
            ),
            'driver' => array(
                'description' => 'the host management interface driver, for example: ipmitool',
                'type'        => 'string',
                'required'    => true,
            ),
            'address' => array(
                'description' => 'the host management interface IP address',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'addNicToVirtualMachine' => array(
        'description' => 'Adds VM to specified network by creating a NIC',
        'isasync'     => true,
        'params'      => array(
            'networkid' => array(
                'description' => 'Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'ipaddress' => array(
                'description' => 'IP Address for the new network',
                'type'        => 'string',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'Virtual Machine ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'extractVolume' => array(
        'description' => 'Extracts volume',
        'isasync'     => true,
        'params'      => array(
            'zoneid' => array(
                'description' => 'the ID of the zone where the volume is located',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'id' => array(
                'description' => 'the ID of the volume',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'mode' => array(
                'description' => 'the mode of extraction - HTTP_DOWNLOAD or FTP_UPLOAD',
                'type'        => 'string',
                'required'    => true,
            ),
            'url' => array(
                'description' => 'the url to which the volume would be extracted',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listNetworkServiceProviders' => array(
        'description' => 'Lists network serviceproviders for a given physical network.',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'list providers by name',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'list providers by state',
                'type'        => 'string',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'addAccountToProject' => array(
        'description' => 'Adds account to a project',
        'isasync'     => true,
        'params'      => array(
            'projectid' => array(
                'description' => 'ID of the project to add the account to',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'email' => array(
                'description' => 'email to which invitation to the project is going to be sent',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'name of the account to be added to the project',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'deleteEgressFirewallRule' => array(
        'description' => 'Deletes an egress firewall rule',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the firewall rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addCluster' => array(
        'description' => 'Adds a new cluster',
        'isasync'     => false,
        'params'      => array(
            'vsmipaddress' => array(
                'description' => 'the ipaddress of the VSM associated with this cluster',
                'type'        => 'string',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'hypervisor type of the cluster: XenServer,KVM,VMware,Hyperv,BareMetal,Simulator,Ovm3',
                'type'        => 'string',
                'required'    => true,
            ),
            'publicvswitchtype' => array(
                'description' => 'Type of virtual switch used for public traffic in the cluster. Allowed values are, vmwaresvs (for VMware standard vSwitch) and vmwaredvs (for VMware distributed vSwitch)',
                'type'        => 'string',
                'required'    => false,
            ),
            'clustername' => array(
                'description' => 'the cluster name',
                'type'        => 'string',
                'required'    => true,
            ),
            'guestvswitchtype' => array(
                'description' => 'Type of virtual switch used for guest traffic in the cluster. Allowed values are, vmwaresvs (for VMware standard vSwitch) and vmwaredvs (for VMware distributed vSwitch)',
                'type'        => 'string',
                'required'    => false,
            ),
            'username' => array(
                'description' => 'the username for the cluster',
                'type'        => 'string',
                'required'    => false,
            ),
            'url' => array(
                'description' => 'the URL',
                'type'        => 'string',
                'required'    => false,
            ),
            'guestvswitchname' => array(
                'description' => 'Name of virtual switch used for guest traffic in the cluster. This would override zone wide traffic label setting.',
                'type'        => 'string',
                'required'    => false,
            ),
            'ovm3vip' => array(
                'description' => 'Ovm3 vip to use for pool (and cluster)',
                'type'        => 'string',
                'required'    => false,
            ),
            'allocationstate' => array(
                'description' => 'Allocation state of this cluster for allocation of new resources',
                'type'        => 'string',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the Pod ID for the host',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'vsmpassword' => array(
                'description' => 'the password for the VSM associated with this cluster',
                'type'        => 'string',
                'required'    => false,
            ),
            'vsmusername' => array(
                'description' => 'the username for the VSM associated with this cluster',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the cluster',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'ovm3pool' => array(
                'description' => 'Ovm3 native pooling enabled for cluster',
                'type'        => 'string',
                'required'    => false,
            ),
            'password' => array(
                'description' => 'the password for the host',
                'type'        => 'string',
                'required'    => false,
            ),
            'publicvswitchname' => array(
                'description' => 'Name of virtual switch used for public traffic in the cluster.  This would override zone wide traffic label setting.',
                'type'        => 'string',
                'required'    => false,
            ),
            'ovm3cluster' => array(
                'description' => 'Ovm3 native OCFS2 clustering enabled for cluster',
                'type'        => 'string',
                'required'    => false,
            ),
            'clustertype' => array(
                'description' => 'type of the cluster: CloudManaged, ExternalManaged',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listNetworkOfferings' => array(
        'description' => 'Lists all available network offerings.',
        'isasync'     => false,
        'params'      => array(
            'displaytext' => array(
                'description' => 'list network offerings by display text',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list network offerings by ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'list network offerings available for network creation in specific zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'list network offerings by state',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'list network offerings by name',
                'type'        => 'string',
                'required'    => false,
            ),
            'availability' => array(
                'description' => 'the availability of network offering. Default value is required',
                'type'        => 'string',
                'required'    => false,
            ),
            'sourcenatsupported' => array(
                'description' => 'true if need to list only netwok offerings where source NAT is supported, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'isdefault' => array(
                'description' => 'true if need to list only default network offerings. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'guestiptype' => array(
                'description' => 'list network offerings by guest type: shared or isolated',
                'type'        => 'string',
                'required'    => false,
            ),
            'forvpc' => array(
                'description' => 'the network offering can be used only for network creation inside the VPC',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'list network offerings by tags',
                'type'        => 'string',
                'required'    => false,
            ),
            'istagged' => array(
                'description' => 'true if offering has tags specified',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'traffictype' => array(
                'description' => 'list by traffic type',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'specifyipranges' => array(
                'description' => 'true if need to list only network offerings which support specifying ip ranges',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'specifyvlan' => array(
                'description' => 'the tags for the network offering.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'supportedservices' => array(
                'description' => 'list network offerings supporting certain services',
                'type'        => 'list',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'the ID of the network. Pass this in if you want to see the available network offering that a network can be changed to.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'listInternalLoadBalancerElements' => array(
        'description' => 'Lists all available Internal Load Balancer elements.',
        'isasync'     => false,
        'params'      => array(
            'nspid' => array(
                'description' => 'list internal load balancer elements by network service provider id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list internal load balancer elements by id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'enabled' => array(
                'description' => 'list internal load balancer elements by enabled state',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'getUploadParamsForVolume' => array(
        'description' => 'Upload a data disk to the cloudstack cloud.',
        'isasync'     => false,
        'params'      => array(
            'domainid' => array(
                'description' => 'an optional domainId. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the volume/template',
                'type'        => 'string',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'the ID of the zone the volume/template is to be hosted on',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'diskofferingid' => array(
                'description' => 'the ID of the disk offering. This must be a custom sized offering since during upload of volume/template size is unknown.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'format' => array(
                'description' => 'the format for the volume/template. Possible values include QCOW2, OVA, and VHD.',
                'type'        => 'string',
                'required'    => true,
            ),
            'checksum' => array(
                'description' => 'the MD5 checksum value of this volume/template',
                'type'        => 'string',
                'required'    => false,
            ),
            'imagestoreuuid' => array(
                'description' => 'Image store uuid',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'an optional accountName. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'Upload volume/template for the project',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listHypervisors' => array(
        'description' => 'List hypervisors',
        'isasync'     => false,
        'params'      => array(
            'zoneid' => array(
                'description' => 'the zone id for listing hypervisors.',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'updateConfiguration' => array(
        'description' => 'Updates a configuration.',
        'isasync'     => false,
        'params'      => array(
            'zoneid' => array(
                'description' => 'the ID of the Zone to update the parameter value for corresponding zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'storageid' => array(
                'description' => 'the ID of the Storage pool to update the parameter value for corresponding storage pool',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'clusterid' => array(
                'description' => 'the ID of the Cluster to update the parameter value for corresponding cluster',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the configuration',
                'type'        => 'string',
                'required'    => true,
            ),
            'accountid' => array(
                'description' => 'the ID of the Account to update the parameter value for corresponding account',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'value' => array(
                'description' => 'the value of the configuration',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'createVpnConnection' => array(
        'description' => 'Create site to site vpn connection',
        'isasync'     => true,
        'params'      => array(
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the vpn to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'passive' => array(
                'description' => 'connection is passive or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            's2svpngatewayid' => array(
                'description' => 'id of the vpn gateway',
                'type'        => 'uuid',
                'required'    => true,
            ),
            's2scustomergatewayid' => array(
                'description' => 'id of the customer gateway',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listVolumes' => array(
        'description' => 'Lists all volumes.',
        'isasync'     => false,
        'params'      => array(
            'podid' => array(
                'description' => 'the pod id the disk volume belongs to',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the ID of the availability zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'storageid' => array(
                'description' => 'the ID of the storage pool, available to ROOT admin only',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'storageid' => array(
                'description' => 'the ID of the storage pool, available to ROOT admin only',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'displayvolume' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the disk volume',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the disk volume',
                'type'        => 'string',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'the type of disk volume',
                'type'        => 'string',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'the ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'hostid' => array(
                'description' => 'list volumes on specified host',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'diskofferingid' => array(
                'description' => 'list volumes by disk offering',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the pod id the disk volume belongs to',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'ids' => array(
                'description' => 'the IDs of the volumes, mutually exclusive with id',
                'type'        => 'list',
                'required'    => false,
            ),
        ),
    ),
    'suspendProject' => array(
        'description' => 'Suspends a project',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'id of the project to be suspended',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteLoadBalancer' => array(
        'description' => 'Deletes a load balancer',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the Load Balancer',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'authorizeSecurityGroupIngress' => array(
        'description' => 'Authorizes a particular ingress rule for this security group',
        'isasync'     => true,
        'params'      => array(
            'endport' => array(
                'description' => 'end port for this ingress rule',
                'type'        => 'integer',
                'required'    => false,
            ),
            'usersecuritygrouplist' => array(
                'description' => 'user to security group mapping',
                'type'        => 'map',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'an optional domainId for the security group. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'an optional account for the security group. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'securitygroupname' => array(
                'description' => 'The name of the security group. Mutually exclusive with securityGroupId parameter',
                'type'        => 'string',
                'required'    => false,
            ),
            'startport' => array(
                'description' => 'start port for this ingress rule',
                'type'        => 'integer',
                'required'    => false,
            ),
            'icmpcode' => array(
                'description' => 'error code for this icmp message',
                'type'        => 'integer',
                'required'    => false,
            ),
            'cidrlist' => array(
                'description' => 'the cidr list associated',
                'type'        => 'list',
                'required'    => false,
            ),
            'protocol' => array(
                'description' => 'TCP is default. UDP is the other supported protocol',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'an optional project of the security group',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'securitygroupid' => array(
                'description' => 'The ID of the security group. Mutually exclusive with securityGroupName parameter',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'icmptype' => array(
                'description' => 'type of the icmp message being sent',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'listLoadBalancers' => array(
        'description' => 'Lists load balancers',
        'isasync'     => false,
        'params'      => array(
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'the network ID of the load balancer',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the load balancer',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the load balancer',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'sourceipaddress' => array(
                'description' => 'the source IP address of the load balancer',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'scheme' => array(
                'description' => 'the scheme of the load balancer. Supported value is internal in the current release',
                'type'        => 'string',
                'required'    => false,
            ),
            'sourceipaddressnetworkid' => array(
                'description' => 'the network ID of the source IP address',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listTrafficTypeImplementors' => array(
        'description' => 'Lists implementors of implementor of a network traffic type or implementors of all network traffic types',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'traffictype' => array(
                'description' => 'Optional. The network traffic type, if specified, return its implementor. Otherwise, return all traffic types with their implementor',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'addNetscalerLoadBalancer' => array(
        'description' => 'Adds a netscaler load balancer device',
        'isasync'     => true,
        'params'      => array(
            'username' => array(
                'description' => 'Credentials to reach netscaler load balancer device',
                'type'        => 'string',
                'required'    => true,
            ),
            'password' => array(
                'description' => 'Credentials to reach netscaler load balancer device',
                'type'        => 'string',
                'required'    => true,
            ),
            'gslbproviderprivateip' => array(
                'description' => 'public IP of the site',
                'type'        => 'string',
                'required'    => false,
            ),
            'gslbprovider' => array(
                'description' => 'true if NetScaler device being added is for providing GSLB service',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'isexclusivegslbprovider' => array(
                'description' => 'true if NetScaler device being added is for providing GSLB service exclusively and can not be used for LB',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'gslbproviderpublicip' => array(
                'description' => 'public IP of the site',
                'type'        => 'string',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'networkdevicetype' => array(
                'description' => 'Netscaler device type supports NetscalerMPXLoadBalancer, NetscalerVPXLoadBalancer, NetscalerSDXLoadBalancer',
                'type'        => 'string',
                'required'    => true,
            ),
            'url' => array(
                'description' => 'URL of the netscaler load balancer appliance.',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'importLdapUsers' => array(
        'description' => 'Import LDAP users',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'accountdetails' => array(
                'description' => 'details for account used to store specific parameters',
                'type'        => 'map',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'Creates the user under the specified account. If no account is specified, the username will be used as the account name.',
                'type'        => 'string',
                'required'    => false,
            ),
            'timezone' => array(
                'description' => 'Specifies a timezone for this command. For more information on the timezone parameter, see Time Zone Format.',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'Specifies the domain to which the ldap users are to be imported. If no domain is specified, a domain will created using group parameter. If the group is also not specified, a domain name based on the OU information will be created. If no OU hierarchy exists, will be defaulted to ROOT domain',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'roleid' => array(
                'description' => 'Creates the account under the specified role.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'group' => array(
                'description' => 'Specifies the group name from which the ldap users are to be imported. If no group is specified, all the users will be imported.',
                'type'        => 'string',
                'required'    => false,
            ),
            'accounttype' => array(
                'description' => 'Type of the account.  Specify 0 for user, 1 for root admin, and 2 for domain admin',
                'type'        => 'short',
                'required'    => false,
            ),
        ),
    ),
    'deleteDomain' => array(
        'description' => 'Deletes a specified domain',
        'isasync'     => true,
        'params'      => array(
            'cleanup' => array(
                'description' => 'true if all domain resources (child domains, accounts) have to be cleaned up, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'ID of domain to delete',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addTrafficMonitor' => array(
        'description' => 'Adds Traffic Monitor Host for Direct Network Usage',
        'isasync'     => false,
        'params'      => array(
            'url' => array(
                'description' => 'URL of the traffic monitor Host',
                'type'        => 'string',
                'required'    => true,
            ),
            'excludezones' => array(
                'description' => 'Traffic going into the listed zones will not be metered',
                'type'        => 'string',
                'required'    => false,
            ),
            'includezones' => array(
                'description' => 'Traffic going into the listed zones will be metered',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'Zone in which to add the external firewall appliance.',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createPortableIpRange' => array(
        'description' => 'adds a range of portable public IP\'s to a region',
        'isasync'     => true,
        'params'      => array(
            'regionid' => array(
                'description' => 'Id of the Region',
                'type'        => 'integer',
                'required'    => true,
            ),
            'endip' => array(
                'description' => 'the ending IP address in the portable IP range',
                'type'        => 'string',
                'required'    => true,
            ),
            'netmask' => array(
                'description' => 'the netmask of the portable IP range',
                'type'        => 'string',
                'required'    => true,
            ),
            'gateway' => array(
                'description' => 'the gateway for the portable IP range',
                'type'        => 'string',
                'required'    => true,
            ),
            'startip' => array(
                'description' => 'the beginning IP address in the portable IP range',
                'type'        => 'string',
                'required'    => true,
            ),
            'vlan' => array(
                'description' => 'VLAN id, if not specified defaulted to untagged',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'configureNetscalerLoadBalancer' => array(
        'description' => 'configures a netscaler load balancer device',
        'isasync'     => true,
        'params'      => array(
            'podids' => array(
                'description' => 'Used when NetScaler device is provider of EIP service. This parameter represents the list of pod\'s, for which there exists a policy based route on datacenter L3 router to route pod\'s subnet IP to a NetScaler device.',
                'type'        => 'list',
                'required'    => false,
            ),
            'lbdevicededicated' => array(
                'description' => 'true if this netscaler device to dedicated for a account, false if the netscaler device will be shared by multiple accounts',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'lbdevicecapacity' => array(
                'description' => 'capacity of the device, Capacity will be interpreted as number of networks device can handle',
                'type'        => 'long',
                'required'    => false,
            ),
            'inline' => array(
                'description' => 'true if netscaler load balancer is intended to be used in in-line with firewall, false if netscaler load balancer will side-by-side with firewall',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'lbdeviceid' => array(
                'description' => 'Netscaler load balancer device ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createTemplate' => array(
        'description' => 'Creates a template of a virtual machine. The virtual machine must be in a STOPPED state. A template created from this command is automatically designated as a private template visible to the account that created it.',
        'isasync'     => true,
        'params'      => array(
            'passwordenabled' => array(
                'description' => 'true if the template supports the password reset feature; default is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'url' => array(
                'description' => 'Optional, only for baremetal hypervisor. The directory name where template stored on CIFS server',
                'type'        => 'string',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'the display text of the template. This is usually used for display purposes.',
                'type'        => 'string',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'the name of the template',
                'type'        => 'string',
                'required'    => true,
            ),
            'isfeatured' => array(
                'description' => 'true if this template is a featured template, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'Template details in key/value pairs using format details[i].keyname=keyvalue. Example: details[0].hypervisortoolsversion=xenserver61',
                'type'        => 'map',
                'required'    => false,
            ),
            'isdynamicallyscalable' => array(
                'description' => 'true if template contains XS/VMWare tools inorder to support dynamic scaling of VM cpu/memory',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'ostypeid' => array(
                'description' => 'the ID of the OS Type that best represents the OS of this template.',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'virtualmachineid' => array(
                'description' => 'Optional, VM ID. If this presents, it is going to create a baremetal template for VM this ID refers to. This is only for VM whose hypervisor type is BareMetal',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'create template for the project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'volumeid' => array(
                'description' => 'the ID of the disk volume the template is being created from. Either this parameter, or snapshotId has to be passed in',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'snapshotid' => array(
                'description' => 'the ID of the snapshot the template is being created from. Either this parameter, or volumeId has to be passed in',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'requireshvm' => array(
                'description' => 'true if the template requres HVM, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'bits' => array(
                'description' => '32 or 64 bit',
                'type'        => 'integer',
                'required'    => false,
            ),
            'ispublic' => array(
                'description' => 'true if this template is a public template, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'templatetag' => array(
                'description' => 'the tag for this template.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listLoadBalancerRuleInstances' => array(
        'description' => 'List all virtual machine instances that are assigned to a load balancer rule.',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the load balancer rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'applied' => array(
                'description' => 'true if listing all virtual machines currently applied to the load balancer rule; default is true',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'lbvmips' => array(
                'description' => 'true if load balancer rule VM IP information to be included; default is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'migrateVolume' => array(
        'description' => 'Migrate volume',
        'isasync'     => true,
        'params'      => array(
            'livemigrate' => array(
                'description' => 'if the volume should be live migrated when it is attached to a running vm',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'storageid' => array(
                'description' => 'destination storage pool ID to migrate the volume to',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'volumeid' => array(
                'description' => 'the ID of the volume',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteLBHealthCheckPolicy' => array(
        'description' => 'Deletes a load balancer health check policy.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the load balancer health check policy',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updatePhysicalNetwork' => array(
        'description' => 'Updates a physical network',
        'isasync'     => true,
        'params'      => array(
            'tags' => array(
                'description' => 'Tag the physical network',
                'type'        => 'list',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'physical network id',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'networkspeed' => array(
                'description' => 'the speed for the physical network[1G/10G]',
                'type'        => 'string',
                'required'    => false,
            ),
            'vlan' => array(
                'description' => 'the VLAN for the physical network',
                'type'        => 'string',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'Enabled/Disabled',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'deleteStaticRoute' => array(
        'description' => 'Deletes a static route',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the static route',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deletePaloAltoFirewall' => array(
        'description' => ' delete a Palo Alto firewall device',
        'isasync'     => true,
        'params'      => array(
            'fwdeviceid' => array(
                'description' => 'Palo Alto firewall device ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'registerSSHKeyPair' => array(
        'description' => 'Register a public key in a keypair under a certain name',
        'isasync'     => false,
        'params'      => array(
            'projectid' => array(
                'description' => 'an optional project for the ssh key',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'an optional domainId for the ssh key. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'Name of the keypair',
                'type'        => 'string',
                'required'    => true,
            ),
            'publickey' => array(
                'description' => 'Public key material of the keypair',
                'type'        => 'string',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'an optional account for the ssh key. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listTrafficMonitors' => array(
        'description' => 'List traffic monitor Hosts.',
        'isasync'     => false,
        'params'      => array(
            'zoneid' => array(
                'description' => 'zone Id',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'updateCloudToUseObjectStore' => array(
        'description' => 'Migrate current NFS secondary storages to use object store.',
        'isasync'     => false,
        'params'      => array(
            'provider' => array(
                'description' => 'the image store provider name',
                'type'        => 'string',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'the name for the image store',
                'type'        => 'string',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'the details for the image store. Example: details[0].key=accesskey&details[0].value=s389ddssaa&details[1].key=secretkey&details[1].value=8dshfsss',
                'type'        => 'map',
                'required'    => false,
            ),
            'url' => array(
                'description' => 'the URL for the image store',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listAutoScaleVmGroups' => array(
        'description' => 'Lists autoscale vm groups.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the autoscale vm group',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'vmprofileid' => array(
                'description' => 'the ID of the profile',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'policyid' => array(
                'description' => 'the ID of the policy',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the availability zone ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'lbruleid' => array(
                'description' => 'the ID of the loadbalancer',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'disableOutOfBandManagementForZone' => array(
        'description' => 'Disables out-of-band management for a zone',
        'isasync'     => true,
        'params'      => array(
            'zoneid' => array(
                'description' => 'the ID of the zone',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'getVMPassword' => array(
        'description' => 'Returns an encrypted password for the VM',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addSecondaryStorage' => array(
        'description' => 'Adds secondary storage.',
        'isasync'     => false,
        'params'      => array(
            'url' => array(
                'description' => 'the URL for the secondary storage',
                'type'        => 'string',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the secondary storage',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listInstanceGroups' => array(
        'description' => 'Lists vm groups',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'list instance groups by ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'list instance groups by name',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'createNetwork' => array(
        'description' => 'Creates a network',
        'isasync'     => false,
        'params'      => array(
            'displaynetwork' => array(
                'description' => 'an optional field, whether to the display the network to the end user or not.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'startipv6' => array(
                'description' => 'the beginning IPv6 address in the IPv6 network range',
                'type'        => 'string',
                'required'    => false,
            ),
            'endipv6' => array(
                'description' => 'the ending IPv6 address in the IPv6 network range',
                'type'        => 'string',
                'required'    => false,
            ),
            'ip6cidr' => array(
                'description' => 'the CIDR of IPv6 network, must be at least /64',
                'type'        => 'string',
                'required'    => false,
            ),
            'networkofferingid' => array(
                'description' => 'the network offering ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'projectid' => array(
                'description' => 'an optional project for the SSH key',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'domain ID of the account owning a network',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'networkdomain' => array(
                'description' => 'network domain',
                'type'        => 'string',
                'required'    => false,
            ),
            'ip6gateway' => array(
                'description' => 'the gateway of the IPv6 network. Required for Shared networks',
                'type'        => 'string',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'the physical network ID the network belongs to',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the zone ID for the network',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'netmask' => array(
                'description' => 'the netmask of the network. Required for shared networks and isolated networks when it belongs to VPC',
                'type'        => 'string',
                'required'    => false,
            ),
            'acltype' => array(
                'description' => 'Access control type; supported values are account and domain. In 3.0 all shared networks should have aclType=Domain, and all isolated networks - Account. Account means that only the account owner can use the network, domain - all accounts in the domain can use the network',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the network',
                'type'        => 'string',
                'required'    => true,
            ),
            'subdomainaccess' => array(
                'description' => 'Defines whether to allow subdomains to use networks dedicated to their parent domain(s). Should be used with aclType=Domain, defaulted to allow.subdomain.network.access global config if not specified',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'aclid' => array(
                'description' => 'Network ACL ID associated for the network',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'startip' => array(
                'description' => 'the beginning IP address in the network IP range',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'account that will own the network',
                'type'        => 'string',
                'required'    => false,
            ),
            'endip' => array(
                'description' => 'the ending IP address in the network IP range. If not specified, will be defaulted to startIP',
                'type'        => 'string',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'the VPC network belongs to',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'the display text of the network',
                'type'        => 'string',
                'required'    => true,
            ),
            'isolatedpvlan' => array(
                'description' => 'the isolated private VLAN for this network',
                'type'        => 'string',
                'required'    => false,
            ),
            'gateway' => array(
                'description' => 'the gateway of the network. Required for shared networks and isolated networks when it belongs to VPC',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listProjects' => array(
        'description' => 'Lists projects and provides detailed information for listed projects',
        'isasync'     => false,
        'params'      => array(
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list projects by project ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List projects by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'list projects by display text',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'list projects by state',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'list projects by name',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'enableAccount' => array(
        'description' => 'Enables an account',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'Account id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'Enables specified account in this domain.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'Enables specified account.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'destroySystemVm' => array(
        'description' => 'Destroyes a system virtual machine.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the system virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listPublicIpAddresses' => array(
        'description' => 'Lists all public ip addresses',
        'isasync'     => false,
        'params'      => array(
            'allocatedonly' => array(
                'description' => 'limits search results to allocated public IP addresses',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'issourcenat' => array(
                'description' => 'list only source NAT IP addresses',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'lists all public IP addresses by zone ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'associatednetworkid' => array(
                'description' => 'lists all public IP addresses associated to the network specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'vlanid' => array(
                'description' => 'lists all public IP addresses by VLAN ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isstaticnat' => array(
                'description' => 'list only static NAT IP addresses',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'ipaddress' => array(
                'description' => 'lists the specified IP address',
                'type'        => 'string',
                'required'    => false,
            ),
            'forvirtualnetwork' => array(
                'description' => 'the virtual network for the IP address',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'forloadbalancing' => array(
                'description' => 'list only IPs used for load balancing',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'List IPs belonging to the VPC',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'lists all public IP addresses by physical network ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'lists all public IP addresses by state',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'lists IP address by ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
        ),
    ),
    'listGuestOsMapping' => array(
        'description' => 'Lists all available OS mappings for given hypervisor',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'hypervisorversion' => array(
                'description' => 'list Guest OS mapping by hypervisor version. Must be used with hypervisor parameter',
                'type'        => 'string',
                'required'    => false,
            ),
            'ostypeid' => array(
                'description' => 'list mapping by Guest OS Type UUID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list mapping by its UUID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'list Guest OS mapping by hypervisor',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'updateRemoteAccessVpn' => array(
        'description' => 'Updates remote access vpn',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'id of the remote access vpn',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the vpn to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'enableStorageMaintenance' => array(
        'description' => 'Puts storage pool into maintenance state',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'Primary storage ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'removeFromGlobalLoadBalancerRule' => array(
        'description' => 'Removes a load balancer rule association with global load balancer rule',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the load balancer rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'loadbalancerrulelist' => array(
                'description' => 'the list load balancer rules that will be assigned to gloabal load balancer rule',
                'type'        => 'list',
                'required'    => true,
            ),
        ),
    ),
    'updateLoadBalancer' => array(
        'description' => 'Updates a load balancer',
        'isasync'     => true,
        'params'      => array(
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the rule to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the load balancer',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listVpnGateways' => array(
        'description' => 'Lists site 2 site vpn gateways',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'id of vpc',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'id of the vpn gateway',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listDedicatedPods' => array(
        'description' => 'Lists dedicated pods.',
        'isasync'     => false,
        'params'      => array(
            'podid' => array(
                'description' => 'the ID of the pod',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the ID of the domain associated with the pod',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'the name of the account associated with the pod. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'affinitygroupid' => array(
                'description' => 'list dedicated pods by affinity group',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'listClusters' => array(
        'description' => 'Lists clusters.',
        'isasync'     => false,
        'params'      => array(
            'hypervisor' => array(
                'description' => 'lists clusters by hypervisor type',
                'type'        => 'string',
                'required'    => false,
            ),
            'managedstate' => array(
                'description' => 'whether this cluster is managed by cloudstack',
                'type'        => 'string',
                'required'    => false,
            ),
            'showcapacities' => array(
                'description' => 'flag to display the capacity of the clusters',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'allocationstate' => array(
                'description' => 'lists clusters by allocation state',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'lists clusters by the cluster ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'lists clusters by Pod ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'lists clusters by Zone ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'lists clusters by the cluster name',
                'type'        => 'string',
                'required'    => false,
            ),
            'clustertype' => array(
                'description' => 'lists clusters by cluster type',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'stopRouter' => array(
        'description' => 'Stops a router.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the router',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'forced' => array(
                'description' => 'Force stop the VM. The caller knows the VM is stopped.',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'attachVolume' => array(
        'description' => 'Attaches a disk volume to a virtual machine.',
        'isasync'     => true,
        'params'      => array(
            'virtualmachineid' => array(
                'description' => '    the ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'deviceid' => array(
                'description' => 'the ID of the device to map the volume to within the guest OS. If no deviceId is passed in, the next available deviceId will be chosen. Possible values for a Linux OS are:* 0 - /dev/xvda* 1 - /dev/xvdb* 2 - /dev/xvdc* 4 - /dev/xvde* 5 - /dev/xvdf* 6 - /dev/xvdg* 7 - /dev/xvdh* 8 - /dev/xvdi* 9 - /dev/xvdj',
                'type'        => 'long',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the disk volume',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateVPCOffering' => array(
        'description' => 'Updates VPC offering',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the id of the VPC offering',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'state' => array(
                'description' => 'update state for the VPC offering; supported states - Enabled/Disabled',
                'type'        => 'string',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'the display text of the VPC offering',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the VPC offering',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'resetSSHKeyForVirtualMachine' => array(
        'description' => 'Resets the SSH Key for virtual machine. The virtual machine must be in a \"Stopped\" state. [async]',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'projectid' => array(
                'description' => 'an optional project for the ssh key',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keypair' => array(
                'description' => 'name of the ssh key pair used to login to the virtual machine',
                'type'        => 'string',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'an optional account for the ssh key. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listVolumesMetrics' => array(
        'description' => 'Lists volume metrics',
        'isasync'     => false,
        'params'      => array(
            'ids' => array(
                'description' => 'the IDs of the volumes, mutually exclusive with id',
                'type'        => 'list',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'hostid' => array(
                'description' => 'list volumes on specified host',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'diskofferingid' => array(
                'description' => 'list volumes by disk offering',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'the ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'the type of disk volume',
                'type'        => 'string',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the pod id the disk volume belongs to',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'storageid' => array(
                'description' => 'the ID of the storage pool, available to ROOT admin only',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the disk volume',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the ID of the availability zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'displayvolume' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the disk volume',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'storageid' => array(
                'description' => 'the ID of the storage pool, available to ROOT admin only',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the pod id the disk volume belongs to',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'updateRolePermission' => array(
        'description' => 'Updates a role permission order',
        'isasync'     => false,
        'params'      => array(
            'roleid' => array(
                'description' => 'ID of the role',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'ruleorder' => array(
                'description' => 'The parent role permission uuid, use 0 to move this rule at the top of the list',
                'type'        => 'list',
                'required'    => true,
            ),
        ),
    ),
    'listAutoScalePolicies' => array(
        'description' => 'Lists autoscale policies.',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the autoscale policy',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'conditionid' => array(
                'description' => 'the ID of the condition of the policy',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'vmgroupid' => array(
                'description' => 'the ID of the autoscale vm group',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'action' => array(
                'description' => 'the action to be executed if all the conditions evaluate to true for the specified duration.',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'cleanVMReservations' => array(
        'description' => 'Cleanups VM reservations in the database.',
        'isasync'     => true,
        'params'      => array(
        ),
    ),
    'createAffinityGroup' => array(
        'description' => 'Creates an affinity/anti-affinity group',
        'isasync'     => true,
        'params'      => array(
            'account' => array(
                'description' => 'an account for the affinity group. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'name of the affinity group',
                'type'        => 'string',
                'required'    => true,
            ),
            'type' => array(
                'description' => 'Type of the affinity group from the available affinity/anti-affinity group types',
                'type'        => 'string',
                'required'    => true,
            ),
            'description' => array(
                'description' => 'optional description of the affinity group',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'create affinity group for project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'domainId of the account owning the affinity group',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listDeploymentPlanners' => array(
        'description' => 'Lists all DeploymentPlanners available.',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listAlerts' => array(
        'description' => 'Lists all alerts.',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the alert',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'list by alert name',
                'type'        => 'string',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'list by alert type',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'deleteTags' => array(
        'description' => 'Deleting resource tag(s)',
        'isasync'     => true,
        'params'      => array(
            'tags' => array(
                'description' => 'Delete tags matching key/value pairs',
                'type'        => 'map',
                'required'    => false,
            ),
            'resourcetype' => array(
                'description' => 'Delete tag by resource type',
                'type'        => 'string',
                'required'    => true,
            ),
            'resourceids' => array(
                'description' => 'Delete tags for resource id(s)',
                'type'        => 'list',
                'required'    => true,
            ),
        ),
    ),
    'deleteAccountFromProject' => array(
        'description' => 'Deletes account from the project',
        'isasync'     => true,
        'params'      => array(
            'account' => array(
                'description' => 'name of the account to be removed from the project',
                'type'        => 'string',
                'required'    => true,
            ),
            'projectid' => array(
                'description' => 'ID of the project to remove the account from',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addBaremetalPxePingServer' => array(
        'description' => 'add a baremetal ping pxe server',
        'isasync'     => true,
        'params'      => array(
            'pingstorageserverip' => array(
                'description' => 'PING storage server ip',
                'type'        => 'string',
                'required'    => true,
            ),
            'url' => array(
                'description' => 'URL of the external pxe device',
                'type'        => 'string',
                'required'    => true,
            ),
            'pingdir' => array(
                'description' => 'Root directory on PING storage server',
                'type'        => 'string',
                'required'    => true,
            ),
            'pxeservertype' => array(
                'description' => 'type of pxe device',
                'type'        => 'string',
                'required'    => true,
            ),
            'pingcifspassword' => array(
                'description' => 'Password of PING storage server',
                'type'        => 'string',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'Pod Id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pingcifsusername' => array(
                'description' => 'Username of PING storage server',
                'type'        => 'string',
                'required'    => false,
            ),
            'password' => array(
                'description' => 'Credentials to reach external pxe device',
                'type'        => 'string',
                'required'    => true,
            ),
            'tftpdir' => array(
                'description' => 'Tftp root directory of PXE server',
                'type'        => 'string',
                'required'    => true,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'username' => array(
                'description' => 'Credentials to reach external pxe device',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listPrivateGateways' => array(
        'description' => 'List private gateways',
        'isasync'     => false,
        'params'      => array(
            'ipaddress' => array(
                'description' => 'list gateways by ip address',
                'type'        => 'string',
                'required'    => false,
            ),
            'vlan' => array(
                'description' => 'list gateways by vlan',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'list gateways by state',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list private gateway by id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'list gateways by vpc',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'ldapConfig' => array(
        'description' => 'Configure the LDAP context for this site.',
        'isasync'     => false,
        'params'      => array(
            'queryfilter' => array(
                'description' => 'You specify a query filter here, which narrows down the users, who can be part of this domain.',
                'type'        => 'string',
                'required'    => false,
            ),
            'truststore' => array(
                'description' => 'Enter the path to trust certificates store.',
                'type'        => 'string',
                'required'    => false,
            ),
            'searchbase' => array(
                'description' => 'The search base defines the starting point for the search in the directory tree Example:  dc=cloud,dc=com.',
                'type'        => 'string',
                'required'    => false,
            ),
            'ssl' => array(
                'description' => 'Check Use SSL if the external LDAP server is configured for LDAP over SSL.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'port' => array(
                'description' => 'Specify the LDAP port if required, default is 389.',
                'type'        => 'integer',
                'required'    => false,
            ),
            'binddn' => array(
                'description' => 'Specify the distinguished name of a user with the search permission on the directory.',
                'type'        => 'string',
                'required'    => false,
            ),
            'hostname' => array(
                'description' => 'Hostname or ip address of the ldap server eg: my.ldap.com',
                'type'        => 'string',
                'required'    => false,
            ),
            'bindpass' => array(
                'description' => 'Enter the password.',
                'type'        => 'string',
                'required'    => false,
            ),
            'truststorepass' => array(
                'description' => 'Enter the password for trust store.',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If true return current LDAP configuration',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'deletePortableIpRange' => array(
        'description' => 'deletes a range of portable public IP\'s associated with a region',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'Id of the portable ip range',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateVmNicIp' => array(
        'description' => 'Update the default Ip of a VM Nic',
        'isasync'     => true,
        'params'      => array(
            'ipaddress' => array(
                'description' => 'Secondary IP Address',
                'type'        => 'string',
                'required'    => false,
            ),
            'nicid' => array(
                'description' => 'the ID of the nic to which you want to assign private IP',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateRegion' => array(
        'description' => 'Updates a region',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'Id of region to update',
                'type'        => 'integer',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'updates region with this name',
                'type'        => 'string',
                'required'    => false,
            ),
            'endpoint' => array(
                'description' => 'updates region with this end point',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'updateVolume' => array(
        'description' => 'Updates the volume.',
        'isasync'     => true,
        'params'      => array(
            'displayvolume' => array(
                'description' => 'an optional field, whether to the display the volume to the end user or not.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'chaininfo' => array(
                'description' => 'The chain info of the volume',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the disk volume',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'storageid' => array(
                'description' => 'Destination storage pool UUID for the volume',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'path' => array(
                'description' => 'The path of the volume',
                'type'        => 'string',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'The state of the volume',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listUcsManagers' => array(
        'description' => 'List ucs manager',
        'isasync'     => false,
        'params'      => array(
            'zoneid' => array(
                'description' => 'the zone id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the ucs manager',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'quotaIsEnabled' => array(
        'description' => 'Return true if the plugin is enabled',
        'isasync'     => false,
        'params'      => array(
        ),
    ),
    'listNetworks' => array(
        'description' => 'Lists all available networks.',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list networks by ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'traffictype' => array(
                'description' => 'type of the traffic',
                'type'        => 'string',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'list networks by physical network id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'forvpc' => array(
                'description' => 'the network belongs to VPC',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'List networks by VPC',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'the type of the network. Supported values are: isolated and shared',
                'type'        => 'string',
                'required'    => false,
            ),
            'displaynetwork' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the zone ID of the network',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'restartrequired' => array(
                'description' => 'list networks by restartRequired',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'acltype' => array(
                'description' => 'list networks by ACL (access control list) type. Supported values are account and domain',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'canusefordeploy' => array(
                'description' => 'list networks available for VM deployment',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'specifyipranges' => array(
                'description' => 'true if need to list only networks which support specifying IP ranges',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'issystem' => array(
                'description' => 'true if network is system, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'supportedservices' => array(
                'description' => 'list networks supporting certain services',
                'type'        => 'list',
                'required'    => false,
            ),
        ),
    ),
    'uploadCustomCertificate' => array(
        'description' => 'Uploads a custom certificate for the console proxy VMs to use for SSL. Can be used to upload a single certificate signed by a known CA. Can also be used, through multiple calls, to upload a chain of certificates from CA to the custom certificate itself.',
        'isasync'     => true,
        'params'      => array(
            'name' => array(
                'description' => 'A name / alias for the certificate.',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainsuffix' => array(
                'description' => 'DNS domain suffix that the certificate is granted for.',
                'type'        => 'string',
                'required'    => true,
            ),
            'privatekey' => array(
                'description' => 'The private key for the attached certificate.',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'An integer providing the location in a chain that the certificate will hold. Usually, this can be left empty. When creating a chain, the top level certificate should have an ID of 1, with each step in the chain incrementing by one. Example, CA with id = 1, Intermediate CA with id = 2, Site certificate with ID = 3',
                'type'        => 'integer',
                'required'    => false,
            ),
            'certificate' => array(
                'description' => 'The certificate to be uploaded.',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listImageStores' => array(
        'description' => 'Lists image stores.',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the image store',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'protocol' => array(
                'description' => 'the image store protocol',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'provider' => array(
                'description' => 'the image store provider',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the image store',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the storage pool',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listCapacity' => array(
        'description' => 'Lists all the system wide capacities.',
        'isasync'     => false,
        'params'      => array(
            'sortby' => array(
                'description' => 'Sort the results. Available values: Usage',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'lists capacity by type* CAPACITY_TYPE_MEMORY = 0* CAPACITY_TYPE_CPU = 1* CAPACITY_TYPE_STORAGE = 2* CAPACITY_TYPE_STORAGE_ALLOCATED = 3* CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP = 4* CAPACITY_TYPE_PRIVATE_IP = 5* CAPACITY_TYPE_SECONDARY_STORAGE = 6* CAPACITY_TYPE_VLAN = 7* CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP = 8* CAPACITY_TYPE_LOCAL_STORAGE = 9.',
                'type'        => 'integer',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'lists capacity by the Pod ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'clusterid' => array(
                'description' => 'lists capacity by the Cluster ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'fetchlatest' => array(
                'description' => 'recalculate capacities and fetch the latest',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'lists capacity by the Zone ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'createAutoScaleVmProfile' => array(
        'description' => 'Creates a profile that contains information about the virtual machine which will be provisioned automatically by autoscale feature.',
        'isasync'     => true,
        'params'      => array(
            'serviceofferingid' => array(
                'description' => 'the service offering of the auto deployed virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'counterparam' => array(
                'description' => 'counterparam list. Example: counterparam[0].name=snmpcommunity&counterparam[0].value=public&counterparam[1].name=snmpport&counterparam[1].value=161',
                'type'        => 'map',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'availability zone for the auto deployed virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'destroyvmgraceperiod' => array(
                'description' => 'the time allowed for existing connections to get closed before a vm is destroyed',
                'type'        => 'integer',
                'required'    => false,
            ),
            'templateid' => array(
                'description' => 'the template of the auto deployed virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'autoscaleuserid' => array(
                'description' => 'the ID of the user used to launch and destroy the VMs',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the profile to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'otherdeployparams' => array(
                'description' => 'parameters other than zoneId/serviceOfferringId/templateId of the auto deployed virtual machine',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'createSecurityGroup' => array(
        'description' => 'Creates a security group',
        'isasync'     => false,
        'params'      => array(
            'projectid' => array(
                'description' => 'Create security group for project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'an optional domainId for the security group. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'name of the security group',
                'type'        => 'string',
                'required'    => true,
            ),
            'description' => array(
                'description' => 'the description of the security group',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'an optional account for the security group. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'releaseDedicatedGuestVlanRange' => array(
        'description' => 'Releases a dedicated guest vlan range to the system',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the dedicated guest vlan range',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createSSHKeyPair' => array(
        'description' => 'Create a new keypair and returns the private key',
        'isasync'     => false,
        'params'      => array(
            'projectid' => array(
                'description' => 'an optional project for the ssh key',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'Name of the keypair',
                'type'        => 'string',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'an optional account for the ssh key. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'an optional domainId for the ssh key. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'cancelHostMaintenance' => array(
        'description' => 'Cancels host maintenance.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the host ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateServiceOffering' => array(
        'description' => 'Updates a service offering.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the service offering to be updated',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'sortkey' => array(
                'description' => 'sort key of the service offering, integer',
                'type'        => 'integer',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the service offering to be updated',
                'type'        => 'string',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'the display text of the service offering to be updated',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listLdapUsers' => array(
        'description' => 'Lists all LDAP Users',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'listtype' => array(
                'description' => 'Determines whether all ldap users are returned or just non-cloudstack users',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'releaseDedicatedHost' => array(
        'description' => 'Release the dedication for host',
        'isasync'     => true,
        'params'      => array(
            'hostid' => array(
                'description' => 'the ID of the host',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateStoragePool' => array(
        'description' => 'Updates a storage pool.',
        'isasync'     => false,
        'params'      => array(
            'capacityiops' => array(
                'description' => 'IOPS CloudStack can provision from this storage pool',
                'type'        => 'long',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the Id of the storage pool',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'enabled' => array(
                'description' => 'false to disable the pool for allocation of new volumes, true to enable it back.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'capacitybytes' => array(
                'description' => 'bytes CloudStack can provision from this storage pool',
                'type'        => 'long',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'comma-separated list of tags for the storage pool',
                'type'        => 'list',
                'required'    => false,
            ),
        ),
    ),
    'deleteStorageNetworkIpRange' => array(
        'description' => 'Deletes a storage network IP Range.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the uuid of the storage network ip range',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listVirtualRouterElements' => array(
        'description' => 'Lists all available virtual router elements.',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list virtual router elements by id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'nspid' => array(
                'description' => 'list virtual router elements by network service provider id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'enabled' => array(
                'description' => 'list network offerings by enabled state',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'createInternalLoadBalancerElement' => array(
        'description' => 'Create an Internal Load Balancer element.',
        'isasync'     => true,
        'params'      => array(
            'nspid' => array(
                'description' => 'the network service provider ID of the internal load balancer element',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteFirewallRule' => array(
        'description' => 'Deletes a firewall rule',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the firewall rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addBaremetalHost' => array(
        'description' => 'add a baremetal host',
        'isasync'     => false,
        'params'      => array(
            'url' => array(
                'description' => 'the host URL',
                'type'        => 'string',
                'required'    => true,
            ),
            'allocationstate' => array(
                'description' => 'Allocation state of this Host for allocation of new resources',
                'type'        => 'string',
                'required'    => false,
            ),
            'password' => array(
                'description' => 'the password for the host',
                'type'        => 'string',
                'required'    => true,
            ),
            'clusterid' => array(
                'description' => 'the cluster ID for the host',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'username' => array(
                'description' => 'the username for the host',
                'type'        => 'string',
                'required'    => true,
            ),
            'clustername' => array(
                'description' => 'the cluster name for the host',
                'type'        => 'string',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'hypervisor type of the host',
                'type'        => 'string',
                'required'    => true,
            ),
            'ipaddress' => array(
                'description' => 'ip address intentionally allocated to this host after provisioning',
                'type'        => 'string',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the Pod ID for the host',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the host',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'hosttags' => array(
                'description' => 'list of tags to be added to the host',
                'type'        => 'list',
                'required'    => false,
            ),
        ),
    ),
    'deleteNiciraNvpDevice' => array(
        'description' => ' delete a nicira nvp device',
        'isasync'     => true,
        'params'      => array(
            'nvpdeviceid' => array(
                'description' => 'Nicira device ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'getSolidFireAccountId' => array(
        'description' => 'Get SolidFire Account ID',
        'isasync'     => false,
        'params'      => array(
            'storageid' => array(
                'description' => 'Storage Pool UUID',
                'type'        => 'string',
                'required'    => true,
            ),
            'accountid' => array(
                'description' => 'CloudStack Account UUID',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listApis' => array(
        'description' => 'lists all available apis on the server, provided by the Api Discovery plugin',
        'isasync'     => false,
        'params'      => array(
            'name' => array(
                'description' => 'API name',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'deleteProject' => array(
        'description' => 'Deletes a project',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'id of the project to be deleted',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'removeIpFromNic' => array(
        'description' => 'Removes secondary IP from the NIC.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the secondary ip address to nic',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateHostPassword' => array(
        'description' => 'Update password of a host/pool on management server.',
        'isasync'     => false,
        'params'      => array(
            'username' => array(
                'description' => 'the username for the host/cluster',
                'type'        => 'string',
                'required'    => true,
            ),
            'update_passwd_on_host' => array(
                'description' => 'if the password should also be updated on the hosts',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'hostid' => array(
                'description' => 'the host ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'clusterid' => array(
                'description' => 'the cluster ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'password' => array(
                'description' => 'the new password for the host/cluster',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'createRole' => array(
        'description' => 'Creates a role',
        'isasync'     => false,
        'params'      => array(
            'description' => array(
                'description' => 'The description of the role',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'creates a role with this unique name',
                'type'        => 'string',
                'required'    => true,
            ),
            'type' => array(
                'description' => 'The type of the role, valid options are: Admin, ResourceAdmin, DomainAdmin, User',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'deleteIpForwardingRule' => array(
        'description' => 'Deletes an IP forwarding rule',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the forwarding rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listBigSwitchBcfDevices' => array(
        'description' => 'Lists BigSwitch BCF Controller devices',
        'isasync'     => false,
        'params'      => array(
            'bcfdeviceid' => array(
                'description' => 'bigswitch BCF controller device ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'addSwift' => array(
        'description' => 'Adds Swift.',
        'isasync'     => false,
        'params'      => array(
            'key' => array(
                'description' => ' key for the user for swift',
                'type'        => 'string',
                'required'    => false,
            ),
            'url' => array(
                'description' => 'the URL for swift',
                'type'        => 'string',
                'required'    => true,
            ),
            'username' => array(
                'description' => 'the username for swift',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'the account for swift',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'getVirtualMachineUserData' => array(
        'description' => 'Returns user data associated with the VM',
        'isasync'     => false,
        'params'      => array(
            'virtualmachineid' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteStratosphereSsp' => array(
        'description' => 'Removes stratosphere ssp server',
        'isasync'     => false,
        'params'      => array(
            'hostid' => array(
                'description' => 'the host ID of ssp server',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createGlobalLoadBalancerRule' => array(
        'description' => 'Creates a global load balancer rule',
        'isasync'     => true,
        'params'      => array(
            'account' => array(
                'description' => 'the account associated with the global load balancer. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the domain ID associated with the load balancer',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'name of the load balancer rule',
                'type'        => 'string',
                'required'    => true,
            ),
            'gslblbmethod' => array(
                'description' => 'load balancer algorithm (roundrobin, leastconn, proximity) that method is used to distribute traffic across the zones participating in global server load balancing, if not specified defaults to \'round robin\'',
                'type'        => 'string',
                'required'    => false,
            ),
            'gslbservicetype' => array(
                'description' => 'GSLB service type (tcp, udp, http)',
                'type'        => 'string',
                'required'    => true,
            ),
            'gslbdomainname' => array(
                'description' => 'domain name for the GSLB service.',
                'type'        => 'string',
                'required'    => true,
            ),
            'gslbstickysessionmethodname' => array(
                'description' => 'session sticky method (sourceip) if not specified defaults to sourceip',
                'type'        => 'string',
                'required'    => false,
            ),
            'regionid' => array(
                'description' => 'region where the global load balancer is going to be created.',
                'type'        => 'integer',
                'required'    => true,
            ),
            'description' => array(
                'description' => 'the description of the load balancer rule',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'resizeVolume' => array(
        'description' => 'Resizes a volume',
        'isasync'     => true,
        'params'      => array(
            'miniops' => array(
                'description' => 'New minimum number of IOPS',
                'type'        => 'long',
                'required'    => false,
            ),
            'diskofferingid' => array(
                'description' => 'new disk offering id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'shrinkok' => array(
                'description' => 'Verify OK to Shrink',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'maxiops' => array(
                'description' => 'New maximum number of IOPS',
                'type'        => 'long',
                'required'    => false,
            ),
            'size' => array(
                'description' => 'New volume size in GB',
                'type'        => 'long',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the disk volume',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listSSHKeyPairs' => array(
        'description' => 'List registered keypairs',
        'isasync'     => false,
        'params'      => array(
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'fingerprint' => array(
                'description' => 'A public key fingerprint to look for',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'A key pair name to look for',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'deleteBrocadeVcsDevice' => array(
        'description' => ' delete a Brocade VCS Switch',
        'isasync'     => true,
        'params'      => array(
            'vcsdeviceid' => array(
                'description' => 'Brocade Switch ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createStaticRoute' => array(
        'description' => 'Creates a static route',
        'isasync'     => true,
        'params'      => array(
            'cidr' => array(
                'description' => 'static route cidr',
                'type'        => 'string',
                'required'    => true,
            ),
            'gatewayid' => array(
                'description' => 'the gateway id we are creating static route for',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listNiciraNvpDevices' => array(
        'description' => 'Lists Nicira NVP devices',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'nvpdeviceid' => array(
                'description' => 'nicira nvp device ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listZonesMetrics' => array(
        'description' => 'Lists zone metrics',
        'isasync'     => false,
        'params'      => array(
            'networktype' => array(
                'description' => 'the network type of the zone that the virtual machine belongs to',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List zones by resource tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the ID of the domain associated with the zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'showcapacities' => array(
                'description' => 'flag to display the capacity of the zones',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'available' => array(
                'description' => 'true if you want to retrieve all available Zones. False if you only want to return the Zones from which you have at least one VM. Default is false.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'deleteGlobalLoadBalancerRule' => array(
        'description' => 'Deletes a global load balancer rule.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the global load balancer rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'activateProject' => array(
        'description' => 'Activates a project',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'id of the project to be modified',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'getSolidFireVolumeAccessGroupId' => array(
        'description' => 'Get the SF Volume Access Group ID',
        'isasync'     => false,
        'params'      => array(
            'storageid' => array(
                'description' => 'Storage Pool UUID',
                'type'        => 'string',
                'required'    => true,
            ),
            'clusterid' => array(
                'description' => 'Cluster UUID',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'releaseDedicatedZone' => array(
        'description' => 'Release dedication of zone',
        'isasync'     => true,
        'params'      => array(
            'zoneid' => array(
                'description' => 'the ID of the Zone',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createVMSnapshot' => array(
        'description' => 'Creates snapshot for a vm.',
        'isasync'     => true,
        'params'      => array(
            'quiescevm' => array(
                'description' => 'quiesce vm if true',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'snapshotmemory' => array(
                'description' => 'snapshot memory if true',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'The display name of the snapshot',
                'type'        => 'string',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'The ID of the vm',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'description' => array(
                'description' => 'The description of the snapshot',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'enableStaticNat' => array(
        'description' => 'Enables static NAT for given IP address',
        'isasync'     => false,
        'params'      => array(
            'ipaddressid' => array(
                'description' => 'the public IP address ID for which static NAT feature is being enabled',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'virtualmachineid' => array(
                'description' => 'the ID of the virtual machine for enabling static NAT feature',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'networkid' => array(
                'description' => 'The network of the VM the static NAT will be enabled for. Required when public IP address is not associated with any guest network yet (VPC case)',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'vmguestip' => array(
                'description' => 'VM guest NIC secondary IP address for the port forwarding rule',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'createIpForwardingRule' => array(
        'description' => 'Creates an IP forwarding rule',
        'isasync'     => true,
        'params'      => array(
            'openfirewall' => array(
                'description' => 'if true, firewall rule for source/end public port is automatically created; if false - firewall rule has to be created explicitly. Has value true by default',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'cidrlist' => array(
                'description' => 'the CIDR list to forward traffic from',
                'type'        => 'list',
                'required'    => false,
            ),
            'protocol' => array(
                'description' => 'the protocol for the rule. Valid values are TCP or UDP.',
                'type'        => 'string',
                'required'    => true,
            ),
            'endport' => array(
                'description' => 'the end port for the rule',
                'type'        => 'integer',
                'required'    => false,
            ),
            'ipaddressid' => array(
                'description' => 'the public IP address ID of the forwarding rule, already associated via associateIp',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'startport' => array(
                'description' => 'the start port for the rule',
                'type'        => 'integer',
                'required'    => true,
            ),
        ),
    ),
    'updateIpAddress' => array(
        'description' => 'Updates an IP address',
        'isasync'     => true,
        'params'      => array(
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the IP to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the public IP address to update',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listBrocadeVcsDeviceNetworks' => array(
        'description' => 'lists network that are using a brocade vcs switch',
        'isasync'     => false,
        'params'      => array(
            'vcsdeviceid' => array(
                'description' => 'brocade vcs switch ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listStorageProviders' => array(
        'description' => 'Lists storage providers.',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'the type of storage provider: either primary or image',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'searchLdap' => array(
        'description' => 'Searches LDAP based on the username attribute',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'query' => array(
                'description' => 'query to search using',
                'type'        => 'string',
                'required'    => true,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'listRegions' => array(
        'description' => 'Lists Regions',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'List Region by region ID.',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'List Region by region name.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listNetworkACLLists' => array(
        'description' => 'Lists all network ACLs',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'Lists network ACL with the specified ID.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'list network ACLs by VPC ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'list network ACLs by specified name',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'list network ACLs by network ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'updateDiskOffering' => array(
        'description' => 'Updates a disk offering.',
        'isasync'     => false,
        'params'      => array(
            'displayoffering' => array(
                'description' => 'an optional field, whether to display the offering to the end user or not.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'ID of the disk offering',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'displaytext' => array(
                'description' => 'updates alternate display text of the disk offering with this value',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'updates name of the disk offering with this value',
                'type'        => 'string',
                'required'    => false,
            ),
            'sortkey' => array(
                'description' => 'sort key of the disk offering, integer',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'addPaloAltoFirewall' => array(
        'description' => 'Adds a Palo Alto firewall device',
        'isasync'     => true,
        'params'      => array(
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'networkdevicetype' => array(
                'description' => 'supports only PaloAltoFirewall',
                'type'        => 'string',
                'required'    => true,
            ),
            'username' => array(
                'description' => 'Credentials to reach Palo Alto firewall device',
                'type'        => 'string',
                'required'    => true,
            ),
            'password' => array(
                'description' => 'Credentials to reach Palo Alto firewall device',
                'type'        => 'string',
                'required'    => true,
            ),
            'url' => array(
                'description' => 'URL of the Palo Alto appliance.',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listUcsProfiles' => array(
        'description' => 'List profile in ucs manager',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'ucsmanagerid' => array(
                'description' => 'the id for the ucs manager',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'recoverVirtualMachine' => array(
        'description' => 'Recovers a virtual machine.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'enableOutOfBandManagementForCluster' => array(
        'description' => 'Enables out-of-band management for a cluster',
        'isasync'     => true,
        'params'      => array(
            'clusterid' => array(
                'description' => 'the ID of the cluster',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listCapabilities' => array(
        'description' => 'Lists capabilities',
        'isasync'     => false,
        'params'      => array(
        ),
    ),
    'releaseDedicatedCluster' => array(
        'description' => 'Release the dedication for cluster',
        'isasync'     => true,
        'params'      => array(
            'clusterid' => array(
                'description' => 'the ID of the Cluster',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'getPathForVolume' => array(
        'description' => 'Get the path associated with the provided volume UUID',
        'isasync'     => false,
        'params'      => array(
            'volumeid' => array(
                'description' => 'CloudStack Volume UUID',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listRolePermissions' => array(
        'description' => 'Lists role permissions',
        'isasync'     => false,
        'params'      => array(
            'roleid' => array(
                'description' => 'ID of the role',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'updateVPC' => array(
        'description' => 'Updates a VPC',
        'isasync'     => true,
        'params'      => array(
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the VPC',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the vpc to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the id of the VPC',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'displaytext' => array(
                'description' => 'the display text of the VPC',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'startInternalLoadBalancerVM' => array(
        'description' => 'Starts an existing internal lb vm.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the internal lb vm',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'associateUcsProfileToBlade' => array(
        'description' => 'associate a profile to a blade',
        'isasync'     => true,
        'params'      => array(
            'ucsmanagerid' => array(
                'description' => 'ucs manager id',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'bladeid' => array(
                'description' => 'blade id',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'profiledn' => array(
                'description' => 'profile dn',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listInfrastructure' => array(
        'description' => 'Lists infrastructure',
        'isasync'     => false,
        'params'      => array(
        ),
    ),
    'updateAutoScaleVmProfile' => array(
        'description' => 'Updates an existing autoscale vm profile.',
        'isasync'     => true,
        'params'      => array(
            'destroyvmgraceperiod' => array(
                'description' => 'the time allowed for existing connections to get closed before a vm is destroyed',
                'type'        => 'integer',
                'required'    => false,
            ),
            'counterparam' => array(
                'description' => 'counterparam list. Example: counterparam[0].name=snmpcommunity&counterparam[0].value=public&counterparam[1].name=snmpport&counterparam[1].value=161',
                'type'        => 'map',
                'required'    => false,
            ),
            'templateid' => array(
                'description' => 'the template of the auto deployed virtual machine',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'autoscaleuserid' => array(
                'description' => 'the ID of the user used to launch and destroy the VMs',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the autoscale vm profile',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the profile to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'listProjectAccounts' => array(
        'description' => 'Lists project\'s accounts',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'ID of the project',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'list accounts of the project by account name',
                'type'        => 'string',
                'required'    => false,
            ),
            'role' => array(
                'description' => 'list accounts of the project by role',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'updatePortForwardingRule' => array(
        'description' => 'Updates a port forwarding rule. Only the private port and the virtual machine can be updated.',
        'isasync'     => true,
        'params'      => array(
            'vmguestip' => array(
                'description' => 'VM guest nic Secondary ip address for the port forwarding rule',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the rule to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'privateport' => array(
                'description' => 'the private port of the port forwarding rule',
                'type'        => 'integer',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'the ID of the virtual machine for the port forwarding rule',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the port forwarding rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addBigSwitchBcfDevice' => array(
        'description' => 'Adds a BigSwitch BCF Controller device',
        'isasync'     => true,
        'params'      => array(
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'nat' => array(
                'description' => 'NAT support of the BigSwitch BCF Controller.',
                'type'        => 'boolean',
                'required'    => true,
            ),
            'hostname' => array(
                'description' => 'Hostname of ip address of the BigSwitch BCF Controller.',
                'type'        => 'string',
                'required'    => true,
            ),
            'username' => array(
                'description' => 'Username of the BigSwitch BCF Controller.',
                'type'        => 'string',
                'required'    => true,
            ),
            'password' => array(
                'description' => 'Password of the BigSwitch BCF Controller.',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listDedicatedHosts' => array(
        'description' => 'Lists dedicated hosts.',
        'isasync'     => false,
        'params'      => array(
            'affinitygroupid' => array(
                'description' => 'list dedicated hosts by affinity group',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the ID of the domain associated with the host',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'the name of the account associated with the host. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'hostid' => array(
                'description' => 'the ID of the host',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listPortForwardingRules' => array(
        'description' => 'Lists all port forwarding rules for an IP address.',
        'isasync'     => false,
        'params'      => array(
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'Lists rule with the specified ID.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'list port forwarding rules for certain network',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'ipaddressid' => array(
                'description' => 'the ID of IP address of the port forwarding services',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listTemplatePermissions' => array(
        'description' => 'List template visibility and all accounts that have permissions to view this template.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the template ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createStorageNetworkIpRange' => array(
        'description' => 'Creates a Storage network IP range.',
        'isasync'     => true,
        'params'      => array(
            'vlan' => array(
                'description' => 'Optional. The vlan the ip range sits on, default to Null when it is not specificed which means you network is not on any Vlan. This is mainly for Vmware as other hypervisors can directly reterive bridge from pyhsical network traffic type table',
                'type'        => 'integer',
                'required'    => false,
            ),
            'endip' => array(
                'description' => 'the ending IP address',
                'type'        => 'string',
                'required'    => false,
            ),
            'startip' => array(
                'description' => 'the beginning IP address',
                'type'        => 'string',
                'required'    => true,
            ),
            'netmask' => array(
                'description' => 'the netmask for storage network',
                'type'        => 'string',
                'required'    => true,
            ),
            'gateway' => array(
                'description' => 'the gateway for storage network',
                'type'        => 'string',
                'required'    => true,
            ),
            'podid' => array(
                'description' => 'UUID of pod where the ip range belongs to',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addGloboDnsHost' => array(
        'description' => 'Adds the GloboDNS external host',
        'isasync'     => true,
        'params'      => array(
            'url' => array(
                'description' => 'GloboDNS url',
                'type'        => 'string',
                'required'    => true,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'username' => array(
                'description' => 'Username for GloboDNS',
                'type'        => 'string',
                'required'    => true,
            ),
            'password' => array(
                'description' => 'Password for GloboDNS',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'queryAsyncJobResult' => array(
        'description' => 'Retrieves the current status of asynchronous job.',
        'isasync'     => false,
        'params'      => array(
            'jobid' => array(
                'description' => 'the ID of the asychronous job',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'uploadSslCert' => array(
        'description' => 'Upload a certificate to CloudStack',
        'isasync'     => false,
        'params'      => array(
            'password' => array(
                'description' => 'Password for the private key',
                'type'        => 'string',
                'required'    => false,
            ),
            'privatekey' => array(
                'description' => 'Private key',
                'type'        => 'string',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'account that will own the SSL certificate',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'an optional project for the SSL certificate',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'certchain' => array(
                'description' => 'Certificate chain of trust',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'domain ID of the account owning the SSL certificate',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'certificate' => array(
                'description' => 'SSL certificate',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'createLoadBalancer' => array(
        'description' => 'Creates a load balancer',
        'isasync'     => true,
        'params'      => array(
            'sourceipaddress' => array(
                'description' => 'the source IP address the network traffic will be load balanced from',
                'type'        => 'string',
                'required'    => false,
            ),
            'sourceport' => array(
                'description' => 'the source port the network traffic will be load balanced from',
                'type'        => 'integer',
                'required'    => true,
            ),
            'algorithm' => array(
                'description' => 'load balancer algorithm (source, roundrobin, leastconn)',
                'type'        => 'string',
                'required'    => true,
            ),
            'networkid' => array(
                'description' => 'The guest network the load balancer will be created for',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the rule to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'sourceipaddressnetworkid' => array(
                'description' => 'the network id of the source ip address',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'description' => array(
                'description' => 'the description of the load balancer',
                'type'        => 'string',
                'required'    => false,
            ),
            'instanceport' => array(
                'description' => 'the TCP port of the virtual machine where the network traffic will be load balanced to',
                'type'        => 'integer',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'name of the load balancer',
                'type'        => 'string',
                'required'    => true,
            ),
            'scheme' => array(
                'description' => 'the load balancer scheme. Supported value in this release is Internal',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'cancelStorageMaintenance' => array(
        'description' => 'Cancels maintenance for primary storage',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the primary storage ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deployVirtualMachine' => array(
        'description' => 'Creates and automatically starts a virtual machine based on a service offering, disk offering, and template.',
        'isasync'     => true,
        'params'      => array(
            'iptonetworklist' => array(
                'description' => 'ip to network mapping. Can\'t be specified with networkIds parameter. Example: iptonetworklist[0].ip=10.10.10.11&iptonetworklist[0].ipv6=fc00:1234:5678::abcd&iptonetworklist[0].networkid=uuid - requests to use ip 10.10.10.11 in network id=uuid',
                'type'        => 'map',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'availability zone for the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'templateid' => array(
                'description' => 'the ID of the template for the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'affinitygroupnames' => array(
                'description' => 'comma separated list of affinity groups names that are going to be applied to the virtual machine.Mutually exclusive with affinitygroupids parameter',
                'type'        => 'list',
                'required'    => false,
            ),
            'deploymentplanner' => array(
                'description' => 'Deployment planner to use for vm allocation. Available to ROOT admin only',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyboard' => array(
                'description' => 'an optional keyboard device type for the virtual machine. valid value can be one of de,de-ch,es,fi,fr,fr-be,fr-ch,is,it,jp,nl-be,no,pt,uk,us',
                'type'        => 'string',
                'required'    => false,
            ),
            'userdata' => array(
                'description' => 'an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding. Using HTTP POST(via POST body), you can send up to 32K of data after base64 encoding.',
                'type'        => 'string',
                'required'    => false,
            ),
            'securitygroupnames' => array(
                'description' => 'comma separated list of security groups names that going to be applied to the virtual machine. Should be passed only when vm is created from a zone with Basic Network support. Mutually exclusive with securitygroupids parameter',
                'type'        => 'list',
                'required'    => false,
            ),
            'affinitygroupids' => array(
                'description' => 'comma separated list of affinity groups id that are going to be applied to the virtual machine. Mutually exclusive with affinitygroupnames parameter',
                'type'        => 'list',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'host name for the virtual machine',
                'type'        => 'string',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'used to specify the custom parameters.',
                'type'        => 'map',
                'required'    => false,
            ),
            'ip6address' => array(
                'description' => 'the ipv6 address for default vm\'s network',
                'type'        => 'string',
                'required'    => false,
            ),
            'group' => array(
                'description' => 'an optional group for the virtual machine',
                'type'        => 'string',
                'required'    => false,
            ),
            'displayvm' => array(
                'description' => 'an optional field, whether to the display the vm to the end user or not.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'Deploy vm for the project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keypair' => array(
                'description' => 'name of the ssh key pair used to login to the virtual machine',
                'type'        => 'string',
                'required'    => false,
            ),
            'ipaddress' => array(
                'description' => 'the ip address for default vm\'s network',
                'type'        => 'string',
                'required'    => false,
            ),
            'displayname' => array(
                'description' => 'an optional user generated name for the virtual machine',
                'type'        => 'string',
                'required'    => false,
            ),
            'hostid' => array(
                'description' => 'destination Host ID to deploy the VM to - parameter available for root admin only',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'size' => array(
                'description' => 'the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId',
                'type'        => 'long',
                'required'    => false,
            ),
            'rootdisksize' => array(
                'description' => 'Optional field to resize root disk on deploy. Value is in GB. Only applies to template-based deployments. Analogous to details[0].rootdisksize, which takes precedence over this parameter if both are provided',
                'type'        => 'long',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'an optional account for the virtual machine. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'diskofferingid' => array(
                'description' => 'the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'the hypervisor on which to deploy the virtual machine. The parameter is required and respected only when hypervisor info is not set on the ISO/Template passed to the call',
                'type'        => 'string',
                'required'    => false,
            ),
            'serviceofferingid' => array(
                'description' => 'the ID of the service offering for the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'networkids' => array(
                'description' => 'list of network ids used by virtual machine. Can\'t be specified with ipToNetworkList parameter',
                'type'        => 'list',
                'required'    => false,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'startvm' => array(
                'description' => 'true if start vm after creating; defaulted to true if not specified',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'securitygroupids' => array(
                'description' => 'comma separated list of security groups id that going to be applied to the virtual machine. Should be passed only when vm is created from a zone with Basic Network support. Mutually exclusive with securitygroupnames parameter',
                'type'        => 'list',
                'required'    => false,
            ),
        ),
    ),
    'deletePod' => array(
        'description' => 'Deletes a Pod.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the Pod',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listElastistorInterface' => array(
        'description' => 'Lists the network Interfaces of elastistor',
        'isasync'     => false,
        'params'      => array(
            'controllerid' => array(
                'description' => 'controller id',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'revokeSecurityGroupEgress' => array(
        'description' => 'Deletes a particular egress rule from this security group',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the egress rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createNetworkACLList' => array(
        'description' => 'Creates a network ACL for the given VPC',
        'isasync'     => true,
        'params'      => array(
            'description' => array(
                'description' => 'Description of the network ACL list',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the list to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'ID of the VPC associated with this network ACL list',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'Name of the network ACL list',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'deleteCondition' => array(
        'description' => 'Removes a condition',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the condition.',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createPortForwardingRule' => array(
        'description' => 'Creates a port forwarding rule',
        'isasync'     => true,
        'params'      => array(
            'ipaddressid' => array(
                'description' => 'the IP address id of the port forwarding rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'networkid' => array(
                'description' => 'the network of the virtual machine the port forwarding rule will be created for. Required when public IP address is not associated with any guest network yet (VPC case).',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'protocol' => array(
                'description' => 'the protocol for the port forwarding rule. Valid values are TCP or UDP.',
                'type'        => 'string',
                'required'    => true,
            ),
            'openfirewall' => array(
                'description' => 'if true, firewall rule for source/end public port is automatically created; if false - firewall rule has to be created explicitly. If not specified 1) defaulted to false when PF rule is being created for VPC guest network 2) in all other cases defaulted to true',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'vmguestip' => array(
                'description' => 'VM guest nic secondary IP address for the port forwarding rule',
                'type'        => 'string',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'the ID of the virtual machine for the port forwarding rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'privateport' => array(
                'description' => 'the starting port of port forwarding rule\'s private port range',
                'type'        => 'integer',
                'required'    => true,
            ),
            'publicendport' => array(
                'description' => 'the ending port of port forwarding rule\'s private port range',
                'type'        => 'integer',
                'required'    => false,
            ),
            'publicport' => array(
                'description' => 'the starting port of port forwarding rule\'s public port range',
                'type'        => 'integer',
                'required'    => true,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the rule to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'privateendport' => array(
                'description' => 'the ending port of port forwarding rule\'s private port range',
                'type'        => 'integer',
                'required'    => false,
            ),
            'cidrlist' => array(
                'description' => 'the cidr list to forward traffic from',
                'type'        => 'list',
                'required'    => false,
            ),
        ),
    ),
    'deleteSecondaryStagingStore' => array(
        'description' => 'Deletes a secondary staging store .',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the staging store ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listElastistorVolume' => array(
        'description' => 'Lists the volumes of elastistor',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the account',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listNetscalerLoadBalancers' => array(
        'description' => 'lists netscaler load balancer devices',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'lbdeviceid' => array(
                'description' => 'netscaler load balancer device ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'createVPCOffering' => array(
        'description' => 'Creates VPC offering',
        'isasync'     => true,
        'params'      => array(
            'serviceproviderlist' => array(
                'description' => 'provider to service mapping. If not specified, the provider for the service will be mapped to the default provider on the physical network',
                'type'        => 'map',
                'required'    => false,
            ),
            'servicecapabilitylist' => array(
                'description' => 'desired service capabilities as part of vpc offering',
                'type'        => 'map',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'the display text of the vpc offering',
                'type'        => 'string',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'the name of the vpc offering',
                'type'        => 'string',
                'required'    => true,
            ),
            'supportedservices' => array(
                'description' => 'services supported by the vpc offering',
                'type'        => 'list',
                'required'    => true,
            ),
            'serviceofferingid' => array(
                'description' => 'the ID of the service offering for the VPC router appliance',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'createEgressFirewallRule' => array(
        'description' => 'Creates a egress firewall rule for a given network ',
        'isasync'     => true,
        'params'      => array(
            'cidrlist' => array(
                'description' => 'the cidr list to forward traffic from',
                'type'        => 'list',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'type of firewallrule: system/user',
                'type'        => 'string',
                'required'    => false,
            ),
            'endport' => array(
                'description' => 'the ending port of firewall rule',
                'type'        => 'integer',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'the network id of the port forwarding rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the rule to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'icmptype' => array(
                'description' => 'type of the icmp message being sent',
                'type'        => 'integer',
                'required'    => false,
            ),
            'startport' => array(
                'description' => 'the starting port of firewall rule',
                'type'        => 'integer',
                'required'    => false,
            ),
            'icmpcode' => array(
                'description' => 'error code for this icmp message',
                'type'        => 'integer',
                'required'    => false,
            ),
            'protocol' => array(
                'description' => 'the protocol for the firewall rule. Valid values are TCP/UDP/ICMP.',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'deleteAlerts' => array(
        'description' => 'Delete one or more alerts.',
        'isasync'     => false,
        'params'      => array(
            'ids' => array(
                'description' => 'the IDs of the alerts',
                'type'        => 'list',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'delete by alert type',
                'type'        => 'string',
                'required'    => false,
            ),
            'enddate' => array(
                'description' => 'end date range to delete alerts (including) this date (use format \"yyyy-MM-dd\" or the new format \"yyyy-MM-ddThh:mm:ss\")',
                'type'        => 'date',
                'required'    => false,
            ),
            'startdate' => array(
                'description' => 'start date range to delete alerts (including) this date (use format \"yyyy-MM-dd\" or the new format \"yyyy-MM-ddThh:mm:ss\")',
                'type'        => 'date',
                'required'    => false,
            ),
        ),
    ),
    'destroyRouter' => array(
        'description' => 'Destroys a router.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the router',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listElastistorPool' => array(
        'description' => 'Lists the pools of elastistor',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the Pool',
                'type'        => 'long',
                'required'    => false,
            ),
        ),
    ),
    'updateLBStickinessPolicy' => array(
        'description' => 'Updates load balancer stickiness policy',
        'isasync'     => true,
        'params'      => array(
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'id of lb stickiness policy',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the policy to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'updateSnapshotPolicy' => array(
        'description' => 'Updates the snapshot policy.',
        'isasync'     => true,
        'params'      => array(
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the snapshot policy to the end user or not.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the snapshot policy',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listUsageRecords' => array(
        'description' => 'Lists usage records for accounts',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'accountid' => array(
                'description' => 'List usage records for the specified account',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'usageid' => array(
                'description' => 'List usage records for the specified usage UUID. Can be used only together with TYPE parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'List usage records for the specified usage type',
                'type'        => 'long',
                'required'    => false,
            ),
            'startdate' => array(
                'description' => 'Start date range for usage record query (use format \"yyyy-MM-dd\" or the new format \"yyyy-MM-dd HH:mm:ss\", e.g. startDate=2015-01-01 or startdate=2015-01-01 11:00:00).',
                'type'        => 'date',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'List usage records for the specified user.',
                'type'        => 'string',
                'required'    => false,
            ),
            'enddate' => array(
                'description' => 'End date range for usage record query (use format \"yyyy-MM-dd\" or the new format \"yyyy-MM-dd HH:mm:ss\", e.g. startDate=2015-01-01 or startdate=2015-01-01 10:30:00).',
                'type'        => 'date',
                'required'    => true,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'List usage records for specified project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'List usage records for the specified domain.',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'assignToGlobalLoadBalancerRule' => array(
        'description' => 'Assign load balancer rule or list of load balancer rules to a global load balancer rules.',
        'isasync'     => true,
        'params'      => array(
            'gslblbruleweightsmap' => array(
                'description' => 'Map of LB rule id\'s and corresponding weights (between 1-100) in the GSLB rule, if not specified weight of a LB rule is defaulted to 1. Specified as \'gslblbruleweightsmap[0].loadbalancerid=UUID&gslblbruleweightsmap[0].weight=10\'',
                'type'        => 'map',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the global load balancer rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'loadbalancerrulelist' => array(
                'description' => 'the list load balancer rules that will be assigned to global load balancer rule',
                'type'        => 'list',
                'required'    => true,
            ),
        ),
    ),
    'listOvsElements' => array(
        'description' => 'Lists all available ovs elements.',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list ovs elements by id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'nspid' => array(
                'description' => 'list ovs elements by network service provider id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'enabled' => array(
                'description' => 'list network offerings by enabled state',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'updateTrafficType' => array(
        'description' => 'Updates traffic type of a physical network',
        'isasync'     => true,
        'params'      => array(
            'vmwarenetworklabel' => array(
                'description' => 'The network name label of the physical device dedicated to this traffic on a VMware host',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'traffic type id',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'ovm3networklabel' => array(
                'description' => 'The network name of the physical device dedicated to this traffic on an OVM3 host',
                'type'        => 'string',
                'required'    => false,
            ),
            'hypervnetworklabel' => array(
                'description' => 'The network name label of the physical device dedicated to this traffic on a Hyperv host',
                'type'        => 'string',
                'required'    => false,
            ),
            'kvmnetworklabel' => array(
                'description' => 'The network name label of the physical device dedicated to this traffic on a KVM host',
                'type'        => 'string',
                'required'    => false,
            ),
            'xennetworklabel' => array(
                'description' => 'The network name label of the physical device dedicated to this traffic on a XenServer host',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listPods' => array(
        'description' => 'Lists all Pods.',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list Pods by ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'list Pods by name',
                'type'        => 'string',
                'required'    => false,
            ),
            'allocationstate' => array(
                'description' => 'list pods by allocation state',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'list Pods by Zone ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'showcapacities' => array(
                'description' => 'flag to display the capacity of the pods',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listLdapConfigurations' => array(
        'description' => 'Lists all LDAP configurations',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'hostname' => array(
                'description' => 'Hostname',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'port' => array(
                'description' => 'Port',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'enableUser' => array(
        'description' => 'Enables a user account',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'Enables user by user ID.',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listOsCategories' => array(
        'description' => 'Lists all supported OS categories for this cloud.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'list Os category by id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'list os category by name',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'addNiciraNvpDevice' => array(
        'description' => 'Adds a Nicira NVP device',
        'isasync'     => true,
        'params'      => array(
            'password' => array(
                'description' => 'Credentials to access the Nicira Controller API',
                'type'        => 'string',
                'required'    => true,
            ),
            'l3gatewayserviceuuid' => array(
                'description' => 'The L3 Gateway Service UUID configured on the Nicira Controller',
                'type'        => 'string',
                'required'    => false,
            ),
            'hostname' => array(
                'description' => 'Hostname of ip address of the Nicira NVP Controller.',
                'type'        => 'string',
                'required'    => true,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'transportzoneuuid' => array(
                'description' => 'The Transportzone UUID configured on the Nicira Controller',
                'type'        => 'string',
                'required'    => true,
            ),
            'username' => array(
                'description' => 'Credentials to access the Nicira Controller API',
                'type'        => 'string',
                'required'    => true,
            ),
            'l2gatewayserviceuuid' => array(
                'description' => 'The L2 Gateway Service UUID configured on the Nicira Controller',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'addIpToNic' => array(
        'description' => 'Assigns secondary IP to NIC',
        'isasync'     => true,
        'params'      => array(
            'ipaddress' => array(
                'description' => 'Secondary IP Address',
                'type'        => 'string',
                'required'    => false,
            ),
            'nicid' => array(
                'description' => 'the ID of the nic to which you want to assign private IP',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateNetworkACLItem' => array(
        'description' => 'Updates ACL item with specified ID',
        'isasync'     => true,
        'params'      => array(
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'startport' => array(
                'description' => 'the starting port of ACL',
                'type'        => 'integer',
                'required'    => false,
            ),
            'icmpcode' => array(
                'description' => 'error code for this ICMP message',
                'type'        => 'integer',
                'required'    => false,
            ),
            'protocol' => array(
                'description' => 'the protocol for the ACL rule. Valid values are TCP/UDP/ICMP/ALL or valid protocol number',
                'type'        => 'string',
                'required'    => false,
            ),
            'action' => array(
                'description' => 'scl entry action, allow or deny',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the rule to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'endport' => array(
                'description' => 'the ending port of ACL',
                'type'        => 'integer',
                'required'    => false,
            ),
            'cidrlist' => array(
                'description' => 'the cidr list to allow traffic from/to',
                'type'        => 'list',
                'required'    => false,
            ),
            'number' => array(
                'description' => 'The network of the vm the ACL will be created for',
                'type'        => 'integer',
                'required'    => false,
            ),
            'icmptype' => array(
                'description' => 'type of the ICMP message being sent',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the network ACL item',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'traffictype' => array(
                'description' => 'the traffic type for the ACL,can be Ingress or Egress, defaulted to Ingress if not specified',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'createInstanceGroup' => array(
        'description' => 'Creates a vm group',
        'isasync'     => false,
        'params'      => array(
            'projectid' => array(
                'description' => 'The project of the instance group',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the instance group',
                'type'        => 'string',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'the account of the instance group. The account parameter must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the domain ID of account owning the instance group',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'deleteNetworkACLList' => array(
        'description' => 'Deletes a network ACL',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the network ACL',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateAccount' => array(
        'description' => 'Updates account information for the authenticated user',
        'isasync'     => false,
        'params'      => array(
            'domainid' => array(
                'description' => 'the ID of the domain where the account exists',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'accountdetails' => array(
                'description' => 'details for account used to store specific parameters',
                'type'        => 'map',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'the current account name',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'Account id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'networkdomain' => array(
                'description' => 'Network domain for the account\'s networks; empty string will update domainName with NULL value',
                'type'        => 'string',
                'required'    => false,
            ),
            'newname' => array(
                'description' => 'new name for the account',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'deleteNetworkDevice' => array(
        'description' => 'Deletes network device.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'Id of network device to delete',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listSnapshotPolicies' => array(
        'description' => 'Lists snapshot policies.',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'volumeid' => array(
                'description' => 'the ID of the disk volume',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the snapshot policy',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'configureInternalLoadBalancerElement' => array(
        'description' => 'Configures an Internal Load Balancer element.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the internal lb provider',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'enabled' => array(
                'description' => 'Enables/Disables the Internal Load Balancer element',
                'type'        => 'boolean',
                'required'    => true,
            ),
        ),
    ),
    'releaseHostReservation' => array(
        'description' => 'Releases host reservation.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the host ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteSSHKeyPair' => array(
        'description' => 'Deletes a keypair by name',
        'isasync'     => false,
        'params'      => array(
            'name' => array(
                'description' => 'Name of the keypair',
                'type'        => 'string',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'the domain ID associated with the keypair',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'the account associated with the keypair. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'the project associated with keypair',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'createDomain' => array(
        'description' => 'Creates a domain',
        'isasync'     => false,
        'params'      => array(
            'domainid' => array(
                'description' => 'Domain UUID, required for adding domain from another Region',
                'type'        => 'string',
                'required'    => false,
            ),
            'parentdomainid' => array(
                'description' => 'assigns new domain a parent domain by domain ID of the parent.  If no parent domain is specied, the ROOT domain is assumed.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'creates domain with this name',
                'type'        => 'string',
                'required'    => true,
            ),
            'networkdomain' => array(
                'description' => 'Network domain for networks in the domain',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'deleteSnapshotPolicies' => array(
        'description' => 'Deletes snapshot policies for the account.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the Id of the snapshot policy',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'ids' => array(
                'description' => 'list of snapshots policy IDs separated by comma',
                'type'        => 'list',
                'required'    => false,
            ),
        ),
    ),
    'listLBHealthCheckPolicies' => array(
        'description' => 'Lists load balancer health check policies.',
        'isasync'     => false,
        'params'      => array(
            'lbruleid' => array(
                'description' => 'the ID of the load balancer rule',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the health check policy',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'listEvents' => array(
        'description' => 'A command to list events.',
        'isasync'     => false,
        'params'      => array(
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'enddate' => array(
                'description' => 'the end date range of the list you want to retrieve (use format \"yyyy-MM-dd\" or the new format \"yyyy-MM-dd HH:mm:ss\")',
                'type'        => 'date',
                'required'    => false,
            ),
            'level' => array(
                'description' => 'the event level (INFO, WARN, ERROR)',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'entrytime' => array(
                'description' => 'the time the event was entered',
                'type'        => 'integer',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'startdate' => array(
                'description' => 'the start date range of the list you want to retrieve (use format \"yyyy-MM-dd\" or the new format \"yyyy-MM-dd HH:mm:ss\")',
                'type'        => 'date',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'the event type (see event types)',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the event',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'duration' => array(
                'description' => 'the duration of the event',
                'type'        => 'integer',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'assignCertToLoadBalancer' => array(
        'description' => 'Assigns a certificate to a load balancer rule',
        'isasync'     => true,
        'params'      => array(
            'certid' => array(
                'description' => 'the ID of the certificate',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'lbruleid' => array(
                'description' => 'the ID of the load balancer rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addHost' => array(
        'description' => 'Adds a new host.',
        'isasync'     => false,
        'params'      => array(
            'password' => array(
                'description' => 'the password for the host',
                'type'        => 'string',
                'required'    => true,
            ),
            'hypervisor' => array(
                'description' => 'hypervisor type of the host',
                'type'        => 'string',
                'required'    => true,
            ),
            'hosttags' => array(
                'description' => 'list of tags to be added to the host',
                'type'        => 'list',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the Pod ID for the host',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'clustername' => array(
                'description' => 'the cluster name for the host',
                'type'        => 'string',
                'required'    => false,
            ),
            'clusterid' => array(
                'description' => 'the cluster ID for the host',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'allocationstate' => array(
                'description' => 'Allocation state of this Host for allocation of new resources',
                'type'        => 'string',
                'required'    => false,
            ),
            'username' => array(
                'description' => 'the username for the host',
                'type'        => 'string',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the host',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'url' => array(
                'description' => 'the host URL',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listDedicatedClusters' => array(
        'description' => 'Lists dedicated clusters.',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the ID of the domain associated with the cluster',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'clusterid' => array(
                'description' => 'the ID of the cluster',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'affinitygroupid' => array(
                'description' => 'list dedicated clusters by affinity group',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'the name of the account associated with the cluster. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'changeOutOfBandManagementPassword' => array(
        'description' => 'Changes out-of-band management interface password on the host and updates the interface configuration in CloudStack if the operation succeeds, else reverts the old password',
        'isasync'     => true,
        'params'      => array(
            'hostid' => array(
                'description' => 'the ID of the host',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'password' => array(
                'description' => 'the new host management interface password of maximum length 16, if none is provided a random password would be used',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'deleteVpnGateway' => array(
        'description' => 'Delete site to site vpn gateway',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'id of customer gateway',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'expungeVirtualMachine' => array(
        'description' => 'Expunge a virtual machine. Once expunged, it cannot be recoverd.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addNetworkDevice' => array(
        'description' => 'Adds a network device of one of the following types: ExternalDhcp, ExternalFirewall, ExternalLoadBalancer, PxeServer',
        'isasync'     => false,
        'params'      => array(
            'networkdeviceparameterlist' => array(
                'description' => 'parameters for network device',
                'type'        => 'map',
                'required'    => false,
            ),
            'networkdevicetype' => array(
                'description' => 'Network device type, now supports ExternalDhcp, PxeServer, NetscalerMPXLoadBalancer, NetscalerVPXLoadBalancer, NetscalerSDXLoadBalancer, F5BigIpLoadBalancer, JuniperSRXFirewall, PaloAltoFirewall',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'createAutoScaleVmGroup' => array(
        'description' => 'Creates and automatically starts a virtual machine based on a service offering, disk offering, and template.',
        'isasync'     => true,
        'params'      => array(
            'vmprofileid' => array(
                'description' => 'the autoscale profile that contains information about the vms in the vm group.',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'lbruleid' => array(
                'description' => 'the ID of the load balancer rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the group to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'scaleuppolicyids' => array(
                'description' => 'list of scaleup autoscale policies',
                'type'        => 'list',
                'required'    => true,
            ),
            'scaledownpolicyids' => array(
                'description' => 'list of scaledown autoscale policies',
                'type'        => 'list',
                'required'    => true,
            ),
            'interval' => array(
                'description' => 'the frequency at which the conditions have to be evaluated',
                'type'        => 'integer',
                'required'    => false,
            ),
            'minmembers' => array(
                'description' => 'the minimum number of members in the vmgroup, the number of instances in the vm group will be equal to or more than this number.',
                'type'        => 'integer',
                'required'    => true,
            ),
            'maxmembers' => array(
                'description' => 'the maximum number of members in the vmgroup, The number of instances in the vm group will be equal to or less than this number.',
                'type'        => 'integer',
                'required'    => true,
            ),
        ),
    ),
    'deleteNetworkServiceProvider' => array(
        'description' => 'Deletes a Network Service Provider.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the network service provider',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'rebootRouter' => array(
        'description' => 'Starts a router.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the router',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listRoles' => array(
        'description' => 'Lists dynamic roles in CloudStack',
        'isasync'     => false,
        'params'      => array(
            'name' => array(
                'description' => 'List role by role name.',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'List role by role ID.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'List role by role type, valid options are: Admin, ResourceAdmin, DomainAdmin, User.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'createLBHealthCheckPolicy' => array(
        'description' => 'Creates a load balancer health check policy',
        'isasync'     => true,
        'params'      => array(
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the rule to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'description' => array(
                'description' => 'the description of the load balancer health check policy',
                'type'        => 'string',
                'required'    => false,
            ),
            'lbruleid' => array(
                'description' => 'the ID of the load balancer rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'intervaltime' => array(
                'description' => 'Amount of time between health checks (1 sec - 20940 sec)',
                'type'        => 'integer',
                'required'    => false,
            ),
            'unhealthythreshold' => array(
                'description' => 'Number of consecutive health check failures before declaring an instance unhealthy',
                'type'        => 'integer',
                'required'    => false,
            ),
            'healthythreshold' => array(
                'description' => 'Number of consecutive health check success before declaring an instance healthy',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pingpath' => array(
                'description' => 'HTTP ping path',
                'type'        => 'string',
                'required'    => false,
            ),
            'responsetimeout' => array(
                'description' => 'Time to wait when receiving a response from the health check (2sec - 60 sec)',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'archiveEvents' => array(
        'description' => 'Archive one or more events.',
        'isasync'     => false,
        'params'      => array(
            'ids' => array(
                'description' => 'the IDs of the events',
                'type'        => 'list',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'archive by event type',
                'type'        => 'string',
                'required'    => false,
            ),
            'startdate' => array(
                'description' => 'start date range to archive events (including) this date (use format \"yyyy-MM-dd\" or the new format \"yyyy-MM-ddThh:mm:ss\")',
                'type'        => 'date',
                'required'    => false,
            ),
            'enddate' => array(
                'description' => 'end date range to archive events (including) this date (use format \"yyyy-MM-dd\" or the new format \"yyyy-MM-ddThh:mm:ss\")',
                'type'        => 'date',
                'required'    => false,
            ),
        ),
    ),
    'updateHost' => array(
        'description' => 'Updates a host.',
        'isasync'     => false,
        'params'      => array(
            'oscategoryid' => array(
                'description' => 'the id of Os category to update the host with',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'url' => array(
                'description' => 'the new uri for the secondary storage: nfs://host/path',
                'type'        => 'string',
                'required'    => false,
            ),
            'allocationstate' => array(
                'description' => 'Change resource state of host, valid values are [Enable, Disable]. Operation may failed if host in states not allowing Enable/Disable',
                'type'        => 'string',
                'required'    => false,
            ),
            'hosttags' => array(
                'description' => 'list of tags to be added to the host',
                'type'        => 'list',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the host to update',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listConfigurations' => array(
        'description' => 'Lists all configurations.',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'lists configuration by name',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the ID of the Zone to update the parameter value for corresponding zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'category' => array(
                'description' => 'lists configurations by category',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'accountid' => array(
                'description' => 'the ID of the Account to update the parameter value for corresponding account',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'storageid' => array(
                'description' => 'the ID of the Storage pool to update the parameter value for corresponding storage pool',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'clusterid' => array(
                'description' => 'the ID of the Cluster to update the parameter value for corresponding cluster',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listProjectInvitations' => array(
        'description' => 'Lists project invitations and provides detailed information for listed invitations',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'list invitations by state',
                'type'        => 'string',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list by project id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list invitations by id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'activeonly' => array(
                'description' => 'if true, list only active invitations - having Pending state and ones that are not timed out yet',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'listBrocadeVcsDevices' => array(
        'description' => 'Lists Brocade VCS Switches',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'vcsdeviceid' => array(
                'description' => 'Brocade VCS switch ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'removeGuestOsMapping' => array(
        'description' => 'Removes a Guest OS Mapping.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'ID of the guest OS mapping',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteIso' => array(
        'description' => 'Deletes an ISO file.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the ISO file',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'the ID of the zone of the ISO file. If not specified, the ISO will be deleted from all the zones',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'createVpnCustomerGateway' => array(
        'description' => 'Creates site to site vpn customer gateway',
        'isasync'     => true,
        'params'      => array(
            'dpd' => array(
                'description' => 'If DPD is enabled for VPN connection',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'esplifetime' => array(
                'description' => 'Lifetime of phase 2 VPN connection to the customer gateway, in seconds',
                'type'        => 'long',
                'required'    => false,
            ),
            'ikelifetime' => array(
                'description' => 'Lifetime of phase 1 VPN connection to the customer gateway, in seconds',
                'type'        => 'long',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the domain ID associated with the gateway. If used with the account parameter returns the gateway associated with the account for the specified domain.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'create site-to-site VPN customer gateway for the project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'gateway' => array(
                'description' => 'public ip address id of the customer gateway',
                'type'        => 'string',
                'required'    => true,
            ),
            'ikepolicy' => array(
                'description' => 'IKE policy of the customer gateway',
                'type'        => 'string',
                'required'    => true,
            ),
            'cidrlist' => array(
                'description' => 'guest cidr list of the customer gateway',
                'type'        => 'string',
                'required'    => true,
            ),
            'ipsecpsk' => array(
                'description' => 'IPsec Preshared-Key of the customer gateway. Cannot contain newline or double quotes.',
                'type'        => 'string',
                'required'    => true,
            ),
            'forceencap' => array(
                'description' => 'Force Encapsulation for NAT traversal',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'the account associated with the gateway. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'name of this customer gateway',
                'type'        => 'string',
                'required'    => false,
            ),
            'esppolicy' => array(
                'description' => 'ESP policy of the customer gateway',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listTrafficTypes' => array(
        'description' => 'Lists traffic types of a given physical network.',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateResourceLimit' => array(
        'description' => 'Updates resource limits for an account or domain.',
        'isasync'     => false,
        'params'      => array(
            'projectid' => array(
                'description' => 'Update resource limits for project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'Update resource limits for all accounts in specified domain. If used with the account parameter, updates resource limits for a specified account in specified domain.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'Update resource for a specified account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'resourcetype' => array(
                'description' => 'Type of resource to update. Values are 0, 1, 2, 3, 4, 6, 7, 8, 9, 10 and 11. 0 - Instance. Number of instances a user can create. 1 - IP. Number of public IP addresses a user can own. 2 - Volume. Number of disk volumes a user can create. 3 - Snapshot. Number of snapshots a user can create. 4 - Template. Number of templates that a user can register/create. 6 - Network. Number of guest network a user can create. 7 - VPC. Number of VPC a user can create. 8 - CPU. Total number of CPU cores a user can use. 9 - Memory. Total Memory (in MB) a user can use. 10 - PrimaryStorage. Total primary storage space (in GiB) a user can use. 11 - SecondaryStorage. Total secondary storage space (in GiB) a user can use. ',
                'type'        => 'integer',
                'required'    => true,
            ),
            'max' => array(
                'description' => '  Maximum resource limit.',
                'type'        => 'long',
                'required'    => false,
            ),
        ),
    ),
    'updateRole' => array(
        'description' => 'Updates a role',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'ID of the role',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'type' => array(
                'description' => 'The type of the role, valid options are: Admin, ResourceAdmin, DomainAdmin, User',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'creates a role with this unique name',
                'type'        => 'string',
                'required'    => false,
            ),
            'description' => array(
                'description' => 'The description of the role',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'lockAccount' => array(
        'description' => 'This deprecated function used to locks an account. Look for the API DisableAccount instead',
        'isasync'     => false,
        'params'      => array(
            'account' => array(
                'description' => 'Locks the specified account.',
                'type'        => 'string',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'Locks the specified account on this domain.',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteTrafficMonitor' => array(
        'description' => 'Deletes an traffic monitor host.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'Id of the Traffic Monitor Host.',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createUser' => array(
        'description' => 'Creates a user for an account that already exists',
        'isasync'     => false,
        'params'      => array(
            'userid' => array(
                'description' => 'User UUID, required for adding account from external provisioning system',
                'type'        => 'string',
                'required'    => false,
            ),
            'lastname' => array(
                'description' => 'lastname',
                'type'        => 'string',
                'required'    => true,
            ),
            'firstname' => array(
                'description' => 'firstname',
                'type'        => 'string',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'Creates the user under the specified domain. Has to be accompanied with the account parameter',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'password' => array(
                'description' => 'Clear text password (Default hashed to SHA256SALT). If you wish to use any other hashing algorithm, you would need to write a custom authentication adapter See Docs section.',
                'type'        => 'string',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'Creates the user under the specified account. If no account is specified, the username will be used as the account name.',
                'type'        => 'string',
                'required'    => true,
            ),
            'email' => array(
                'description' => 'email',
                'type'        => 'string',
                'required'    => true,
            ),
            'timezone' => array(
                'description' => 'Specifies a timezone for this command. For more information on the timezone parameter, see Time Zone Format.',
                'type'        => 'string',
                'required'    => false,
            ),
            'username' => array(
                'description' => 'Unique username.',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'deleteAutoScalePolicy' => array(
        'description' => 'Deletes a autoscale policy.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the autoscale policy',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listNetworkIsolationMethods' => array(
        'description' => 'Lists supported methods of network isolation',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'updateNetworkACLList' => array(
        'description' => 'Updates network ACL list',
        'isasync'     => true,
        'params'      => array(
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the list to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the network ACL',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listDiskOfferings' => array(
        'description' => 'Lists all available disk offerings.',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'ID of the disk offering',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'name of the disk offering',
                'type'        => 'string',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'detachVolume' => array(
        'description' => 'Detaches a disk volume from a virtual machine.',
        'isasync'     => true,
        'params'      => array(
            'deviceid' => array(
                'description' => 'the device ID on the virtual machine where volume is detached from',
                'type'        => 'long',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the disk volume',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'the ID of the virtual machine where the volume is detached from',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'deleteUser' => array(
        'description' => 'Deletes a user for an account',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'id of the user to be deleted',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteNetworkACL' => array(
        'description' => 'Deletes a network ACL',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the network ACL',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listSnapshots' => array(
        'description' => 'Lists all available snapshots for the account.',
        'isasync'     => false,
        'params'      => array(
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'lists snapshot by snapshot ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'intervaltype' => array(
                'description' => 'valid values are HOURLY, DAILY, WEEKLY, and MONTHLY.',
                'type'        => 'string',
                'required'    => false,
            ),
            'snapshottype' => array(
                'description' => 'valid values are MANUAL or RECURRING.',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'lists snapshot by snapshot name',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'list snapshots by zone id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'volumeid' => array(
                'description' => 'the ID of the disk volume',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'ids' => array(
                'description' => 'the IDs of the snapshots, mutually exclusive with id',
                'type'        => 'list',
                'required'    => false,
            ),
        ),
    ),
    'deleteVPC' => array(
        'description' => 'Deletes a VPC',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the VPC',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteSecurityGroup' => array(
        'description' => 'Deletes security group',
        'isasync'     => false,
        'params'      => array(
            'projectid' => array(
                'description' => 'the project of the security group',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the domain ID of account owning the security group',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'The ID of the security group. Mutually exclusive with id parameter',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'the account of the security group. Must be specified with domain ID',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'The ID of the security group. Mutually exclusive with name parameter',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listCounters' => array(
        'description' => 'List the counters',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'ID of the Counter.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'Name of the counter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'source' => array(
                'description' => 'Source of the counter.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'deleteSslCert' => array(
        'description' => 'Delete a certificate to CloudStack',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'Id of SSL certificate',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateHypervisorCapabilities' => array(
        'description' => 'Updates a hypervisor capabilities.',
        'isasync'     => false,
        'params'      => array(
            'maxguestslimit' => array(
                'description' => 'the max number of Guest VMs per host for this hypervisor.',
                'type'        => 'long',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'ID of the hypervisor capability',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'securitygroupenabled' => array(
                'description' => 'set true to enable security group for this hypervisor.',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'updateLoadBalancerRule' => array(
        'description' => 'Updates load balancer',
        'isasync'     => true,
        'params'      => array(
            'algorithm' => array(
                'description' => 'load balancer algorithm (source, roundrobin, leastconn)',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the load balancer rule',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the load balancer rule to update',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'description' => array(
                'description' => 'the description of the load balancer rule',
                'type'        => 'string',
                'required'    => false,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the rule to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'createPhysicalNetwork' => array(
        'description' => 'Creates a physical network',
        'isasync'     => true,
        'params'      => array(
            'networkspeed' => array(
                'description' => 'the speed for the physical network[1G/10G]',
                'type'        => 'string',
                'required'    => false,
            ),
            'isolationmethods' => array(
                'description' => 'the isolation method for the physical network[VLAN/L3/GRE]',
                'type'        => 'list',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the physical network',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'domain ID of the account owning a physical network',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the physical network',
                'type'        => 'string',
                'required'    => true,
            ),
            'vlan' => array(
                'description' => 'the VLAN for the physical network',
                'type'        => 'string',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'Tag the physical network',
                'type'        => 'list',
                'required'    => false,
            ),
            'broadcastdomainrange' => array(
                'description' => 'the broadcast domain range for the physical network[Pod or Zone]. In Acton release it can be Zone only in Advance zone, and Pod in Basic',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'createRolePermission' => array(
        'description' => 'Adds a API permission to a role',
        'isasync'     => false,
        'params'      => array(
            'roleid' => array(
                'description' => 'ID of the role',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'description' => array(
                'description' => 'The description of the role permission',
                'type'        => 'string',
                'required'    => false,
            ),
            'permission' => array(
                'description' => 'The rule permission, allow or deny. Default: deny.',
                'type'        => 'string',
                'required'    => true,
            ),
            'rule' => array(
                'description' => 'The API name or wildcard rule such as list*',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'enableOutOfBandManagementForHost' => array(
        'description' => 'Enables out-of-band management for a host',
        'isasync'     => true,
        'params'      => array(
            'hostid' => array(
                'description' => 'the ID of the host',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteTemplate' => array(
        'description' => 'Deletes a template from the system. All virtual machines using the deleted template will not be affected.',
        'isasync'     => true,
        'params'      => array(
            'zoneid' => array(
                'description' => 'the ID of zone of the template',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the template',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listHypervisorCapabilities' => array(
        'description' => 'Lists all hypervisor capabilities.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'ID of the hypervisor capability',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'the hypervisor for which to restrict the search',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'listTags' => array(
        'description' => 'List resource tag(s)',
        'isasync'     => false,
        'params'      => array(
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'key' => array(
                'description' => 'list by key',
                'type'        => 'string',
                'required'    => false,
            ),
            'value' => array(
                'description' => 'list by value',
                'type'        => 'string',
                'required'    => false,
            ),
            'resourceid' => array(
                'description' => 'list by resource id',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'customer' => array(
                'description' => 'list by customer name',
                'type'        => 'string',
                'required'    => false,
            ),
            'resourcetype' => array(
                'description' => 'list by resource type',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'deleteVpnCustomerGateway' => array(
        'description' => 'Delete site to site vpn customer gateway',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'id of customer gateway',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listIsoPermissions' => array(
        'description' => 'List ISO visibility and all accounts that have permissions to view this ISO.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the template ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createVirtualRouterElement' => array(
        'description' => 'Create a virtual router element.',
        'isasync'     => true,
        'params'      => array(
            'providertype' => array(
                'description' => 'The provider type. Supported types are VirtualRouter (default) and VPCVirtualRouter',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'nspid' => array(
                'description' => 'the network service provider ID of the virtual router element',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateAutoScalePolicy' => array(
        'description' => 'Updates an existing autoscale policy.',
        'isasync'     => true,
        'params'      => array(
            'conditionids' => array(
                'description' => 'the list of IDs of the conditions that are being evaluated on every interval',
                'type'        => 'list',
                'required'    => false,
            ),
            'duration' => array(
                'description' => 'the duration for which the conditions have to be true before action is taken',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the autoscale policy',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'quiettime' => array(
                'description' => 'the cool down period for which the policy should not be evaluated after the action has been taken',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'releaseDedicatedPod' => array(
        'description' => 'Release the dedication for the pod',
        'isasync'     => true,
        'params'      => array(
            'podid' => array(
                'description' => 'the ID of the Pod',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createVpnGateway' => array(
        'description' => 'Creates site to site vpn local gateway',
        'isasync'     => true,
        'params'      => array(
            'vpcid' => array(
                'description' => 'public ip address id of the vpn gateway',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the vpn to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'dedicateZone' => array(
        'description' => 'Dedicates a zones.',
        'isasync'     => true,
        'params'      => array(
            'account' => array(
                'description' => 'the name of the account which needs dedication. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the ID of the containing domain',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'the ID of the zone',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteCounter' => array(
        'description' => 'Deletes a counter',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the counter',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'dedicateCluster' => array(
        'description' => 'Dedicate an existing cluster',
        'isasync'     => true,
        'params'      => array(
            'clusterid' => array(
                'description' => 'the ID of the Cluster',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'the ID of the containing domain',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'the name of the account which needs dedication. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'linkDomainToLdap' => array(
        'description' => 'link an existing cloudstack domain to group or OU in ldap',
        'isasync'     => false,
        'params'      => array(
            'domainid' => array(
                'description' => 'The id of the domain which has to be linked to LDAP.',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'admin' => array(
                'description' => 'domain admin username in LDAP ',
                'type'        => 'string',
                'required'    => false,
            ),
            'accounttype' => array(
                'description' => 'Type of the account to auto import. Specify 0 for user and 2 for domain admin',
                'type'        => 'short',
                'required'    => true,
            ),
            'type' => array(
                'description' => 'type of the ldap name. GROUP or OU',
                'type'        => 'string',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'name of the group or OU in LDAP',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'updateStorageNetworkIpRange' => array(
        'description' => 'Update a Storage network IP range, only allowed when no IPs in this range have been allocated.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'UUID of storage network ip range',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'startip' => array(
                'description' => 'the beginning IP address',
                'type'        => 'string',
                'required'    => false,
            ),
            'endip' => array(
                'description' => 'the ending IP address',
                'type'        => 'string',
                'required'    => false,
            ),
            'vlan' => array(
                'description' => 'Optional. the vlan the ip range sits on',
                'type'        => 'integer',
                'required'    => false,
            ),
            'netmask' => array(
                'description' => 'the netmask for storage network',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listAsyncJobs' => array(
        'description' => 'Lists all pending asynchronous jobs for the account.',
        'isasync'     => false,
        'params'      => array(
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'startdate' => array(
                'description' => 'the start date of the async job',
                'type'        => 'tzdate',
                'required'    => false,
            ),
        ),
    ),
    'addBrocadeVcsDevice' => array(
        'description' => 'Adds a Brocade VCS Switch',
        'isasync'     => true,
        'params'      => array(
            'username' => array(
                'description' => 'Credentials to access the Brocade VCS Switch API',
                'type'        => 'string',
                'required'    => true,
            ),
            'hostname' => array(
                'description' => 'Hostname of ip address of the Brocade VCS Switch.',
                'type'        => 'string',
                'required'    => true,
            ),
            'password' => array(
                'description' => 'Credentials to access the Brocade VCS Switch API',
                'type'        => 'string',
                'required'    => true,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listUsageTypes' => array(
        'description' => 'List Usage Types',
        'isasync'     => false,
        'params'      => array(
        ),
    ),
    'listSecondaryStagingStores' => array(
        'description' => 'Lists secondary staging stores.',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'provider' => array(
                'description' => 'the staging store provider',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the staging store',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'protocol' => array(
                'description' => 'the staging store protocol',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the staging store',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the staging store',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'createVlanIpRange' => array(
        'description' => 'Creates a VLAN IP range.',
        'isasync'     => false,
        'params'      => array(
            'startipv6' => array(
                'description' => 'the beginning IPv6 address in the IPv6 network range',
                'type'        => 'string',
                'required'    => false,
            ),
            'netmask' => array(
                'description' => 'the netmask of the VLAN IP range',
                'type'        => 'string',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'optional parameter. Have to be specified for Direct Untagged vlan only.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'ip6cidr' => array(
                'description' => 'the CIDR of IPv6 network, must be at least /64',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'domain ID of the account owning a VLAN',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'vlan' => array(
                'description' => 'the ID or VID of the VLAN. If not specified, will be defaulted to the vlan of the network or if vlan of the network is null - to Untagged',
                'type'        => 'string',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'the physical network id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'endipv6' => array(
                'description' => 'the ending IPv6 address in the IPv6 network range',
                'type'        => 'string',
                'required'    => false,
            ),
            'startip' => array(
                'description' => 'the beginning IP address in the VLAN IP range',
                'type'        => 'string',
                'required'    => false,
            ),
            'ip6gateway' => array(
                'description' => 'the gateway of the IPv6 network. Required for Shared networks and Isolated networks when it belongs to VPC',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'project who will own the VLAN. If VLAN is Zone wide, this parameter should be ommited',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID of the VLAN IP range',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'the network id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'gateway' => array(
                'description' => 'the gateway of the VLAN IP range',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'account who will own the VLAN. If VLAN is Zone wide, this parameter should be ommited',
                'type'        => 'string',
                'required'    => false,
            ),
            'forvirtualnetwork' => array(
                'description' => 'true if VLAN is of Virtual type, false if Direct',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'endip' => array(
                'description' => 'the ending IP address in the VLAN IP range',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'addImageStore' => array(
        'description' => 'Adds backup image store.',
        'isasync'     => false,
        'params'      => array(
            'details' => array(
                'description' => 'the details for the image store. Example: details[0].key=accesskey&details[0].value=s389ddssaa&details[1].key=secretkey&details[1].value=8dshfsss',
                'type'        => 'map',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name for the image store',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the image store',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'provider' => array(
                'description' => 'the image store provider name',
                'type'        => 'string',
                'required'    => true,
            ),
            'url' => array(
                'description' => 'the URL for the image store',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'ldapCreateAccount' => array(
        'description' => 'Creates an account from an LDAP user',
        'isasync'     => false,
        'params'      => array(
            'timezone' => array(
                'description' => 'Specifies a timezone for this command. For more information on the timezone parameter, see Time Zone Format.',
                'type'        => 'string',
                'required'    => false,
            ),
            'roleid' => array(
                'description' => 'Creates the account under the specified role.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'username' => array(
                'description' => 'Unique username.',
                'type'        => 'string',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'Creates the user under the specified domain.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'accountdetails' => array(
                'description' => 'details for account used to store specific parameters',
                'type'        => 'map',
                'required'    => false,
            ),
            'networkdomain' => array(
                'description' => 'Network domain for the account\'s networks',
                'type'        => 'string',
                'required'    => false,
            ),
            'userid' => array(
                'description' => 'User UUID, required for adding account from external provisioning system',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'Creates the user under the specified account. If no account is specified, the username will be used as the account name.',
                'type'        => 'string',
                'required'    => false,
            ),
            'accountid' => array(
                'description' => 'Account UUID, required for adding account from external provisioning system',
                'type'        => 'string',
                'required'    => false,
            ),
            'accounttype' => array(
                'description' => 'Type of the account. Specify 0 for user, 1 for root admin, and 2 for domain admin',
                'type'        => 'short',
                'required'    => false,
            ),
        ),
    ),
    'findHostsForMigration' => array(
        'description' => 'Find hosts suitable for migrating a virtual machine.',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'find hosts to which this VM can be migrated and flag the hosts with enough CPU/RAM to host the VM',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'dedicatePod' => array(
        'description' => 'Dedicates a Pod.',
        'isasync'     => true,
        'params'      => array(
            'podid' => array(
                'description' => 'the ID of the Pod',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'the name of the account which needs dedication. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the ID of the containing domain',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteAutoScaleVmGroup' => array(
        'description' => 'Deletes a autoscale vm group.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the autoscale group',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateGlobalLoadBalancerRule' => array(
        'description' => 'update global load balancer rules.',
        'isasync'     => true,
        'params'      => array(
            'description' => array(
                'description' => 'the description of the load balancer rule',
                'type'        => 'string',
                'required'    => false,
            ),
            'gslbstickysessionmethodname' => array(
                'description' => 'session sticky method (sourceip) if not specified defaults to sourceip',
                'type'        => 'string',
                'required'    => false,
            ),
            'gslblbmethod' => array(
                'description' => 'load balancer algorithm (roundrobin, leastconn, proximity) that is used to distributed traffic across the zones participating in global server load balancing, if not specified defaults to \'round robin\'',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the global load balancer rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listRemoteAccessVpns' => array(
        'description' => 'Lists remote access vpns',
        'isasync'     => false,
        'params'      => array(
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'list remote access VPNs for ceratin network',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'Lists remote access vpn rule with the specified ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'publicipid' => array(
                'description' => 'public ip address id of the vpn server',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'registerTemplate' => array(
        'description' => 'Registers an existing template into the CloudStack cloud. ',
        'isasync'     => false,
        'params'      => array(
            'sshkeyenabled' => array(
                'description' => 'true if the template supports the sshkey upload feature; default is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'Template details in key/value pairs using format details[i].keyname=keyvalue. Example: details[0].hypervisortoolsversion=xenserver61',
                'type'        => 'map',
                'required'    => false,
            ),
            'isextractable' => array(
                'description' => 'true if the template or its derivatives are extractable; default is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the ID of the zone the template is to be hosted on',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'isdynamicallyscalable' => array(
                'description' => 'true if template contains XS/VMWare tools inorder to support dynamic scaling of VM cpu/memory',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'checksum' => array(
                'description' => 'the MD5 checksum value of this template',
                'type'        => 'string',
                'required'    => false,
            ),
            'templatetag' => array(
                'description' => 'the tag for this template.',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'an optional accountName. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'the display text of the template. This is usually used for display purposes.',
                'type'        => 'string',
                'required'    => true,
            ),
            'isrouting' => array(
                'description' => 'true if the template type is routing i.e., if template is used to deploy router',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'Register template for the project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the template',
                'type'        => 'string',
                'required'    => true,
            ),
            'ostypeid' => array(
                'description' => 'the ID of the OS Type that best represents the OS of this template.',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'bits' => array(
                'description' => '32 or 64 bits support. 64 by default',
                'type'        => 'integer',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'an optional domainId. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'requireshvm' => array(
                'description' => 'true if this template requires HVM',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'ispublic' => array(
                'description' => 'true if the template is available to all accounts; default is true',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'passwordenabled' => array(
                'description' => 'true if the template supports the password reset feature; default is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'the target hypervisor for the template',
                'type'        => 'string',
                'required'    => true,
            ),
            'isfeatured' => array(
                'description' => 'true if this template is a featured template, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'format' => array(
                'description' => 'the format for the template. Possible values include QCOW2, RAW, VHD and OVA.',
                'type'        => 'string',
                'required'    => true,
            ),
            'url' => array(
                'description' => 'the URL of where the template is hosted. Possible URL include http:// and https://',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listAffinityGroupTypes' => array(
        'description' => 'Lists affinity group types available',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'createServiceInstance' => array(
        'description' => 'Creates a system virtual-machine that implements network services',
        'isasync'     => true,
        'params'      => array(
            'serviceofferingid' => array(
                'description' => 'The service offering ID that defines the resources consumed by the service appliance',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'The name of the service instance',
                'type'        => 'string',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'An optional domainId for the virtual machine. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'rightnetworkid' => array(
                'description' => 'The right (outside) network ID for the service instance',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'Availability zone for the service instance',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'leftnetworkid' => array(
                'description' => 'The left (inside) network for service instance',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'An optional account for the virtual machine. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'Project ID for the service instance',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'templateid' => array(
                'description' => 'The template ID that specifies the image for the service appliance',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteNetworkOffering' => array(
        'description' => 'Deletes a network offering.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the network offering',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteBaremetalRct' => array(
        'description' => 'deletes baremetal rack configuration text',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'RCT id',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'disableAutoScaleVmGroup' => array(
        'description' => 'Disables an AutoScale Vm Group',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the autoscale group',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'authorizeSecurityGroupEgress' => array(
        'description' => 'Authorizes a particular egress rule for this security group',
        'isasync'     => true,
        'params'      => array(
            'icmpcode' => array(
                'description' => 'error code for this icmp message',
                'type'        => 'integer',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'an optional project of the security group',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'startport' => array(
                'description' => 'start port for this egress rule',
                'type'        => 'integer',
                'required'    => false,
            ),
            'securitygroupname' => array(
                'description' => 'The name of the security group. Mutually exclusive with securityGroupId parameter',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'an optional domainId for the security group. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'an optional account for the security group. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'endport' => array(
                'description' => 'end port for this egress rule',
                'type'        => 'integer',
                'required'    => false,
            ),
            'cidrlist' => array(
                'description' => 'the cidr list associated',
                'type'        => 'list',
                'required'    => false,
            ),
            'securitygroupid' => array(
                'description' => 'The ID of the security group. Mutually exclusive with securityGroupName parameter',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'usersecuritygrouplist' => array(
                'description' => 'user to security group mapping',
                'type'        => 'map',
                'required'    => false,
            ),
            'protocol' => array(
                'description' => 'TCP is default. UDP is the other supported protocol',
                'type'        => 'string',
                'required'    => false,
            ),
            'icmptype' => array(
                'description' => 'type of the icmp message being sent',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'disableOutOfBandManagementForCluster' => array(
        'description' => 'Disables out-of-band management for a cluster',
        'isasync'     => true,
        'params'      => array(
            'clusterid' => array(
                'description' => 'the ID of the cluster',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listVpnCustomerGateways' => array(
        'description' => 'Lists site to site vpn customer gateways',
        'isasync'     => false,
        'params'      => array(
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'id of the customer gateway',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'deleteRolePermission' => array(
        'description' => 'Deletes a role permission',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'ID of the role permission',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createAccount' => array(
        'description' => 'Creates an account',
        'isasync'     => false,
        'params'      => array(
            'lastname' => array(
                'description' => 'lastname',
                'type'        => 'string',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'Creates the user under the specified domain.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'networkdomain' => array(
                'description' => 'Network domain for the account\'s networks',
                'type'        => 'string',
                'required'    => false,
            ),
            'roleid' => array(
                'description' => 'Creates the account under the specified role.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'accountdetails' => array(
                'description' => 'details for account used to store specific parameters',
                'type'        => 'map',
                'required'    => false,
            ),
            'email' => array(
                'description' => 'email',
                'type'        => 'string',
                'required'    => true,
            ),
            'accountid' => array(
                'description' => 'Account UUID, required for adding account from external provisioning system',
                'type'        => 'string',
                'required'    => false,
            ),
            'firstname' => array(
                'description' => 'firstname',
                'type'        => 'string',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'Creates the user under the specified account. If no account is specified, the username will be used as the account name.',
                'type'        => 'string',
                'required'    => false,
            ),
            'accounttype' => array(
                'description' => 'Type of the account.  Specify 0 for user, 1 for root admin, and 2 for domain admin',
                'type'        => 'short',
                'required'    => false,
            ),
            'username' => array(
                'description' => 'Unique username.',
                'type'        => 'string',
                'required'    => true,
            ),
            'userid' => array(
                'description' => 'User UUID, required for adding account from external provisioning system',
                'type'        => 'string',
                'required'    => false,
            ),
            'timezone' => array(
                'description' => 'Specifies a timezone for this command. For more information on the timezone parameter, see Time Zone Format.',
                'type'        => 'string',
                'required'    => false,
            ),
            'password' => array(
                'description' => 'Clear text password (Default hashed to SHA256SALT). If you wish to use any other hashing algorithm, you would need to write a custom authentication adapter See Docs section.',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'prepareHostForMaintenance' => array(
        'description' => 'Prepares a host for maintenance.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the host ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addOpenDaylightController' => array(
        'description' => 'Adds an OpenDyalight controler',
        'isasync'     => true,
        'params'      => array(
            'username' => array(
                'description' => 'Username to access the OpenDaylight API',
                'type'        => 'string',
                'required'    => true,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'password' => array(
                'description' => 'Credential to access the OpenDaylight API',
                'type'        => 'string',
                'required'    => true,
            ),
            'url' => array(
                'description' => 'Api URL of the OpenDaylight Controller.',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'updateEgressFirewallRule' => array(
        'description' => 'Updates egress firewall rule ',
        'isasync'     => true,
        'params'      => array(
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the rule to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the egress firewall rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'getVolumeiScsiName' => array(
        'description' => 'Get Volume\'s iSCSI Name',
        'isasync'     => false,
        'params'      => array(
            'volumeid' => array(
                'description' => 'CloudStack Volume UUID',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'deletePrivateGateway' => array(
        'description' => 'Deletes a Private gateway',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the private gateway',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateGuestOs' => array(
        'description' => 'Updates the information about Guest OS',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'UUID of the Guest OS',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'osdisplayname' => array(
                'description' => 'Unique display name for Guest OS',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'stopInternalLoadBalancerVM' => array(
        'description' => 'Stops an Internal LB vm.',
        'isasync'     => true,
        'params'      => array(
            'forced' => array(
                'description' => 'Force stop the VM. The caller knows the VM is stopped.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the internal lb vm',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createSecondaryStagingStore' => array(
        'description' => 'create secondary staging store.',
        'isasync'     => false,
        'params'      => array(
            'provider' => array(
                'description' => 'the staging store provider name',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the staging store',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'url' => array(
                'description' => 'the URL for the staging store',
                'type'        => 'string',
                'required'    => true,
            ),
            'details' => array(
                'description' => 'the details for the staging store',
                'type'        => 'map',
                'required'    => false,
            ),
            'scope' => array(
                'description' => 'the scope of the staging store: zone only for now',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'generateUsageRecords' => array(
        'description' => 'Generates usage records. This will generate records only if there any records to be generated, i.e if the scheduled usage job was not run or failed',
        'isasync'     => false,
        'params'      => array(
            'startdate' => array(
                'description' => 'Start date range for usage record query. Use yyyy-MM-dd as the date format, e.g. startDate=2009-06-01.',
                'type'        => 'date',
                'required'    => true,
            ),
            'enddate' => array(
                'description' => 'End date range for usage record query. Use yyyy-MM-dd as the date format, e.g. startDate=2009-06-03.',
                'type'        => 'date',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'List events for the specified domain.',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'deleteTrafficType' => array(
        'description' => 'Deletes traffic type of a physical network',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'traffic type id',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteLoadBalancerRule' => array(
        'description' => 'Deletes a load balancer rule.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the load balancer rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'getApiLimit' => array(
        'description' => 'Get API limit count for the caller',
        'isasync'     => false,
        'params'      => array(
        ),
    ),
    'attachIso' => array(
        'description' => 'Attaches an ISO to a virtual machine.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the ISO file',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'virtualmachineid' => array(
                'description' => 'the ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deletePortForwardingRule' => array(
        'description' => 'Deletes a port forwarding rule',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the port forwarding rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listDomains' => array(
        'description' => 'Lists domains and provides detailed information for listed domains',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'List domain by domain ID.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'List domain by domain name.',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'level' => array(
                'description' => 'List domains by domain level.',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'getUser' => array(
        'description' => 'Find user account by API key',
        'isasync'     => false,
        'params'      => array(
            'userapikey' => array(
                'description' => 'API key of the user',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listLoadBalancerRules' => array(
        'description' => 'Lists load balancer rules.',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the availability zone ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the load balancer rule',
                'type'        => 'string',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'list by network ID the rule belongs to',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'the ID of the virtual machine of the load balancer rule',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'publicipid' => array(
                'description' => 'the public IP address ID of the load balancer rule',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the load balancer rule',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'getVolumeSnapshotDetails' => array(
        'description' => 'Get Volume Snapshot Details',
        'isasync'     => false,
        'params'      => array(
            'snapshotid' => array(
                'description' => 'CloudStack Snapshot UUID',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listPaloAltoFirewalls' => array(
        'description' => 'lists Palo Alto firewall devices in a physical network',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'fwdeviceid' => array(
                'description' => 'Palo Alto firewall device ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'deleteEvents' => array(
        'description' => 'Delete one or more events.',
        'isasync'     => false,
        'params'      => array(
            'ids' => array(
                'description' => 'the IDs of the events',
                'type'        => 'list',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'delete by event type',
                'type'        => 'string',
                'required'    => false,
            ),
            'startdate' => array(
                'description' => 'start date range to delete events (including) this date (use format \"yyyy-MM-dd\" or the new format \"yyyy-MM-ddThh:mm:ss\")',
                'type'        => 'date',
                'required'    => false,
            ),
            'enddate' => array(
                'description' => 'end date range to delete events (including) this date (use format \"yyyy-MM-dd\" or the new format \"yyyy-MM-ddThh:mm:ss\")',
                'type'        => 'date',
                'required'    => false,
            ),
        ),
    ),
    'removeCertFromLoadBalancer' => array(
        'description' => 'Removes a certificate from a load balancer rule',
        'isasync'     => true,
        'params'      => array(
            'lbruleid' => array(
                'description' => 'the ID of the load balancer rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteZone' => array(
        'description' => 'Deletes a Zone.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the Zone',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateProjectInvitation' => array(
        'description' => 'Accepts or declines project invitation',
        'isasync'     => true,
        'params'      => array(
            'token' => array(
                'description' => 'list invitations for specified account; this parameter has to be specified with domainId',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'account that is joining the project',
                'type'        => 'string',
                'required'    => false,
            ),
            'accept' => array(
                'description' => 'if true, accept the invitation, decline if false. True by default',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'id of the project to join',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteVolume' => array(
        'description' => 'Deletes a detached disk volume.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the disk volume',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createTags' => array(
        'description' => 'Creates resource tag(s)',
        'isasync'     => true,
        'params'      => array(
            'resourceids' => array(
                'description' => 'list of resources to create the tags for',
                'type'        => 'list',
                'required'    => true,
            ),
            'customer' => array(
                'description' => 'identifies client specific tag. When the value is not null, the tag can\'t be used by cloudStack code internally',
                'type'        => 'string',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'Map of tags (key/value pairs)',
                'type'        => 'map',
                'required'    => true,
            ),
            'resourcetype' => array(
                'description' => 'type of the resource',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'enableAutoScaleVmGroup' => array(
        'description' => 'Enables an AutoScale Vm Group',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the autoscale group',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listOpenDaylightControllers' => array(
        'description' => 'Lists OpenDyalight controllers',
        'isasync'     => false,
        'params'      => array(
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of a OpenDaylight Controller',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listResourceDetails' => array(
        'description' => 'List resource detail(s)',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'resourcetype' => array(
                'description' => 'list by resource type',
                'type'        => 'string',
                'required'    => true,
            ),
            'value' => array(
                'description' => 'list by key, value. Needs to be passed only along with key',
                'type'        => 'string',
                'required'    => false,
            ),
            'resourceid' => array(
                'description' => 'list by resource id',
                'type'        => 'string',
                'required'    => false,
            ),
            'key' => array(
                'description' => 'list by key',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'if set to true, only details marked with display=true, are returned. False by default',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'deleteLdapConfiguration' => array(
        'description' => 'Remove an Ldap Configuration',
        'isasync'     => false,
        'params'      => array(
            'hostname' => array(
                'description' => 'Hostname',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'updateCluster' => array(
        'description' => 'Updates an existing cluster',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the Cluster',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'hypervisor' => array(
                'description' => 'hypervisor type of the cluster',
                'type'        => 'string',
                'required'    => false,
            ),
            'clustername' => array(
                'description' => 'the cluster name',
                'type'        => 'string',
                'required'    => false,
            ),
            'allocationstate' => array(
                'description' => 'Allocation state of this cluster for allocation of new resources',
                'type'        => 'string',
                'required'    => false,
            ),
            'managedstate' => array(
                'description' => 'whether this cluster is managed by cloudstack',
                'type'        => 'string',
                'required'    => false,
            ),
            'clustertype' => array(
                'description' => 'hypervisor type of the cluster',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'scaleVirtualMachine' => array(
        'description' => 'Scales the virtual machine to a new service offering.',
        'isasync'     => true,
        'params'      => array(
            'serviceofferingid' => array(
                'description' => 'the ID of the service offering for the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'details' => array(
                'description' => 'name value pairs of custom parameters for cpu,memory and cpunumber. example details[i].name=value',
                'type'        => 'map',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'removeVpnUser' => array(
        'description' => 'Removes vpn user',
        'isasync'     => true,
        'params'      => array(
            'username' => array(
                'description' => 'username for the vpn user',
                'type'        => 'string',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'an optional account for the vpn user. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'an optional domainId for the vpn user. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'remove vpn user from the project',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listPaloAltoFirewallNetworks' => array(
        'description' => 'lists network that are using Palo Alto firewall device',
        'isasync'     => false,
        'params'      => array(
            'lbdeviceid' => array(
                'description' => 'palo alto balancer device ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'releasePublicIpRange' => array(
        'description' => 'Releases a Public IP range back to the system pool',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the id of the Public IP range',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listTemplates' => array(
        'description' => 'List all public, private, and privileged templates.',
        'isasync'     => false,
        'params'      => array(
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'ids' => array(
                'description' => 'the IDs of the templates, mutually exclusive with id',
                'type'        => 'list',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'the hypervisor for which to restrict the search',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'showremoved' => array(
                'description' => 'show removed templates as well',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the template name',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the template ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'templatefilter' => array(
                'description' => 'possible values are \"featured\", \"self\", \"selfexecutable\",\"sharedexecutable\",\"executable\", and \"community\". * featured : templates that have been marked as featured and public. * self : templates that have been registered or created by the calling user. * selfexecutable : same as self, but only returns templates that can be used to deploy a new VM. * sharedexecutable : templates ready to be deployed that have been granted to the calling user by another user. * executable : templates that are owned by the calling user, or public templates, that can be used to deploy a VM. * community : templates that have been marked as public but not featured. * all : all templates (only usable by admins).',
                'type'        => 'string',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'list templates by zoneId',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listDedicatedGuestVlanRanges' => array(
        'description' => 'Lists dedicated guest vlan ranges',
        'isasync'     => false,
        'params'      => array(
            'projectid' => array(
                'description' => 'project who will own the guest VLAN range',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list dedicated guest vlan ranges by id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'zone of the guest VLAN range',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'the account with which the guest VLAN range is associated. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the domain ID with which the guest VLAN range is associated.  If used with the account parameter, returns all guest VLAN ranges for that account in the specified domain.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'physical network id of the guest VLAN range',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'guestvlanrange' => array(
                'description' => 'the dedicated guest vlan range',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'updateVpnCustomerGateway' => array(
        'description' => 'Update site to site vpn customer gateway',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'id of customer gateway',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'ikelifetime' => array(
                'description' => 'Lifetime of phase 1 VPN connection to the customer gateway, in seconds',
                'type'        => 'long',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the domain ID associated with the gateway. If used with the account parameter returns the gateway associated with the account for the specified domain.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'ikepolicy' => array(
                'description' => 'IKE policy of the customer gateway',
                'type'        => 'string',
                'required'    => true,
            ),
            'gateway' => array(
                'description' => 'public ip address id of the customer gateway',
                'type'        => 'string',
                'required'    => true,
            ),
            'cidrlist' => array(
                'description' => 'guest cidr of the customer gateway',
                'type'        => 'string',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'the account associated with the gateway. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'esppolicy' => array(
                'description' => 'ESP policy of the customer gateway',
                'type'        => 'string',
                'required'    => true,
            ),
            'ipsecpsk' => array(
                'description' => 'IPsec Preshared-Key of the customer gateway. Cannot contain newline or double quotes.',
                'type'        => 'string',
                'required'    => true,
            ),
            'esplifetime' => array(
                'description' => 'Lifetime of phase 2 VPN connection to the customer gateway, in seconds',
                'type'        => 'long',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'name of this customer gateway',
                'type'        => 'string',
                'required'    => false,
            ),
            'forceencap' => array(
                'description' => 'Force encapsulation for Nat Traversal',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'dpd' => array(
                'description' => 'If DPD is enabled for VPN connection',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'updateIsoPermissions' => array(
        'description' => 'Updates ISO permissions',
        'isasync'     => false,
        'params'      => array(
            'ispublic' => array(
                'description' => 'true for public template/iso, false for private templates/isos',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the template ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'isfeatured' => array(
                'description' => 'true for featured template/iso, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectids' => array(
                'description' => 'a comma delimited list of projects. If specified, \"op\" parameter has to be passed in.',
                'type'        => 'list',
                'required'    => false,
            ),
            'accounts' => array(
                'description' => 'a comma delimited list of accounts. If specified, \"op\" parameter has to be passed in.',
                'type'        => 'list',
                'required'    => false,
            ),
            'op' => array(
                'description' => 'permission operator (add, remove, reset)',
                'type'        => 'string',
                'required'    => false,
            ),
            'isextractable' => array(
                'description' => 'true if the template/iso is extractable, false other wise. Can be set only by root admin',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'login' => array(
        'description' => 'Logs a user into the CloudStack. A successful login attempt will generate a JSESSIONID cookie value that can be passed in subsequent Query command calls until the \"logout\" command has been issued or the session has expired.',
        'isasync'     => false,
        'params'      => array(
            'username' => array(
                'description' => 'Username',
                'type'        => 'string',
                'required'    => true,
            ),
            'password' => array(
                'description' => 'Hashed password (Default is MD5). If you wish to use any other hashing algorithm, you would need to write a custom authentication adapter See Docs section.',
                'type'        => 'string',
                'required'    => true,
            ),
            'domain' => array(
                'description' => 'Path of the domain that the user belongs to. Example: domain=/com/cloud/internal. If no domain is passed in, the ROOT (/) domain is assumed.',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainId' => array(
                'description' => 'The id of the domain that the user belongs to. If both domain and domainId are passed in, \"domainId\" parameter takes precendence',
                'type'        => 'long',
                'required'    => false,
            ),
        ),
    ),
    'stopSystemVm' => array(
        'description' => 'Stops a system VM.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the system virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'forced' => array(
                'description' => 'Force stop the VM.  The caller knows the VM is stopped.',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'restartNetwork' => array(
        'description' => 'Restarts the network; includes 1) restarting network elements - virtual routers, DHCP servers 2) reapplying all public IPs 3) reapplying loadBalancing/portForwarding rules',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the network to restart.',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'cleanup' => array(
                'description' => 'If cleanup old network elements',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'prepareTemplate' => array(
        'description' => 'load template into primary storage',
        'isasync'     => false,
        'params'      => array(
            'templateid' => array(
                'description' => 'template ID of the template to be prepared in primary storage(s).',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'zone ID of the template to be prepared in primary storage(s).',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'storageid' => array(
                'description' => 'storage pool ID of the primary storage pool to which the template should be prepared. If it is not provided the template is prepared on all the available primary storage pools.',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'removeGuestOs' => array(
        'description' => 'Removes a Guest OS from listing.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'ID of the guest OS',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'rebootVirtualMachine' => array(
        'description' => 'Reboots a virtual machine.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'changeServiceForRouter' => array(
        'description' => 'Upgrades domain router to a new service offering',
        'isasync'     => false,
        'params'      => array(
            'serviceofferingid' => array(
                'description' => 'the service offering ID to apply to the domain router',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'id' => array(
                'description' => 'The ID of the router',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listGlobalLoadBalancerRules' => array(
        'description' => 'Lists load balancer rules.',
        'isasync'     => false,
        'params'      => array(
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'regionid' => array(
                'description' => 'region ID',
                'type'        => 'integer',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the global load balancer rule',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'removeRawUsageRecords' => array(
        'description' => 'Safely removes raw records from cloud_usage table',
        'isasync'     => false,
        'params'      => array(
            'interval' => array(
                'description' => 'Specify the number of days (greater than zero) to remove records that are older than those number of days from today. For example, specifying 10 would result in removing all the records created before 10 days from today',
                'type'        => 'integer',
                'required'    => true,
            ),
        ),
    ),
    'notifyBaremetalProvisionDone' => array(
        'description' => 'Notify provision has been done on a host. This api is for baremetal virtual router service, not for end user',
        'isasync'     => true,
        'params'      => array(
            'mac' => array(
                'description' => 'mac of the nic used for provision',
                'type'        => 'object',
                'required'    => true,
            ),
        ),
    ),
    'updateZone' => array(
        'description' => 'Updates a Zone.',
        'isasync'     => false,
        'params'      => array(
            'ip6dns2' => array(
                'description' => 'the second DNS for IPv6 network in the Zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'dns2' => array(
                'description' => 'the second DNS for the Zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'internaldns2' => array(
                'description' => 'the second internal DNS for the Zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'dhcpprovider' => array(
                'description' => 'the dhcp Provider for the Zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'domain' => array(
                'description' => 'Network domain name for the networks in the zone; empty string will update domain with NULL value',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the Zone',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'localstorageenabled' => array(
                'description' => 'true if local storage offering enabled, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'guestcidraddress' => array(
                'description' => 'the guest CIDR address for the Zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'the details for the Zone',
                'type'        => 'map',
                'required'    => false,
            ),
            'internaldns1' => array(
                'description' => 'the first internal DNS for the Zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'dns1' => array(
                'description' => 'the first DNS for the Zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'allocationstate' => array(
                'description' => 'Allocation state of this cluster for allocation of new resources',
                'type'        => 'string',
                'required'    => false,
            ),
            'dnssearchorder' => array(
                'description' => 'the dns search order list',
                'type'        => 'list',
                'required'    => false,
            ),
            'ip6dns1' => array(
                'description' => 'the first DNS for IPv6 network in the Zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the Zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'ispublic' => array(
                'description' => 'updates a private zone to public if set, but not vice-versa',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'listLBStickinessPolicies' => array(
        'description' => 'Lists load balancer stickiness policies.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the load balancer stickiness policy',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'lbruleid' => array(
                'description' => 'the ID of the load balancer rule',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'ldapRemove' => array(
        'description' => 'Remove the LDAP context for this site.',
        'isasync'     => false,
        'params'      => array(
        ),
    ),
    'listSecurityGroups' => array(
        'description' => 'Lists security groups',
        'isasync'     => false,
        'params'      => array(
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'securitygroupname' => array(
                'description' => 'lists security groups by name',
                'type'        => 'string',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'lists security groups by virtual machine id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list the security group by the id provided',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'dedicateGuestVlanRange' => array(
        'description' => 'Dedicates a guest vlan range to an account',
        'isasync'     => false,
        'params'      => array(
            'physicalnetworkid' => array(
                'description' => 'physical network ID of the vlan',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'domain ID of the account owning a VLAN',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'account who will own the VLAN',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'project who will own the VLAN',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'vlanrange' => array(
                'description' => 'guest vlan range to be dedicated',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listFirewallRules' => array(
        'description' => 'Lists all firewall rules for an IP address.',
        'isasync'     => false,
        'params'      => array(
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'list firewall rules for certain network',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'ipaddressid' => array(
                'description' => 'the ID of IP address of the firewall services',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'Lists rule with the specified ID.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'configurePaloAltoFirewall' => array(
        'description' => 'Configures a Palo Alto firewall device',
        'isasync'     => true,
        'params'      => array(
            'fwdeviceid' => array(
                'description' => 'Palo Alto firewall device ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'fwdevicecapacity' => array(
                'description' => 'capacity of the firewall device, Capacity will be interpreted as number of networks device can handle',
                'type'        => 'long',
                'required'    => false,
            ),
        ),
    ),
    'updateVMAffinityGroup' => array(
        'description' => 'Updates the affinity/anti-affinity group associations of a virtual machine. The VM has to be stopped and restarted for the new properties to take effect.',
        'isasync'     => true,
        'params'      => array(
            'affinitygroupids' => array(
                'description' => 'comma separated list of affinity groups id that are going to be applied to the virtual machine. Should be passed only when vm is created from a zone with Basic Network support. Mutually exclusive with securitygroupnames parameter',
                'type'        => 'list',
                'required'    => false,
            ),
            'affinitygroupnames' => array(
                'description' => 'comma separated list of affinity groups names that are going to be applied to the virtual machine. Should be passed only when vm is created from a zone with Basic Network support. Mutually exclusive with securitygroupids parameter',
                'type'        => 'list',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteVpnConnection' => array(
        'description' => 'Delete site to site vpn connection',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'id of vpn connection',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listAffinityGroups' => array(
        'description' => 'Lists affinity groups',
        'isasync'     => false,
        'params'      => array(
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'lists affinity groups by virtual machine ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'lists affinity groups by type',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list the affinity group by the ID provided',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'lists affinity groups by name',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'updateUser' => array(
        'description' => 'Updates a user account',
        'isasync'     => false,
        'params'      => array(
            'firstname' => array(
                'description' => 'first name',
                'type'        => 'string',
                'required'    => false,
            ),
            'lastname' => array(
                'description' => 'last name',
                'type'        => 'string',
                'required'    => false,
            ),
            'password' => array(
                'description' => 'Clear text password (default hashed to SHA256SALT). If you wish to use any other hasing algorithm, you would need to write a custom authentication adapter. Can\'t be passed when command is executed via integration.api.port',
                'type'        => 'string',
                'required'    => false,
            ),
            'userapikey' => array(
                'description' => 'The API key for the user. Must be specified with userSecretKey',
                'type'        => 'string',
                'required'    => false,
            ),
            'timezone' => array(
                'description' => 'Specifies a timezone for this command. For more information on the timezone parameter, see Time Zone Format.',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'User uuid',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'email' => array(
                'description' => 'email',
                'type'        => 'string',
                'required'    => false,
            ),
            'username' => array(
                'description' => 'Unique username',
                'type'        => 'string',
                'required'    => false,
            ),
            'usersecretkey' => array(
                'description' => 'The secret key for the user. Must be specified with userSecretKey',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'updateVpnConnection' => array(
        'description' => 'Updates site to site vpn connection',
        'isasync'     => true,
        'params'      => array(
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'id of vpn connection',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the vpn to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'deleteDiskOffering' => array(
        'description' => 'Updates a disk offering.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'ID of the disk offering',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateVpnGateway' => array(
        'description' => 'Updates site to site vpn local gateway',
        'isasync'     => true,
        'params'      => array(
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the vpn to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'id of customer gateway',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'startSystemVm' => array(
        'description' => 'Starts a system virtual machine.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the system virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateProject' => array(
        'description' => 'Updates a project',
        'isasync'     => true,
        'params'      => array(
            'account' => array(
                'description' => 'new Admin account for the project',
                'type'        => 'string',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'display text of the project',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'id of the project to be modified',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createZone' => array(
        'description' => 'Creates a Zone.',
        'isasync'     => false,
        'params'      => array(
            'internaldns2' => array(
                'description' => 'the second internal DNS for the Zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the ID of the containing domain, null for public zones',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domain' => array(
                'description' => 'Network domain name for the networks in the zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'networktype' => array(
                'description' => 'network type of the zone, can be Basic or Advanced',
                'type'        => 'string',
                'required'    => true,
            ),
            'ip6dns1' => array(
                'description' => 'the first DNS for IPv6 network in the Zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'internaldns1' => array(
                'description' => 'the first internal DNS for the Zone',
                'type'        => 'string',
                'required'    => true,
            ),
            'allocationstate' => array(
                'description' => 'Allocation state of this Zone for allocation of new resources',
                'type'        => 'string',
                'required'    => false,
            ),
            'dns2' => array(
                'description' => 'the second DNS for the Zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'securitygroupenabled' => array(
                'description' => 'true if network is security group enabled, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'ip6dns2' => array(
                'description' => 'the second DNS for IPv6 network in the Zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'dns1' => array(
                'description' => 'the first DNS for the Zone',
                'type'        => 'string',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'the name of the Zone',
                'type'        => 'string',
                'required'    => true,
            ),
            'guestcidraddress' => array(
                'description' => 'the guest CIDR address for the Zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'localstorageenabled' => array(
                'description' => 'true if local storage offering enabled, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'archiveAlerts' => array(
        'description' => 'Archive one or more alerts.',
        'isasync'     => false,
        'params'      => array(
            'ids' => array(
                'description' => 'the IDs of the alerts',
                'type'        => 'list',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'archive by alert type',
                'type'        => 'string',
                'required'    => false,
            ),
            'enddate' => array(
                'description' => 'end date range to archive alerts (including) this date (use format \"yyyy-MM-dd\" or the new format \"yyyy-MM-ddThh:mm:ss\")',
                'type'        => 'date',
                'required'    => false,
            ),
            'startdate' => array(
                'description' => 'start date range to archive alerts (including) this date (use format \"yyyy-MM-dd\" or the new format \"yyyy-MM-ddThh:mm:ss\")',
                'type'        => 'date',
                'required'    => false,
            ),
        ),
    ),
    'listBaremetalPxeServers' => array(
        'description' => 'list baremetal pxe server',
        'isasync'     => false,
        'params'      => array(
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'Pxe server device ID',
                'type'        => 'long',
                'required'    => false,
            ),
        ),
    ),
    'deleteNetwork' => array(
        'description' => 'Deletes a network',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the network',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'forced' => array(
                'description' => 'Force delete a network. Network will be marked as \'Destroy\' even when commands to shutdown and cleanup to the backend fails.',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'listStaticRoutes' => array(
        'description' => 'Lists all static routes',
        'isasync'     => false,
        'params'      => array(
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'gatewayid' => array(
                'description' => 'list static routes by gateway id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list static route by id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'list static routes by vpc id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'deleteNetscalerLoadBalancer' => array(
        'description' => ' delete a netscaler load balancer device',
        'isasync'     => true,
        'params'      => array(
            'lbdeviceid' => array(
                'description' => 'netscaler load balancer device ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listNics' => array(
        'description' => 'list the vm nics  IP to NIC',
        'isasync'     => false,
        'params'      => array(
            'virtualmachineid' => array(
                'description' => 'the ID of the vm',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'networkid' => array(
                'description' => 'list nic of the specific vm\'s network',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'nicid' => array(
                'description' => 'the ID of the nic to to list IPs',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'changeServiceForSystemVm' => array(
        'description' => 'Changes the service offering for a system vm (console proxy or secondary storage). The system vm must be in a \"Stopped\" state for this command to take effect.',
        'isasync'     => false,
        'params'      => array(
            'serviceofferingid' => array(
                'description' => 'the service offering ID to apply to the system vm',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'details' => array(
                'description' => 'name value pairs of custom parameters for cpu, memory and cpunumber. example details[i].name=value',
                'type'        => 'map',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'The ID of the system vm',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createStoragePool' => array(
        'description' => 'Creates a storage pool.',
        'isasync'     => false,
        'params'      => array(
            'capacitybytes' => array(
                'description' => 'bytes CloudStack can provision from this storage pool',
                'type'        => 'long',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name for the storage pool',
                'type'        => 'string',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the storage pool',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'scope' => array(
                'description' => 'the scope of the storage: cluster or zone',
                'type'        => 'string',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the Pod ID for the storage pool',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'the tags for the storage pool',
                'type'        => 'string',
                'required'    => false,
            ),
            'capacityiops' => array(
                'description' => 'IOPS CloudStack can provision from this storage pool',
                'type'        => 'long',
                'required'    => false,
            ),
            'provider' => array(
                'description' => 'the storage provider name',
                'type'        => 'string',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'the details for the storage pool',
                'type'        => 'map',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'hypervisor type of the hosts in zone that will be attached to this storage pool. KVM, VMware supported as of now.',
                'type'        => 'string',
                'required'    => false,
            ),
            'url' => array(
                'description' => 'the URL of the storage pool',
                'type'        => 'string',
                'required'    => true,
            ),
            'clusterid' => array(
                'description' => 'the cluster ID for the storage pool',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'managed' => array(
                'description' => 'whether the storage should be managed by CloudStack',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'deleteUcsManager' => array(
        'description' => 'Delete a Ucs manager',
        'isasync'     => false,
        'params'      => array(
            'ucsmanagerid' => array(
                'description' => 'ucs manager id',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'removeRegion' => array(
        'description' => 'Removes specified region',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'ID of the region to delete',
                'type'        => 'integer',
                'required'    => true,
            ),
        ),
    ),
    'listBaremetalDhcp' => array(
        'description' => 'list baremetal dhcp servers',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'dhcpservertype' => array(
                'description' => 'Type of DHCP device',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'DHCP server device ID',
                'type'        => 'long',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'addTrafficType' => array(
        'description' => 'Adds traffic type to a physical network',
        'isasync'     => true,
        'params'      => array(
            'vmwarenetworklabel' => array(
                'description' => 'The network name label of the physical device dedicated to this traffic on a VMware host',
                'type'        => 'string',
                'required'    => false,
            ),
            'isolationmethod' => array(
                'description' => 'Used if physical network has multiple isolation types and traffic type is public. Choose which isolation method. Valid options currently \'vlan\' or \'vxlan\', defaults to \'vlan\'.',
                'type'        => 'string',
                'required'    => false,
            ),
            'hypervnetworklabel' => array(
                'description' => 'The network name label of the physical device dedicated to this traffic on a Hyperv host',
                'type'        => 'string',
                'required'    => false,
            ),
            'ovm3networklabel' => array(
                'description' => 'The network name of the physical device dedicated to this traffic on an OVM3 host',
                'type'        => 'string',
                'required'    => false,
            ),
            'vlan' => array(
                'description' => 'The VLAN id to be used for Management traffic by VMware host',
                'type'        => 'string',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'traffictype' => array(
                'description' => 'the trafficType to be added to the physical network',
                'type'        => 'string',
                'required'    => true,
            ),
            'kvmnetworklabel' => array(
                'description' => 'The network name label of the physical device dedicated to this traffic on a KVM host',
                'type'        => 'string',
                'required'    => false,
            ),
            'xennetworklabel' => array(
                'description' => 'The network name label of the physical device dedicated to this traffic on a XenServer host',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listSwifts' => array(
        'description' => 'List Swift.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the id of the swift',
                'type'        => 'long',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'updateTemplate' => array(
        'description' => 'Updates attributes of a template.',
        'isasync'     => false,
        'params'      => array(
            'ostypeid' => array(
                'description' => 'the ID of the OS type that best represents the OS of this image.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the image file',
                'type'        => 'string',
                'required'    => false,
            ),
            'bootable' => array(
                'description' => 'true if image is bootable, false otherwise; available only for updateIso API',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'sortkey' => array(
                'description' => 'sort key of the template, integer',
                'type'        => 'integer',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'the display text of the image',
                'type'        => 'string',
                'required'    => false,
            ),
            'passwordenabled' => array(
                'description' => 'true if the image supports the password reset feature; default is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'requireshvm' => array(
                'description' => 'true if the template requres HVM, false otherwise; available only for updateTemplate API',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the image file',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'isrouting' => array(
                'description' => 'true if the template type is routing i.e., if template is used to deploy router',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'Details in key/value pairs using format details[i].keyname=keyvalue. Example: details[0].hypervisortoolsversion=xenserver61',
                'type'        => 'map',
                'required'    => false,
            ),
            'format' => array(
                'description' => 'the format for the image',
                'type'        => 'string',
                'required'    => false,
            ),
            'isdynamicallyscalable' => array(
                'description' => 'true if template/ISO contains XS/VMWare tools inorder to support dynamic scaling of VM cpu/memory',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'disableUser' => array(
        'description' => 'Disables a user account',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'Disables user by user ID.',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'configureVirtualRouterElement' => array(
        'description' => 'Configures a virtual router element.',
        'isasync'     => true,
        'params'      => array(
            'enabled' => array(
                'description' => 'Enabled/Disabled the service provider',
                'type'        => 'boolean',
                'required'    => true,
            ),
            'id' => array(
                'description' => 'the ID of the virtual router provider',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createSnapshotPolicy' => array(
        'description' => 'Creates a snapshot policy for the account.',
        'isasync'     => false,
        'params'      => array(
            'timezone' => array(
                'description' => 'Specifies a timezone for this command. For more information on the timezone parameter, see Time Zone Format.',
                'type'        => 'string',
                'required'    => true,
            ),
            'maxsnaps' => array(
                'description' => 'maximum number of snapshots to retain',
                'type'        => 'integer',
                'required'    => true,
            ),
            'volumeid' => array(
                'description' => 'the ID of the disk volume',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'schedule' => array(
                'description' => 'time the snapshot is scheduled to be taken. Format is:* if HOURLY, MM* if DAILY, MM:HH* if WEEKLY, MM:HH:DD (1-7)* if MONTHLY, MM:HH:DD (1-28)',
                'type'        => 'string',
                'required'    => true,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the policy to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'intervaltype' => array(
                'description' => 'valid values are HOURLY, DAILY, WEEKLY, and MONTHLY',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'deleteProjectInvitation' => array(
        'description' => 'Deletes project invitation',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'id of the invitation',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addBaremetalRct' => array(
        'description' => 'adds baremetal rack configuration text',
        'isasync'     => true,
        'params'      => array(
            'baremetalrcturl' => array(
                'description' => 'http url to baremetal RCT configuration',
                'type'        => 'object',
                'required'    => true,
            ),
        ),
    ),
    'updateInstanceGroup' => array(
        'description' => 'Updates a vm group',
        'isasync'     => false,
        'params'      => array(
            'name' => array(
                'description' => 'new instance group name',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'Instance group ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'migrateSystemVm' => array(
        'description' => 'Attempts Migration of a system virtual machine to the host specified.',
        'isasync'     => true,
        'params'      => array(
            'virtualmachineid' => array(
                'description' => 'the ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'hostid' => array(
                'description' => 'destination Host ID to migrate VM to',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createServiceOffering' => array(
        'description' => 'Creates a service offering.',
        'isasync'     => false,
        'params'      => array(
            'byteswriterate' => array(
                'description' => 'bytes write rate of the disk offering',
                'type'        => 'long',
                'required'    => false,
            ),
            'issystem' => array(
                'description' => 'is this a system vm offering',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'the display text of the service offering',
                'type'        => 'string',
                'required'    => true,
            ),
            'cpuspeed' => array(
                'description' => 'the CPU speed of the service offering in MHz.',
                'type'        => 'integer',
                'required'    => false,
            ),
            'hosttags' => array(
                'description' => 'the host tag for this service offering.',
                'type'        => 'string',
                'required'    => false,
            ),
            'maxiops' => array(
                'description' => 'max iops of the compute offering',
                'type'        => 'long',
                'required'    => false,
            ),
            'networkrate' => array(
                'description' => 'data transfer rate in megabits per second allowed. Supported only for non-System offering and system offerings having \"domainrouter\" systemvmtype',
                'type'        => 'integer',
                'required'    => false,
            ),
            'hypervisorsnapshotreserve' => array(
                'description' => 'Hypervisor snapshot reserve space as a percent of a volume (for managed storage using Xen or VMware)',
                'type'        => 'integer',
                'required'    => false,
            ),
            'storagetype' => array(
                'description' => 'the storage type of the service offering. Values are local and shared.',
                'type'        => 'string',
                'required'    => false,
            ),
            'bytesreadrate' => array(
                'description' => 'bytes read rate of the disk offering',
                'type'        => 'long',
                'required'    => false,
            ),
            'iopswriterate' => array(
                'description' => 'io requests write rate of the disk offering',
                'type'        => 'long',
                'required'    => false,
            ),
            'memory' => array(
                'description' => 'the total memory of the service offering in MB',
                'type'        => 'integer',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the ID of the containing domain, null for public offerings',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'the tags for this service offering.',
                'type'        => 'string',
                'required'    => false,
            ),
            'limitcpuuse' => array(
                'description' => 'restrict the CPU usage to committed service offering',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'isvolatile' => array(
                'description' => 'true if the virtual machine needs to be volatile so that on every reboot of VM, original root disk is dettached then destroyed and a fresh root disk is created and attached to VM',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'serviceofferingdetails' => array(
                'description' => 'details for planner, used to store specific parameters',
                'type'        => 'map',
                'required'    => false,
            ),
            'miniops' => array(
                'description' => 'min iops of the compute offering',
                'type'        => 'long',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the service offering',
                'type'        => 'string',
                'required'    => true,
            ),
            'cpunumber' => array(
                'description' => 'the CPU number of the service offering',
                'type'        => 'integer',
                'required'    => false,
            ),
            'deploymentplanner' => array(
                'description' => 'The deployment planner heuristics used to deploy a VM of this offering. If null, value of global config vm.deployment.planner is used',
                'type'        => 'string',
                'required'    => false,
            ),
            'iopsreadrate' => array(
                'description' => 'io requests read rate of the disk offering',
                'type'        => 'long',
                'required'    => false,
            ),
            'provisioningtype' => array(
                'description' => 'provisioning type used to create volumes. Valid values are thin, sparse, fat.',
                'type'        => 'string',
                'required'    => false,
            ),
            'customizediops' => array(
                'description' => 'whether compute offering iops is custom or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'offerha' => array(
                'description' => 'the HA for the service offering',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'systemvmtype' => array(
                'description' => 'the system VM type. Possible types are \"domainrouter\", \"consoleproxy\" and \"secondarystoragevm\".',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'removeNicFromVirtualMachine' => array(
        'description' => 'Removes VM from specified network by deleting a NIC',
        'isasync'     => true,
        'params'      => array(
            'nicid' => array(
                'description' => 'NIC ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'virtualmachineid' => array(
                'description' => 'Virtual Machine ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'revokeSecurityGroupIngress' => array(
        'description' => 'Deletes a particular ingress rule from this security group',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the ingress rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateDefaultNicForVirtualMachine' => array(
        'description' => 'Changes the default NIC on a VM',
        'isasync'     => true,
        'params'      => array(
            'nicid' => array(
                'description' => 'NIC ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'virtualmachineid' => array(
                'description' => 'Virtual Machine ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'disableStaticNat' => array(
        'description' => 'Disables static rule for given IP address',
        'isasync'     => true,
        'params'      => array(
            'ipaddressid' => array(
                'description' => 'the public IP address ID for which static NAT feature is being disabled',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createNetworkACL' => array(
        'description' => 'Creates a ACL rule in the given network (the network has to belong to VPC)',
        'isasync'     => true,
        'params'      => array(
            'number' => array(
                'description' => 'The network of the VM the ACL will be created for',
                'type'        => 'integer',
                'required'    => false,
            ),
            'endport' => array(
                'description' => 'the ending port of ACL',
                'type'        => 'integer',
                'required'    => false,
            ),
            'traffictype' => array(
                'description' => 'the traffic type for the ACL,can be ingress or egress, defaulted to ingress if not specified',
                'type'        => 'string',
                'required'    => false,
            ),
            'cidrlist' => array(
                'description' => 'the CIDR list to allow traffic from/to',
                'type'        => 'list',
                'required'    => false,
            ),
            'aclid' => array(
                'description' => 'The network of the VM the ACL will be created for',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'action' => array(
                'description' => 'scl entry action, allow or deny',
                'type'        => 'string',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'The network of the VM the ACL will be created for',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'protocol' => array(
                'description' => 'the protocol for the ACL rule. Valid values are TCP/UDP/ICMP/ALL or valid protocol number',
                'type'        => 'string',
                'required'    => true,
            ),
            'icmptype' => array(
                'description' => 'type of the ICMP message being sent',
                'type'        => 'integer',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the rule to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'icmpcode' => array(
                'description' => 'error code for this ICMP message',
                'type'        => 'integer',
                'required'    => false,
            ),
            'startport' => array(
                'description' => 'the starting port of ACL',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'createPod' => array(
        'description' => 'Creates a new Pod.',
        'isasync'     => false,
        'params'      => array(
            'gateway' => array(
                'description' => 'the gateway for the Pod',
                'type'        => 'string',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID in which the Pod will be created',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'the name of the Pod',
                'type'        => 'string',
                'required'    => true,
            ),
            'allocationstate' => array(
                'description' => 'Allocation state of this Pod for allocation of new resources',
                'type'        => 'string',
                'required'    => false,
            ),
            'startip' => array(
                'description' => 'the starting IP address for the Pod',
                'type'        => 'string',
                'required'    => true,
            ),
            'endip' => array(
                'description' => 'the ending IP address for the Pod',
                'type'        => 'string',
                'required'    => false,
            ),
            'netmask' => array(
                'description' => 'the netmask for the Pod',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'createVPC' => array(
        'description' => 'Creates a VPC',
        'isasync'     => true,
        'params'      => array(
            'name' => array(
                'description' => 'the name of the VPC',
                'type'        => 'string',
                'required'    => true,
            ),
            'start' => array(
                'description' => 'If set to false, the VPC won\'t start (VPC VR will not get allocated) until its first network gets implemented. True by default.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the vpc to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the domain ID associated with the VPC. If used with the account parameter returns the VPC associated with the account for the specified domain.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'cidr' => array(
                'description' => 'the cidr of the VPC. All VPC guest networks\' cidrs should be within this CIDR',
                'type'        => 'string',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'the account associated with the VPC. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'networkdomain' => array(
                'description' => 'VPC network domain. All networks inside the VPC will belong to this domain',
                'type'        => 'string',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'the display text of the VPC',
                'type'        => 'string',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'the ID of the availability zone',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'vpcofferingid' => array(
                'description' => 'the ID of the VPC offering',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'projectid' => array(
                'description' => 'create VPC for the project',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listOsTypes' => array(
        'description' => 'Lists all supported OS types for this cloud.',
        'isasync'     => false,
        'params'      => array(
            'oscategoryid' => array(
                'description' => 'list by Os Category id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list by Os type Id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'description' => array(
                'description' => 'list os by description',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'addBaremetalPxeKickStartServer' => array(
        'description' => 'add a baremetal pxe server',
        'isasync'     => true,
        'params'      => array(
            'tftpdir' => array(
                'description' => 'Tftp root directory of PXE server',
                'type'        => 'string',
                'required'    => true,
            ),
            'url' => array(
                'description' => 'URL of the external pxe device',
                'type'        => 'string',
                'required'    => true,
            ),
            'pxeservertype' => array(
                'description' => 'type of pxe device',
                'type'        => 'string',
                'required'    => true,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'username' => array(
                'description' => 'Credentials to reach external pxe device',
                'type'        => 'string',
                'required'    => true,
            ),
            'podid' => array(
                'description' => 'Pod Id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'password' => array(
                'description' => 'Credentials to reach external pxe device',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'registerIso' => array(
        'description' => 'Registers an existing ISO into the CloudStack Cloud.',
        'isasync'     => false,
        'params'      => array(
            'bootable' => array(
                'description' => 'true if this ISO is bootable. If not passed explicitly its assumed to be true',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'Register ISO for the project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'ostypeid' => array(
                'description' => 'the ID of the OS type that best represents the OS of this ISO. If the ISO is bootable this parameter needs to be passed',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isextractable' => array(
                'description' => 'true if the ISO or its derivatives are extractable; default is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'checksum' => array(
                'description' => 'the MD5 checksum value of this ISO',
                'type'        => 'string',
                'required'    => false,
            ),
            'imagestoreuuid' => array(
                'description' => 'Image store UUID',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'an optional account name. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'isdynamicallyscalable' => array(
                'description' => 'true if ISO contains XS/VMWare tools inorder to support dynamic scaling of VM CPU/memory',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'ispublic' => array(
                'description' => 'true if you want to register the ISO to be publicly available to all users, false otherwise.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'the display text of the ISO. This is usually used for display purposes.',
                'type'        => 'string',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'an optional domainId. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the ID of the zone you wish to register the ISO to.',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'isfeatured' => array(
                'description' => 'true if you want this ISO to be featured',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the ISO',
                'type'        => 'string',
                'required'    => true,
            ),
            'url' => array(
                'description' => 'the URL to where the ISO is currently being hosted',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listSslCerts' => array(
        'description' => 'Lists SSL certificates',
        'isasync'     => false,
        'params'      => array(
            'lbruleid' => array(
                'description' => 'Load balancer rule ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'accountid' => array(
                'description' => 'Account ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'certid' => array(
                'description' => 'ID of SSL certificate',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'Project that owns the SSL certificate',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'addResourceDetail' => array(
        'description' => 'Adds detail for the Resource.',
        'isasync'     => true,
        'params'      => array(
            'resourcetype' => array(
                'description' => 'type of the resource',
                'type'        => 'string',
                'required'    => true,
            ),
            'details' => array(
                'description' => 'Map of (key/value pairs)',
                'type'        => 'map',
                'required'    => true,
            ),
            'fordisplay' => array(
                'description' => 'pass false if you want this detail to be disabled for the regular user. True by default',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'resourceid' => array(
                'description' => 'resource id to create the details for',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'disassociateIpAddress' => array(
        'description' => 'Disassociates an IP address from the account.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the public IP address to disassociate',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listZones' => array(
        'description' => 'Lists zones',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'showcapacities' => array(
                'description' => 'flag to display the capacity of the zones',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'available' => array(
                'description' => 'true if you want to retrieve all available Zones. False if you only want to return the Zones from which you have at least one VM. Default is false.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List zones by resource tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the ID of the domain associated with the zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'networktype' => array(
                'description' => 'the network type of the zone that the virtual machine belongs to',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the zone',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'issueOutOfBandManagementPowerAction' => array(
        'description' => 'Initiates the specified power action to the host\'s out-of-band management interface',
        'isasync'     => true,
        'params'      => array(
            'action' => array(
                'description' => 'out-of-band management power actions, valid actions are: ON, OFF, CYCLE, RESET, SOFT, STATUS',
                'type'        => 'string',
                'required'    => true,
            ),
            'timeout' => array(
                'description' => 'optional operation timeout in seconds that overrides the global or cluster-level out-of-band management timeout setting',
                'type'        => 'long',
                'required'    => false,
            ),
            'hostid' => array(
                'description' => 'the ID of the host',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'resetPasswordForVirtualMachine' => array(
        'description' => 'Resets the password for virtual machine. The virtual machine must be in a \"Stopped\" state and the template must already support this feature for this command to take effect. [async]',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createVolume' => array(
        'description' => 'Creates a disk volume from a disk offering. This disk volume must still be attached to a virtual machine to make use of it.',
        'isasync'     => true,
        'params'      => array(
            'snapshotid' => array(
                'description' => 'the snapshot ID for the disk volume. Either diskOfferingId or snapshotId must be passed in.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'the account associated with the disk volume. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'miniops' => array(
                'description' => 'min iops',
                'type'        => 'long',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the ID of the availability zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the disk volume',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the domain ID associated with the disk offering. If used with the account parameter returns the disk volume associated with the account for the specified domain.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'maxiops' => array(
                'description' => 'max iops',
                'type'        => 'long',
                'required'    => false,
            ),
            'displayvolume' => array(
                'description' => 'an optional field, whether to display the volume to the end user or not.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'the project associated with the volume. Mutually exclusive with account parameter',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'the ID of the virtual machine; to be used with snapshot Id, VM to which the volume gets attached after creation',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'diskofferingid' => array(
                'description' => 'the ID of the disk offering. Either diskOfferingId or snapshotId must be passed in.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'size' => array(
                'description' => 'Arbitrary volume size',
                'type'        => 'long',
                'required'    => false,
            ),
        ),
    ),
    'assignToLoadBalancerRule' => array(
        'description' => 'Assigns virtual machine or a list of virtual machines to a load balancer rule.',
        'isasync'     => true,
        'params'      => array(
            'vmidipmap' => array(
                'description' => 'VM ID and IP map, vmidipmap[0].vmid=1 vmidipmap[0].ip=10.1.1.75',
                'type'        => 'map',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the load balancer rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'virtualmachineids' => array(
                'description' => 'the list of IDs of the virtual machine that are being assigned to the load balancer rule(i.e. virtualMachineIds=1,2,3)',
                'type'        => 'list',
                'required'    => false,
            ),
        ),
    ),
    'startRouter' => array(
        'description' => 'Starts a router.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the router',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listUcsBlades' => array(
        'description' => 'List ucs blades',
        'isasync'     => false,
        'params'      => array(
            'ucsmanagerid' => array(
                'description' => 'ucs manager id',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'updateGuestOsMapping' => array(
        'description' => 'Updates the information about Guest OS to Hypervisor specific name mapping',
        'isasync'     => true,
        'params'      => array(
            'osnameforhypervisor' => array(
                'description' => 'Hypervisor specific name for this Guest OS',
                'type'        => 'string',
                'required'    => true,
            ),
            'id' => array(
                'description' => 'UUID of the Guest OS to hypervisor name Mapping',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'extractIso' => array(
        'description' => 'Extracts an ISO',
        'isasync'     => true,
        'params'      => array(
            'url' => array(
                'description' => 'the URL to which the ISO would be extracted',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the ISO file',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'the ID of the zone where the ISO is originally located',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'mode' => array(
                'description' => 'the mode of extraction - HTTP_DOWNLOAD or FTP_UPLOAD',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'removeResourceDetail' => array(
        'description' => 'Removes detail for the Resource.',
        'isasync'     => true,
        'params'      => array(
            'key' => array(
                'description' => 'Delete details matching key/value pairs',
                'type'        => 'string',
                'required'    => false,
            ),
            'resourcetype' => array(
                'description' => 'Delete detail by resource type',
                'type'        => 'string',
                'required'    => true,
            ),
            'resourceid' => array(
                'description' => 'Delete details for resource id',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'changeServiceForVirtualMachine' => array(
        'description' => 'Changes the service offering for a virtual machine. The virtual machine must be in a \"Stopped\" state for this command to take effect.',
        'isasync'     => false,
        'params'      => array(
            'details' => array(
                'description' => 'name value pairs of custom parameters for cpu, memory and cpunumber. example details[i].name=value',
                'type'        => 'map',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'serviceofferingid' => array(
                'description' => 'the service offering ID to apply to the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteRemoteAccessVpn' => array(
        'description' => 'Destroys a l2tp/ipsec remote access vpn',
        'isasync'     => true,
        'params'      => array(
            'publicipid' => array(
                'description' => 'public ip address id of the vpn server',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteImageStore' => array(
        'description' => 'Deletes an image store or Secondary Storage.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'The image store ID or Secondary Storage ID.',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteVlanIpRange' => array(
        'description' => 'Creates a VLAN IP range.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the id of the VLAN IP range',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listStoragePools' => array(
        'description' => 'Lists storage pools.',
        'isasync'     => false,
        'params'      => array(
            'podid' => array(
                'description' => 'the Pod ID for the storage pool',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the storage pool',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the storage pool',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'ipaddress' => array(
                'description' => 'the IP address for the storage pool',
                'type'        => 'string',
                'required'    => false,
            ),
            'path' => array(
                'description' => 'the storage pool path',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the storage pool',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'clusterid' => array(
                'description' => 'list storage pools belongig to the specific cluster',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'scope' => array(
                'description' => 'the ID of the storage pool',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'resetVpnConnection' => array(
        'description' => 'Reset site to site vpn connection',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'id of vpn connection',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'an optional domainId for connection. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'an optional account for connection. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listStoragePoolsMetrics' => array(
        'description' => 'Lists storage pool metrics',
        'isasync'     => false,
        'params'      => array(
            'scope' => array(
                'description' => 'the ID of the storage pool',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the storage pool',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'path' => array(
                'description' => 'the storage pool path',
                'type'        => 'string',
                'required'    => false,
            ),
            'ipaddress' => array(
                'description' => 'the IP address for the storage pool',
                'type'        => 'string',
                'required'    => false,
            ),
            'clusterid' => array(
                'description' => 'list storage pools belongig to the specific cluster',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the storage pool',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the storage pool',
                'type'        => 'string',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the Pod ID for the storage pool',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listStorageTags' => array(
        'description' => 'Lists storage tags',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'createRemoteAccessVpn' => array(
        'description' => 'Creates a l2tp/ipsec remote access vpn',
        'isasync'     => true,
        'params'      => array(
            'iprange' => array(
                'description' => 'the range of ip addresses to allocate to vpn clients. The first ip in the range will be taken by the vpn server',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the vpn to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'publicipid' => array(
                'description' => 'public ip address id of the vpn server',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'openfirewall' => array(
                'description' => 'if true, firewall rule for source/end public port is automatically created; if false - firewall rule has to be created explicitely. Has value true by default',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'an optional account for the VPN. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'an optional domainId for the VPN. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'startVirtualMachine' => array(
        'description' => 'Starts a virtual machine.',
        'isasync'     => true,
        'params'      => array(
            'deploymentplanner' => array(
                'description' => 'Deployment planner to use for vm allocation. Available to ROOT admin only',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'hostid' => array(
                'description' => 'destination Host ID to deploy the VM to - parameter available for root admin only',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'extractTemplate' => array(
        'description' => 'Extracts a template',
        'isasync'     => true,
        'params'      => array(
            'url' => array(
                'description' => 'the url to which the ISO would be extracted',
                'type'        => 'string',
                'required'    => false,
            ),
            'mode' => array(
                'description' => 'the mode of extraction - HTTP_DOWNLOAD or FTP_UPLOAD',
                'type'        => 'string',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'the ID of the zone where the ISO is originally located',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the template',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listSystemVms' => array(
        'description' => 'List system virtual machines.',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the system VM',
                'type'        => 'string',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'the state of the system VM',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'storageid' => array(
                'description' => 'the storage ID where vm\'s volumes belong to',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'systemvmtype' => array(
                'description' => 'the system VM type. Possible types are \"consoleproxy\" and \"secondarystoragevm\".',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'hostid' => array(
                'description' => 'the host ID of the system VM',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the system VM',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the Pod ID of the system VM',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID of the system VM',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'detachIso' => array(
        'description' => 'Detaches any ISO file (if any) currently attached to a virtual machine.',
        'isasync'     => true,
        'params'      => array(
            'virtualmachineid' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteServiceOffering' => array(
        'description' => 'Deletes a service offering.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the service offering',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteAccount' => array(
        'description' => 'Deletes a account, and all users associated with this account',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'Account id',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteBigSwitchBcfDevice' => array(
        'description' => ' delete a BigSwitch BCF Controller device',
        'isasync'     => true,
        'params'      => array(
            'bcfdeviceid' => array(
                'description' => 'BigSwitch device ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listNetworkDevice' => array(
        'description' => 'List network devices',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'networkdeviceparameterlist' => array(
                'description' => 'parameters for network device',
                'type'        => 'map',
                'required'    => false,
            ),
            'networkdevicetype' => array(
                'description' => 'Network device type, now supports ExternalDhcp, PxeServer, NetscalerMPXLoadBalancer, NetscalerVPXLoadBalancer, NetscalerSDXLoadBalancer, F5BigIpLoadBalancer, JuniperSRXFirewall, PaloAltoFirewall',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'associateIpAddress' => array(
        'description' => 'Acquires and associates a public IP to an account.',
        'isasync'     => true,
        'params'      => array(
            'domainid' => array(
                'description' => 'the ID of the domain to associate with this IP address',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the ID of the availability zone you want to acquire an public IP address from',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isportable' => array(
                'description' => 'should be set to true if public IP is required to be transferable across zones, if not specified defaults to false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'regionid' => array(
                'description' => 'region ID from where portable IP is to be associated.',
                'type'        => 'integer',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'The network this IP address should be associated to.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the IP to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'the VPC you want the IP address to be associated with',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'Deploy VM for the project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'the account to associate with this IP address',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'disableAccount' => array(
        'description' => 'Disables an account',
        'isasync'     => true,
        'params'      => array(
            'lock' => array(
                'description' => 'If true, only lock the account; else disable the account',
                'type'        => 'boolean',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'Disables specified account in this domain.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'Account id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'Disables specified account.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listVirtualMachinesMetrics' => array(
        'description' => 'Lists VM metrics',
        'isasync'     => false,
        'params'      => array(
            'hostid' => array(
                'description' => 'the host ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'the target hypervisor for the template',
                'type'        => 'string',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'list by network id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'keypair' => array(
                'description' => 'list vms by ssh keypair name',
                'type'        => 'string',
                'required'    => false,
            ),
            'hostid' => array(
                'description' => 'the host ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'serviceofferingid' => array(
                'description' => 'list by the service offering',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'userid' => array(
                'description' => 'the user ID that created the VM and is under the account that owns the VM',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the pod ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'affinitygroupid' => array(
                'description' => 'list vms by affinity group',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'list vms by vpc',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'isoid' => array(
                'description' => 'list vms by iso',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'storageid' => array(
                'description' => 'the storage ID where vm\'s volumes belong to',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'state of the virtual machine. Possible values are: Running, Stopped, Present, Destroyed, Expunged. Present is used for the state equal not destroyed.',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'ids' => array(
                'description' => 'the IDs of the virtual machines, mutually exclusive with id',
                'type'        => 'list',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'comma separated list of host details requested, value can be a list of [all, group, nics, stats, secgrp, tmpl, servoff, diskoff, iso, volume, min, affgrp]. If no parameter is passed in, the details will be defaulted to all',
                'type'        => 'list',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'displayvm' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'name of the virtual machine (a substring match is made against the parameter value, data for all matching VMs will be returned)',
                'type'        => 'string',
                'required'    => false,
            ),
            'templateid' => array(
                'description' => 'list vms by template',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the pod ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'forvirtualnetwork' => array(
                'description' => 'list by network type; true if need to list vms using Virtual Network, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the availability zone ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'groupid' => array(
                'description' => 'the group ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'storageid' => array(
                'description' => 'the storage ID where vm\'s volumes belong to',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'migrateVirtualMachine' => array(
        'description' => 'Attempts Migration of a VM to a different host or Root volume of the vm to a different storage pool',
        'isasync'     => true,
        'params'      => array(
            'storageid' => array(
                'description' => 'Destination storage pool ID to migrate VM volumes to. Required for migrating the root disk volume',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'the ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'hostid' => array(
                'description' => 'Destination Host ID to migrate VM to. Required for live migrating a VM from host to host',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'getUploadParamsForTemplate' => array(
        'description' => 'upload an existing template into the CloudStack cloud. ',
        'isasync'     => false,
        'params'      => array(
            'isextractable' => array(
                'description' => 'true if the template or its derivatives are extractable; default is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'checksum' => array(
                'description' => 'the MD5 checksum value of this volume/template',
                'type'        => 'string',
                'required'    => false,
            ),
            'isfeatured' => array(
                'description' => 'true if this template is a featured template, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'sshkeyenabled' => array(
                'description' => 'true if the template supports the sshkey upload feature; default is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'templatetag' => array(
                'description' => 'the tag for this template.',
                'type'        => 'string',
                'required'    => false,
            ),
            'format' => array(
                'description' => 'the format for the volume/template. Possible values include QCOW2, OVA, and VHD.',
                'type'        => 'string',
                'required'    => true,
            ),
            'requireshvm' => array(
                'description' => 'true if this template requires HVM',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'passwordenabled' => array(
                'description' => 'true if the template supports the password reset feature; default is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the ID of the zone the volume/template is to be hosted on',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'isrouting' => array(
                'description' => 'true if the template type is routing i.e., if template is used to deploy router',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'an optional accountName. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'ostypeid' => array(
                'description' => 'the ID of the OS Type that best represents the OS of this template.',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'an optional domainId. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'the target hypervisor for the template',
                'type'        => 'string',
                'required'    => true,
            ),
            'isdynamicallyscalable' => array(
                'description' => 'true if template contains XS/VMWare tools inorder to support dynamic scaling of VM cpu/memory',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'bits' => array(
                'description' => '32 or 64 bits support. 64 by default',
                'type'        => 'integer',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'Template details in key/value pairs.',
                'type'        => 'map',
                'required'    => false,
            ),
            'ispublic' => array(
                'description' => 'true if the template is available to all accounts; default is true',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'Upload volume/template for the project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the volume/template',
                'type'        => 'string',
                'required'    => true,
            ),
            'displaytext' => array(
                'description' => 'the display text of the template. This is usually used for display purposes.',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listVMSnapshot' => array(
        'description' => 'List virtual machine snapshot by conditions',
        'isasync'     => false,
        'params'      => array(
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'vmsnapshotids' => array(
                'description' => 'the IDs of the vm snapshots, mutually exclusive with vmsnapshotid',
                'type'        => 'list',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'the ID of the vm',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'vmsnapshotid' => array(
                'description' => 'The ID of the VM snapshot',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'state of the virtual machine snapshot',
                'type'        => 'string',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'lists snapshot by snapshot name or display name',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'updateDomain' => array(
        'description' => 'Updates a domain with a new name',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'ID of domain to update',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'networkdomain' => array(
                'description' => 'Network domain for the domain\'s networks; empty string will update domainName with NULL value',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'updates domain with this name',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listDedicatedZones' => array(
        'description' => 'List dedicated zones.',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'the name of the account associated with the zone. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the ID of the Zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'affinitygroupid' => array(
                'description' => 'list dedicated zones by affinity group',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the ID of the domain associated with the zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'addImageStoreS3' => array(
        'description' => 'Adds S3 Image Store',
        'isasync'     => false,
        'params'      => array(
            'secretkey' => array(
                'description' => 'S3 secret key',
                'type'        => 'string',
                'required'    => true,
            ),
            'maxerrorretry' => array(
                'description' => 'Maximum number of times to retry on error',
                'type'        => 'integer',
                'required'    => false,
            ),
            'sockettimeout' => array(
                'description' => 'Socket timeout (milliseconds)',
                'type'        => 'integer',
                'required'    => false,
            ),
            'connectionttl' => array(
                'description' => 'Connection TTL (milliseconds)',
                'type'        => 'integer',
                'required'    => false,
            ),
            'usehttps' => array(
                'description' => 'Use HTTPS instead of HTTP',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'bucket' => array(
                'description' => 'Name of the storage bucket',
                'type'        => 'string',
                'required'    => true,
            ),
            's3signer' => array(
                'description' => 'Signer Algorithm to use, either S3SignerType or AWSS3V4SignerType',
                'type'        => 'string',
                'required'    => false,
            ),
            'endpoint' => array(
                'description' => 'S3 endpoint',
                'type'        => 'string',
                'required'    => true,
            ),
            'usetcpkeepalive' => array(
                'description' => 'Whether TCP keep-alive is used',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'connectiontimeout' => array(
                'description' => 'Connection timeout (milliseconds)',
                'type'        => 'integer',
                'required'    => false,
            ),
            'accesskey' => array(
                'description' => 'S3 access key',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'removeFromLoadBalancerRule' => array(
        'description' => 'Removes a virtual machine or a list of virtual machines from a load balancer rule.',
        'isasync'     => true,
        'params'      => array(
            'virtualmachineids' => array(
                'description' => 'the list of IDs of the virtual machines that are being removed from the load balancer rule (i.e. virtualMachineIds=1,2,3)',
                'type'        => 'list',
                'required'    => false,
            ),
            'vmidipmap' => array(
                'description' => 'VM ID and IP map, vmidipmap[0].vmid=1 vmidipmap[0].ip=10.1.1.75',
                'type'        => 'map',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'The ID of the load balancer rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'resetApiLimit' => array(
        'description' => 'Reset api count',
        'isasync'     => false,
        'params'      => array(
            'account' => array(
                'description' => 'the ID of the acount whose limit to be reset',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'registerUserKeys' => array(
        'description' => 'This command allows a user to register for the developer API, returning a secret key and an API key. This request is made through the integration API port, so it is a privileged command and must be made on behalf of a user. It is up to the implementer just how the username and password are entered, and then how that translates to an integration API request. Both secret key and API key should be returned to the user',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'User id',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'disableOutOfBandManagementForHost' => array(
        'description' => 'Disables out-of-band management for a host',
        'isasync'     => true,
        'params'      => array(
            'hostid' => array(
                'description' => 'the ID of the host',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addVpnUser' => array(
        'description' => 'Adds vpn users',
        'isasync'     => true,
        'params'      => array(
            'projectid' => array(
                'description' => 'add vpn user to the specific project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'password' => array(
                'description' => 'password for the username',
                'type'        => 'string',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'an optional account for the vpn user. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'an optional domainId for the vpn user. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'username' => array(
                'description' => 'username for the vpn user',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listVPCs' => array(
        'description' => 'Lists VPCs',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'list VPC by id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'list by zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'supportedservices' => array(
                'description' => 'list VPC supporting certain services',
                'type'        => 'list',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'List by display text of the VPC',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'list VPCs by state',
                'type'        => 'string',
                'required'    => false,
            ),
            'vpcofferingid' => array(
                'description' => 'list by ID of the VPC offering',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'cidr' => array(
                'description' => 'list by cidr of the VPC. All VPC guest networks\' cidrs should be within this CIDR',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'list by name of the VPC',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'restartrequired' => array(
                'description' => 'list VPCs by restartRequired option',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'assignVirtualMachine' => array(
        'description' => 'Change ownership of a VM from one account to another. This API is available for Basic zones with security groups and Advanced zones with guest networks. A root administrator can reassign a VM from any account to any other account in any domain. A domain administrator can reassign a VM to any account in the same domain.',
        'isasync'     => false,
        'params'      => array(
            'networkids' => array(
                'description' => 'list of new network ids in which the moved VM will participate. In case no network ids are provided the VM will be part of the default network for that zone. In case there is no network yet created for the new account the default network will be created.',
                'type'        => 'list',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'account name of the new VM owner.',
                'type'        => 'string',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'domain id of the new VM owner.',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'securitygroupids' => array(
                'description' => 'list of security group ids to be applied on the virtual machine. In case no security groups are provided the VM is part of the default security group.',
                'type'        => 'list',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'id of the VM to be moved',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateLBHealthCheckPolicy' => array(
        'description' => 'Updates load balancer health check policy',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'ID of load balancer health check policy',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the policy to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'updateFirewallRule' => array(
        'description' => 'Updates firewall rule ',
        'isasync'     => true,
        'params'      => array(
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the rule to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the firewall rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listConditions' => array(
        'description' => 'List Conditions for the specific user',
        'isasync'     => false,
        'params'      => array(
            'counterid' => array(
                'description' => 'Counter-id of the condition.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'ID of the Condition.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'policyid' => array(
                'description' => 'the ID of the policy',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'updateVirtualMachine' => array(
        'description' => 'Updates properties of a virtual machine. The VM has to be stopped and restarted for the new properties to take effect. UpdateVirtualMachine does not first check whether the VM is stopped. Therefore, stop the VM manually before issuing this call.',
        'isasync'     => false,
        'params'      => array(
            'group' => array(
                'description' => 'group of the virtual machine',
                'type'        => 'string',
                'required'    => false,
            ),
            'ostypeid' => array(
                'description' => 'the ID of the OS type that best represents this VM.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'instancename' => array(
                'description' => 'instance name of the user vm',
                'type'        => 'string',
                'required'    => false,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'haenable' => array(
                'description' => 'true if high-availability is enabled for the virtual machine, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'securitygroupids' => array(
                'description' => 'list of security group ids to be applied on the virtual machine.',
                'type'        => 'list',
                'required'    => false,
            ),
            'securitygroupnames' => array(
                'description' => 'comma separated list of security groups names that going to be applied to the virtual machine. Should be passed only when vm is created from a zone with Basic Network support. Mutually exclusive with securitygroupids parameter',
                'type'        => 'list',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'new host name of the vm. The VM has to be stopped/started for this update to take affect',
                'type'        => 'string',
                'required'    => false,
            ),
            'isdynamicallyscalable' => array(
                'description' => 'true if VM contains XS/VMWare tools inorder to support dynamic scaling of VM cpu/memory',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'displayvm' => array(
                'description' => 'an optional field, whether to the display the vm to the end user or not.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'Details in key/value pairs.',
                'type'        => 'map',
                'required'    => false,
            ),
            'displayname' => array(
                'description' => 'user generated name',
                'type'        => 'string',
                'required'    => false,
            ),
            'userdata' => array(
                'description' => 'an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding. Using HTTP POST(via POST body), you can send up to 32K of data after base64 encoding.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'createPrivateGateway' => array(
        'description' => 'Creates a private gateway',
        'isasync'     => true,
        'params'      => array(
            'networkofferingid' => array(
                'description' => 'the uuid of the network offering to use for the private gateways network connection',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID the network belongs to',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'the VPC network belongs to',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'aclid' => array(
                'description' => 'the ID of the network ACL',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'netmask' => array(
                'description' => 'the netmask of the Private gateway',
                'type'        => 'string',
                'required'    => true,
            ),
            'gateway' => array(
                'description' => 'the gateway of the Private gateway',
                'type'        => 'string',
                'required'    => true,
            ),
            'ipaddress' => array(
                'description' => 'the IP address of the Private gateaway',
                'type'        => 'string',
                'required'    => true,
            ),
            'vlan' => array(
                'description' => 'the network implementation uri for the private gateway',
                'type'        => 'string',
                'required'    => true,
            ),
            'sourcenatsupported' => array(
                'description' => 'source NAT supported value. Default value false. If \'true\' source NAT is enabled on the private gateway \'false\': sourcenat is not supported',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'deleteLBStickinessPolicy' => array(
        'description' => 'Deletes a load balancer stickiness policy.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the LB stickiness policy',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'getSolidFireVolumeSize' => array(
        'description' => 'Get the SF volume size including Hypervisor Snapshot Reserve',
        'isasync'     => false,
        'params'      => array(
            'volumeid' => array(
                'description' => 'Volume UUID',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listResourceLimits' => array(
        'description' => 'Lists resource limits.',
        'isasync'     => false,
        'params'      => array(
            'resourcetype' => array(
                'description' => 'Type of resource. Values are 0, 1, 2, 3, 4, 6, 7, 8, 9, 10 and 11. 0 - Instance. Number of instances a user can create. 1 - IP. Number of public IP addresses an account can own. 2 - Volume. Number of disk volumes an account can own. 3 - Snapshot. Number of snapshots an account can own. 4 - Template. Number of templates an account can register/create. 5 - Project. Number of projects an account can own. 6 - Network. Number of networks an account can own. 7 - VPC. Number of VPC an account can own. 8 - CPU. Number of CPU an account can allocate for his resources. 9 - Memory. Amount of RAM an account can allocate for his resources. 10 - PrimaryStorage. Total primary storage space (in GiB) a user can use. 11 - SecondaryStorage. Total secondary storage space (in GiB) a user can use. ',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'Lists resource limits by ID.',
                'type'        => 'long',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'listServiceOfferings' => array(
        'description' => 'Lists all available service offerings.',
        'isasync'     => false,
        'params'      => array(
            'virtualmachineid' => array(
                'description' => 'the ID of the virtual machine. Pass this in if you want to see the available service offering that a virtual machine can be changed to.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'systemvmtype' => array(
                'description' => 'the system VM type. Possible types are \"consoleproxy\", \"secondarystoragevm\" or \"domainrouter\".',
                'type'        => 'string',
                'required'    => false,
            ),
            'issystem' => array(
                'description' => 'is this a system vm offering',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'ID of the service offering',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'name of the service offering',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'addUcsManager' => array(
        'description' => 'Adds a Ucs manager',
        'isasync'     => false,
        'params'      => array(
            'name' => array(
                'description' => 'the name of UCS manager',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone id for the ucs manager',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'username' => array(
                'description' => 'the username of UCS',
                'type'        => 'string',
                'required'    => true,
            ),
            'url' => array(
                'description' => 'the name of UCS url',
                'type'        => 'string',
                'required'    => true,
            ),
            'password' => array(
                'description' => 'the password of UCS',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'deleteVMSnapshot' => array(
        'description' => 'Deletes a vmsnapshot.',
        'isasync'     => true,
        'params'      => array(
            'vmsnapshotid' => array(
                'description' => 'The ID of the VM snapshot',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteAutoScaleVmProfile' => array(
        'description' => 'Deletes a autoscale vm profile.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the autoscale profile',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteStoragePool' => array(
        'description' => 'Deletes a storage pool.',
        'isasync'     => false,
        'params'      => array(
            'forced' => array(
                'description' => 'Force destroy storage pool (force expunge volumes in Destroyed state as a part of pool removal)',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'Storage pool id',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteRole' => array(
        'description' => 'Deletes a role',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'ID of the role',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteSnapshot' => array(
        'description' => 'Deletes a snapshot of a disk volume.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the snapshot',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createProject' => array(
        'description' => 'Creates a project',
        'isasync'     => true,
        'params'      => array(
            'domainid' => array(
                'description' => 'domain ID of the account owning a project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'name of the project',
                'type'        => 'string',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'account who will be Admin for the project',
                'type'        => 'string',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'display text of the project',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'createLoadBalancerRule' => array(
        'description' => 'Creates a load balancer rule',
        'isasync'     => true,
        'params'      => array(
            'cidrlist' => array(
                'description' => 'the CIDR list to forward traffic from',
                'type'        => 'list',
                'required'    => false,
            ),
            'openfirewall' => array(
                'description' => 'if true, firewall rule for source/end public port is automatically created; if false - firewall rule has to be created explicitely. If not specified 1) defaulted to false when LB rule is being created for VPC guest network 2) in all other cases defaulted to true',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'publicipid' => array(
                'description' => 'public IP address ID from where the network traffic will be load balanced from',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'description' => array(
                'description' => 'the description of the load balancer rule',
                'type'        => 'string',
                'required'    => false,
            ),
            'algorithm' => array(
                'description' => 'load balancer algorithm (source, roundrobin, leastconn)',
                'type'        => 'string',
                'required'    => true,
            ),
            'protocol' => array(
                'description' => 'The protocol for the LB',
                'type'        => 'string',
                'required'    => false,
            ),
            'privateport' => array(
                'description' => 'the private port of the private IP address/virtual machine where the network traffic will be load balanced to',
                'type'        => 'integer',
                'required'    => true,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the rule to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the domain ID associated with the load balancer',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'publicport' => array(
                'description' => 'the public port from where the network traffic will be load balanced from',
                'type'        => 'integer',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'zone where the load balancer is going to be created. This parameter is required when LB service provider is ElasticLoadBalancerVm',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'The guest network this rule will be created for. Required when public Ip address is not associated with any Guest network yet (VPC case)',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'the account associated with the load balancer. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'name of the load balancer rule',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'createAutoScalePolicy' => array(
        'description' => 'Creates an autoscale policy for a provision or deprovision action, the action is taken when the all the conditions evaluates to true for the specified duration. The policy is in effect once it is attached to a autscale vm group.',
        'isasync'     => true,
        'params'      => array(
            'conditionids' => array(
                'description' => 'the list of IDs of the conditions that are being evaluated on every interval',
                'type'        => 'list',
                'required'    => true,
            ),
            'duration' => array(
                'description' => 'the duration for which the conditions have to be true before action is taken',
                'type'        => 'integer',
                'required'    => true,
            ),
            'action' => array(
                'description' => 'the action to be executed if all the conditions evaluate to true for the specified duration.',
                'type'        => 'string',
                'required'    => true,
            ),
            'quiettime' => array(
                'description' => 'the cool down period for which the policy should not be evaluated after the action has been taken',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'restoreVirtualMachine' => array(
        'description' => 'Restore a VM to original template/ISO or new template/ISO',
        'isasync'     => true,
        'params'      => array(
            'templateid' => array(
                'description' => 'an optional template Id to restore vm from the new template. This can be an ISO id in case of restore vm deployed using ISO',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'Virtual Machine ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'logout' => array(
        'description' => 'Logs out the user',
        'isasync'     => false,
        'params'      => array(
        ),
    ),
    'listEventTypes' => array(
        'description' => 'List Event Types',
        'isasync'     => false,
        'params'      => array(
        ),
    ),
    'createNetworkOffering' => array(
        'description' => 'Creates a network offering.',
        'isasync'     => false,
        'params'      => array(
            'guestiptype' => array(
                'description' => 'guest type of the network offering: Shared or Isolated',
                'type'        => 'string',
                'required'    => true,
            ),
            'egressdefaultpolicy' => array(
                'description' => 'true if guest network default egress policy is allow; false if default egress policy is deny',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'maxconnections' => array(
                'description' => 'maximum number of concurrent connections supported by the network offering',
                'type'        => 'integer',
                'required'    => false,
            ),
            'serviceproviderlist' => array(
                'description' => 'provider to service mapping. If not specified, the provider for the service will be mapped to the default provider on the physical network',
                'type'        => 'map',
                'required'    => false,
            ),
            'availability' => array(
                'description' => 'the availability of network offering. Default value is Optional',
                'type'        => 'string',
                'required'    => false,
            ),
            'supportedservices' => array(
                'description' => 'services supported by the network offering',
                'type'        => 'list',
                'required'    => true,
            ),
            'tags' => array(
                'description' => 'the tags for the network offering.',
                'type'        => 'string',
                'required'    => false,
            ),
            'ispersistent' => array(
                'description' => 'true if network offering supports persistent networks; defaulted to false if not specified',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'Network offering details in key/value pairs. Supported keys are internallbprovider/publiclbprovider with service provider as a value',
                'type'        => 'map',
                'required'    => false,
            ),
            'keepaliveenabled' => array(
                'description' => 'if true keepalive will be turned on in the loadbalancer. At the time of writing this has only an effect on haproxy; the mode http and httpclose options are unset in the haproxy conf file.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'serviceofferingid' => array(
                'description' => 'the service offering ID used by virtual router provider',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'networkrate' => array(
                'description' => 'data transfer rate in megabits per second allowed',
                'type'        => 'integer',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the network offering',
                'type'        => 'string',
                'required'    => true,
            ),
            'conservemode' => array(
                'description' => 'true if the network offering is IP conserve mode enabled',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'servicecapabilitylist' => array(
                'description' => 'desired service capabilities as part of network offering',
                'type'        => 'map',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'the display text of the network offering',
                'type'        => 'string',
                'required'    => true,
            ),
            'specifyipranges' => array(
                'description' => 'true if network offering supports specifying ip ranges; defaulted to false if not specified',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'specifyvlan' => array(
                'description' => 'true if network offering supports vlans',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'traffictype' => array(
                'description' => 'the traffic type for the network offering. Supported type in current release is GUEST only',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'deleteAffinityGroup' => array(
        'description' => 'Deletes affinity group',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the affinity group. Mutually exclusive with name parameter',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'The name of the affinity group. Mutually exclusive with ID parameter',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'the account of the affinity group. Must be specified with domain ID',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the domain ID of account owning the affinity group',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'the project of the affinity group',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'copyIso' => array(
        'description' => 'Copies an ISO from one zone to another.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'Template ID.',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'sourcezoneid' => array(
                'description' => 'ID of the zone the template is currently hosted on. If not specified and template is cross-zone, then we will sync this template to region wide image store.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'destzoneid' => array(
                'description' => 'ID of the zone the template is being copied to.',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'dedicatePublicIpRange' => array(
        'description' => 'Dedicates a Public IP range to an account',
        'isasync'     => false,
        'params'      => array(
            'account' => array(
                'description' => 'account who will own the VLAN',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'project who will own the VLAN',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'domain ID of the account owning a VLAN',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'id' => array(
                'description' => 'the id of the VLAN IP range',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addGuestOsMapping' => array(
        'description' => 'Adds a guest OS name to hypervisor OS name mapping',
        'isasync'     => true,
        'params'      => array(
            'osdisplayname' => array(
                'description' => 'Display Name of Guest OS standard type. Either Display Name or UUID must be passed',
                'type'        => 'string',
                'required'    => false,
            ),
            'ostypeid' => array(
                'description' => 'UUID of Guest OS type. Either the UUID or Display Name must be passed',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'hypervisorversion' => array(
                'description' => 'Hypervisor version to create the mapping for. Use \'default\' for default versions',
                'type'        => 'string',
                'required'    => true,
            ),
            'osnameforhypervisor' => array(
                'description' => 'OS name specific to the hypervisor',
                'type'        => 'string',
                'required'    => true,
            ),
            'hypervisor' => array(
                'description' => 'Hypervisor type. One of : XenServer, KVM, VMWare',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listHostsMetrics' => array(
        'description' => 'Lists hosts metrics',
        'isasync'     => false,
        'params'      => array(
            'type' => array(
                'description' => 'the host type',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the host',
                'type'        => 'string',
                'required'    => false,
            ),
            'outofbandmanagementpowerstate' => array(
                'description' => 'list hosts by its out-of-band management interface\'s power state. Its value can be one of [On, Off, Unknown]',
                'type'        => 'string',
                'required'    => false,
            ),
            'resourcestate' => array(
                'description' => 'list hosts by resource state. Resource state represents current state determined by admin of host, value can be one of [Enabled, Disabled, Unmanaged, PrepareForMaintenance, ErrorInMaintenance, Maintenance, Error]',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'hahost' => array(
                'description' => 'if true, list only hosts dedicated to HA',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'outofbandmanagementenabled' => array(
                'description' => 'list hosts for which out-of-band management is enabled',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the host',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'the state of the host',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'hypervisor type of host: XenServer,KVM,VMware,Hyperv,BareMetal,Simulator',
                'type'        => 'string',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the Pod ID for the host',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'comma separated list of host details requested, value can be a list of [ min, all, capacity, events, stats]',
                'type'        => 'list',
                'required'    => false,
            ),
            'clusterid' => array(
                'description' => 'lists hosts existing in particular cluster',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'lists hosts in the same cluster as this VM and flag hosts with enough CPU/RAm to host this VM',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the id of the host',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listDomainChildren' => array(
        'description' => 'Lists all children domains belonging to a specified domain',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'list children domains by name',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'to return the entire tree, use the value \"true\". To return the first level children, use the value \"false\".',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list children domain by parent domain ID.',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'uploadVolume' => array(
        'description' => 'Uploads a data disk.',
        'isasync'     => true,
        'params'      => array(
            'name' => array(
                'description' => 'the name of the volume',
                'type'        => 'string',
                'required'    => true,
            ),
            'format' => array(
                'description' => 'the format for the volume. Possible values include QCOW2, OVA, and VHD.',
                'type'        => 'string',
                'required'    => true,
            ),
            'imagestoreuuid' => array(
                'description' => 'Image store uuid',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'an optional domainId. If the account parameter is used, domainId must also be used.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'Upload volume for the project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the ID of the zone the volume is to be hosted on',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'url' => array(
                'description' => 'the URL of where the volume is hosted. Possible URL include http:// and https://',
                'type'        => 'string',
                'required'    => true,
            ),
            'account' => array(
                'description' => 'an optional accountName. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'checksum' => array(
                'description' => 'the MD5 checksum value of this volume',
                'type'        => 'string',
                'required'    => false,
            ),
            'diskofferingid' => array(
                'description' => 'the ID of the disk offering. This must be a custom sized offering since during uploadVolume volume size is unknown.',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listAutoScaleVmProfiles' => array(
        'description' => 'Lists autoscale vm profiles.',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the autoscale vm profile',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'templateid' => array(
                'description' => 'the templateid of the autoscale vm profile',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'otherdeployparams' => array(
                'description' => 'the otherdeployparameters of the autoscale vm profile',
                'type'        => 'string',
                'required'    => false,
            ),
            'serviceofferingid' => array(
                'description' => 'list profiles by service offering id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'availability zone for the auto deployed virtual machine',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'createLBStickinessPolicy' => array(
        'description' => 'Creates a load balancer stickiness policy ',
        'isasync'     => true,
        'params'      => array(
            'param' => array(
                'description' => 'param list. Example: param[0].name=cookiename&param[0].value=LBCookie ',
                'type'        => 'map',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the rule to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'name of the load balancer stickiness policy',
                'type'        => 'string',
                'required'    => true,
            ),
            'lbruleid' => array(
                'description' => 'the ID of the load balancer rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'methodname' => array(
                'description' => 'name of the load balancer stickiness policy method, possible values can be obtained from listNetworks API',
                'type'        => 'string',
                'required'    => true,
            ),
            'description' => array(
                'description' => 'the description of the load balancer stickiness policy',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'stopVirtualMachine' => array(
        'description' => 'Stops a virtual machine.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'forced' => array(
                'description' => 'Force stop the VM (vm is marked as Stopped even when command fails to be send to the backend, otherwise a force poweroff is attempted).  The caller knows the VM is stopped.',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'migrateVirtualMachineWithVolume' => array(
        'description' => 'Attempts Migration of a VM with its volumes to a different host',
        'isasync'     => true,
        'params'      => array(
            'virtualmachineid' => array(
                'description' => 'the ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'migrateto' => array(
                'description' => 'Storage to pool mapping. This parameter specifies the mapping between a volume and a pool where you want to migrate that volume. Format of this parameter: migrateto[volume-index].volume=<uuid>&migrateto[volume-index].pool=<uuid>Where, [volume-index] indicates the index to identify the volume that you want to migrate, volume=<uuid> indicates the UUID of the volume that you want to migrate, and pool=<uuid> indicates the UUID of the pool where you want to migrate the volume. Example: migrateto[0].volume=<71f43cd6-69b0-4d3b-9fbc-67f50963d60b>&migrateto[0].pool=<a382f181-3d2b-4413-b92d-b8931befa7e1>&migrateto[1].volume=<88de0173-55c0-4c1c-a269-83d0279eeedf>&migrateto[1].pool=<95d6e97c-6766-4d67-9a30-c449c15011d1>&migrateto[2].volume=<1b331390-59f2-4796-9993-bf11c6e76225>&migrateto[2].pool=<41fdb564-9d3b-447d-88ed-7628f7640cbc>',
                'type'        => 'map',
                'required'    => false,
            ),
            'hostid' => array(
                'description' => 'Destination Host ID to migrate VM to.',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'createCounter' => array(
        'description' => 'Adds metric counter',
        'isasync'     => true,
        'params'      => array(
            'name' => array(
                'description' => 'Name of the counter.',
                'type'        => 'string',
                'required'    => true,
            ),
            'source' => array(
                'description' => 'Source of the counter.',
                'type'        => 'string',
                'required'    => true,
            ),
            'value' => array(
                'description' => 'Value of the counter e.g. oid in case of snmp.',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'createSnapshot' => array(
        'description' => 'Creates an instant snapshot of a volume.',
        'isasync'     => true,
        'params'      => array(
            'domainid' => array(
                'description' => 'The domain ID of the snapshot. If used with the account parameter, specifies a domain for the account associated with the disk volume.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'quiescevm' => array(
                'description' => 'quiesce vm if true',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'policyid' => array(
                'description' => 'policy id of the snapshot, if this is null, then use MANUAL_POLICY.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'The account of the snapshot. The account parameter must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the snapshot',
                'type'        => 'string',
                'required'    => false,
            ),
            'volumeid' => array(
                'description' => 'The ID of the disk volume',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listAccounts' => array(
        'description' => 'Lists accounts and provides detailed account information for listed accounts',
        'isasync'     => false,
        'params'      => array(
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'list accounts by state. Valid states are enabled, disabled, and locked.',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list account by account ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'iscleanuprequired' => array(
                'description' => 'list accounts by cleanuprequired attribute (values are true or false)',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'list account by account name',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'accounttype' => array(
                'description' => 'list accounts by account type. Valid account types are 1 (admin), 2 (domain-admin), and 0 (user).',
                'type'        => 'long',
                'required'    => false,
            ),
        ),
    ),
    'updateIso' => array(
        'description' => 'Updates an ISO file.',
        'isasync'     => false,
        'params'      => array(
            'isrouting' => array(
                'description' => 'true if the template type is routing i.e., if template is used to deploy router',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'passwordenabled' => array(
                'description' => 'true if the image supports the password reset feature; default is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'sortkey' => array(
                'description' => 'sort key of the template, integer',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the image file',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'bootable' => array(
                'description' => 'true if image is bootable, false otherwise; available only for updateIso API',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'the display text of the image',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the image file',
                'type'        => 'string',
                'required'    => false,
            ),
            'isdynamicallyscalable' => array(
                'description' => 'true if template/ISO contains XS/VMWare tools inorder to support dynamic scaling of VM cpu/memory',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'Details in key/value pairs using format details[i].keyname=keyvalue. Example: details[0].hypervisortoolsversion=xenserver61',
                'type'        => 'map',
                'required'    => false,
            ),
            'ostypeid' => array(
                'description' => 'the ID of the OS type that best represents the OS of this image.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'requireshvm' => array(
                'description' => 'true if the template requres HVM, false otherwise; available only for updateTemplate API',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'format' => array(
                'description' => 'the format for the image',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listPortableIpRanges' => array(
        'description' => 'list portable IP ranges',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'Id of the portable ip range',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'regionid' => array(
                'description' => 'Id of a Region',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'listIpForwardingRules' => array(
        'description' => 'List the IP forwarding rules',
        'isasync'     => false,
        'params'      => array(
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'Lists rule with the specified ID.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'virtualmachineid' => array(
                'description' => 'Lists all rules applied to the specified VM.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'ipaddressid' => array(
                'description' => 'list the rule belonging to this public IP address',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'configureOvsElement' => array(
        'description' => 'Configures an ovs element.',
        'isasync'     => true,
        'params'      => array(
            'enabled' => array(
                'description' => 'Enabled/Disabled the service provider',
                'type'        => 'boolean',
                'required'    => true,
            ),
            'id' => array(
                'description' => 'the ID of the ovs provider',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'destroyVirtualMachine' => array(
        'description' => 'Destroys a virtual machine.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'expunge' => array(
                'description' => 'If true is passed, the vm is expunged immediately. False by default.',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'updateNetwork' => array(
        'description' => 'Updates a network',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the network',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'the new name for the network',
                'type'        => 'string',
                'required'    => false,
            ),
            'networkofferingid' => array(
                'description' => 'network offering ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'displaynetwork' => array(
                'description' => 'an optional field, whether to the display the network to the end user or not.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'changecidr' => array(
                'description' => 'Force update even if CIDR type is different',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'guestvmcidr' => array(
                'description' => 'CIDR for guest VMs, CloudStack allocates IPs to guest VMs only from this CIDR',
                'type'        => 'string',
                'required'    => false,
            ),
            'networkdomain' => array(
                'description' => 'network domain',
                'type'        => 'string',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'the new display text for the network',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'enableOutOfBandManagementForZone' => array(
        'description' => 'Enables out-of-band management for a zone',
        'isasync'     => true,
        'params'      => array(
            'zoneid' => array(
                'description' => 'the ID of the zone',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'dedicateHost' => array(
        'description' => 'Dedicates a host.',
        'isasync'     => true,
        'params'      => array(
            'account' => array(
                'description' => 'the name of the account which needs dedication. Must be used with domainId.',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the ID of the containing domain',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'hostid' => array(
                'description' => 'the ID of the host to update',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addRegion' => array(
        'description' => 'Adds a Region',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'Id of the Region',
                'type'        => 'integer',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'Name of the region',
                'type'        => 'string',
                'required'    => true,
            ),
            'endpoint' => array(
                'description' => 'Region service endpoint',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'listHostTags' => array(
        'description' => 'Lists host tags',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'createDiskOffering' => array(
        'description' => 'Creates a disk offering.',
        'isasync'     => false,
        'params'      => array(
            'name' => array(
                'description' => 'name of the disk offering',
                'type'        => 'string',
                'required'    => true,
            ),
            'hypervisorsnapshotreserve' => array(
                'description' => 'Hypervisor snapshot reserve space as a percent of a volume (for managed storage using Xen or VMware)',
                'type'        => 'integer',
                'required'    => false,
            ),
            'displayoffering' => array(
                'description' => 'an optional field, whether to display the offering to the end user or not.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'tags for the disk offering',
                'type'        => 'string',
                'required'    => false,
            ),
            'iopsreadrate' => array(
                'description' => 'io requests read rate of the disk offering',
                'type'        => 'long',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'alternate display text of the disk offering',
                'type'        => 'string',
                'required'    => true,
            ),
            'provisioningtype' => array(
                'description' => 'provisioning type used to create volumes. Valid values are thin, sparse, fat.',
                'type'        => 'string',
                'required'    => false,
            ),
            'bytesreadrate' => array(
                'description' => 'bytes read rate of the disk offering',
                'type'        => 'long',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the ID of the containing domain, null for public offerings',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'miniops' => array(
                'description' => 'min iops of the disk offering',
                'type'        => 'long',
                'required'    => false,
            ),
            'storagetype' => array(
                'description' => 'the storage type of the disk offering. Values are local and shared.',
                'type'        => 'string',
                'required'    => false,
            ),
            'customizediops' => array(
                'description' => 'whether disk offering iops is custom or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'customized' => array(
                'description' => 'whether disk offering size is custom or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'iopswriterate' => array(
                'description' => 'io requests write rate of the disk offering',
                'type'        => 'long',
                'required'    => false,
            ),
            'byteswriterate' => array(
                'description' => 'bytes write rate of the disk offering',
                'type'        => 'long',
                'required'    => false,
            ),
            'maxiops' => array(
                'description' => 'max iops of the disk offering',
                'type'        => 'long',
                'required'    => false,
            ),
            'disksize' => array(
                'description' => 'size of the disk offering in GB (1GB = 1,073,741,824 bytes)',
                'type'        => 'long',
                'required'    => false,
            ),
        ),
    ),
    'getCloudIdentifier' => array(
        'description' => 'Retrieves a cloud identifier.',
        'isasync'     => false,
        'params'      => array(
            'userid' => array(
                'description' => 'the user ID for the cloud identifier',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listNetscalerLoadBalancerNetworks' => array(
        'description' => 'lists network that are using a netscaler load balancer device',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'lbdeviceid' => array(
                'description' => 'netscaler load balancer device ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'listClustersMetrics' => array(
        'description' => 'Lists clusters metrics',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'lists clusters by Zone ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'lists clusters by the cluster name',
                'type'        => 'string',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'lists clusters by hypervisor type',
                'type'        => 'string',
                'required'    => false,
            ),
            'allocationstate' => array(
                'description' => 'lists clusters by allocation state',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'lists clusters by Pod ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'clustertype' => array(
                'description' => 'lists clusters by cluster type',
                'type'        => 'string',
                'required'    => false,
            ),
            'managedstate' => array(
                'description' => 'whether this cluster is managed by cloudstack',
                'type'        => 'string',
                'required'    => false,
            ),
            'showcapacities' => array(
                'description' => 'flag to display the capacity of the clusters',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'lists clusters by the cluster ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'createFirewallRule' => array(
        'description' => 'Creates a firewall rule for a given IP address',
        'isasync'     => true,
        'params'      => array(
            'cidrlist' => array(
                'description' => 'the CIDR list to forward traffic from',
                'type'        => 'list',
                'required'    => false,
            ),
            'icmpcode' => array(
                'description' => 'error code for this icmp message',
                'type'        => 'integer',
                'required'    => false,
            ),
            'ipaddressid' => array(
                'description' => 'the IP address id of the port forwarding rule',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'startport' => array(
                'description' => 'the starting port of firewall rule',
                'type'        => 'integer',
                'required'    => false,
            ),
            'protocol' => array(
                'description' => 'the protocol for the firewall rule. Valid values are TCP/UDP/ICMP.',
                'type'        => 'string',
                'required'    => true,
            ),
            'icmptype' => array(
                'description' => 'type of the ICMP message being sent',
                'type'        => 'integer',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the rule to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'type of firewallrule: system/user',
                'type'        => 'string',
                'required'    => false,
            ),
            'endport' => array(
                'description' => 'the ending port of firewall rule',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'listInternalLoadBalancerVMs' => array(
        'description' => 'List internal LB VMs.',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID of the Internal LB VM',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the Pod ID of the Internal LB VM',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'hostid' => array(
                'description' => 'the host ID of the Internal LB VM',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'forvpc' => array(
                'description' => 'if true is passed for this parameter, list only VPC Internal LB VMs',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'list by network id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the Internal LB VM',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'List Internal LB VMs by VPC',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the Internal LB VM',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'the state of the Internal LB VM',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'updateResourceCount' => array(
        'description' => 'Recalculate and update resource count for an account or domain.',
        'isasync'     => false,
        'params'      => array(
            'account' => array(
                'description' => 'Update resource count for a specified account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'resourcetype' => array(
                'description' => 'Type of resource to update. If specifies valid values are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 and 11. If not specified will update all resource counts0 - Instance. Number of instances a user can create. 1 - IP. Number of public IP addresses a user can own. 2 - Volume. Number of disk volumes a user can create. 3 - Snapshot. Number of snapshots a user can create. 4 - Template. Number of templates that a user can register/create. 5 - Project. Number of projects that a user can create. 6 - Network. Number of guest network a user can create. 7 - VPC. Number of VPC a user can create. 8 - CPU. Total number of CPU cores a user can use. 9 - Memory. Total Memory (in MB) a user can use. 10 - PrimaryStorage. Total primary storage space (in GiB) a user can use. 11 - SecondaryStorage. Total secondary storage space (in GiB) a user can use. ',
                'type'        => 'integer',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'Update resource limits for project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'If account parameter specified then updates resource counts for a specified account in this domain else update resource counts for all accounts & child domains in specified domain.',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addNetworkServiceProvider' => array(
        'description' => 'Adds a network serviceProvider to a physical network',
        'isasync'     => true,
        'params'      => array(
            'name' => array(
                'description' => 'the name for the physical network service provider',
                'type'        => 'string',
                'required'    => true,
            ),
            'destinationphysicalnetworkid' => array(
                'description' => 'the destination Physical Network ID to bridge to',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'servicelist' => array(
                'description' => 'the list of services to be enabled for this physical network service provider',
                'type'        => 'list',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID to add the provider to',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'rebootSystemVm' => array(
        'description' => 'Reboots a system VM.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the system virtual machine',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'revertToVMSnapshot' => array(
        'description' => 'Revert VM from a vmsnapshot.',
        'isasync'     => true,
        'params'      => array(
            'vmsnapshotid' => array(
                'description' => 'The ID of the vm snapshot',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'lockUser' => array(
        'description' => 'Locks a user account',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'Locks user by user ID.',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'markDefaultZoneForAccount' => array(
        'description' => 'Marks a default zone for this account',
        'isasync'     => true,
        'params'      => array(
            'account' => array(
                'description' => 'Name of the account that is to be marked.',
                'type'        => 'string',
                'required'    => true,
            ),
            'domainid' => array(
                'description' => 'Marks the account that belongs to the specified domain.',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'The Zone ID with which the account is to be marked.',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addLdapConfiguration' => array(
        'description' => 'Add a new Ldap Configuration',
        'isasync'     => false,
        'params'      => array(
            'hostname' => array(
                'description' => 'Hostname',
                'type'        => 'string',
                'required'    => true,
            ),
            'port' => array(
                'description' => 'Port',
                'type'        => 'integer',
                'required'    => true,
            ),
        ),
    ),
    'listVirtualMachines' => array(
        'description' => 'List the virtual machines owned by the account.',
        'isasync'     => false,
        'params'      => array(
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the pod ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'the target hypervisor for the template',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'serviceofferingid' => array(
                'description' => 'list by the service offering',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'list by network id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'affinitygroupid' => array(
                'description' => 'list vms by affinity group',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'userid' => array(
                'description' => 'the user ID that created the VM and is under the account that owns the VM',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'list vms by vpc',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the virtual machine',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'storageid' => array(
                'description' => 'the storage ID where vm\'s volumes belong to',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'comma separated list of host details requested, value can be a list of [all, group, nics, stats, secgrp, tmpl, servoff, diskoff, iso, volume, min, affgrp]. If no parameter is passed in, the details will be defaulted to all',
                'type'        => 'list',
                'required'    => false,
            ),
            'hostid' => array(
                'description' => 'the host ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'templateid' => array(
                'description' => 'list vms by template',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'ids' => array(
                'description' => 'the IDs of the virtual machines, mutually exclusive with id',
                'type'        => 'list',
                'required'    => false,
            ),
            'keypair' => array(
                'description' => 'list vms by ssh keypair name',
                'type'        => 'string',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'state of the virtual machine. Possible values are: Running, Stopped, Present, Destroyed, Expunged. Present is used for the state equal not destroyed.',
                'type'        => 'string',
                'required'    => false,
            ),
            'groupid' => array(
                'description' => 'the group ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'displayvm' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'forvirtualnetwork' => array(
                'description' => 'list by network type; true if need to list vms using Virtual Network, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'name of the virtual machine (a substring match is made against the parameter value, data for all matching VMs will be returned)',
                'type'        => 'string',
                'required'    => false,
            ),
            'isoid' => array(
                'description' => 'list vms by iso',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the availability zone ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'restartVPC' => array(
        'description' => 'Restarts a VPC',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the id of the VPC',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'cleanup' => array(
                'description' => 'If cleanup old network elements',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'makeredundant' => array(
                'description' => 'Turn a single VPC into a redundant one.',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'replaceNetworkACLList' => array(
        'description' => 'Replaces ACL associated with a network or private gateway',
        'isasync'     => true,
        'params'      => array(
            'aclid' => array(
                'description' => 'the ID of the network ACL',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'gatewayid' => array(
                'description' => 'the ID of the private gateway',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'the ID of the network',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'generateAlert' => array(
        'description' => 'Generates an alert',
        'isasync'     => true,
        'params'      => array(
            'podid' => array(
                'description' => 'Pod id for which alert is generated',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'Type of the alert',
                'type'        => 'short',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'Zone id for which alert is generated',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'description' => array(
                'description' => 'Alert description',
                'type'        => 'string',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'Name of the alert',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'scaleSystemVm' => array(
        'description' => 'Scale the service offering for a system vm (console proxy or secondary storage). The system vm must be in a \"Stopped\" state for this command to take effect.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the system vm',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'details' => array(
                'description' => 'name value pairs of custom parameters for cpu, memory and cpunumber. example details[i].name=value',
                'type'        => 'map',
                'required'    => false,
            ),
            'serviceofferingid' => array(
                'description' => 'the service offering ID to apply to the system vm',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listEgressFirewallRules' => array(
        'description' => 'Lists all egress firewall rules for network ID.',
        'isasync'     => false,
        'params'      => array(
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'Lists rule with the specified ID.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'the network ID for the egress firewall services',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'ipaddressid' => array(
                'description' => 'the ID of IP address of the firewall services',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listHosts' => array(
        'description' => 'Lists hosts.',
        'isasync'     => false,
        'params'      => array(
            'virtualmachineid' => array(
                'description' => 'lists hosts in the same cluster as this VM and flag hosts with enough CPU/RAm to host this VM',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the host',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'outofbandmanagementenabled' => array(
                'description' => 'list hosts for which out-of-band management is enabled',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'clusterid' => array(
                'description' => 'lists hosts existing in particular cluster',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'resourcestate' => array(
                'description' => 'list hosts by resource state. Resource state represents current state determined by admin of host, value can be one of [Enabled, Disabled, Unmanaged, PrepareForMaintenance, ErrorInMaintenance, Maintenance, Error]',
                'type'        => 'string',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'the state of the host',
                'type'        => 'string',
                'required'    => false,
            ),
            'outofbandmanagementpowerstate' => array(
                'description' => 'list hosts by its out-of-band management interface\'s power state. Its value can be one of [On, Off, Unknown]',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the id of the host',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'type' => array(
                'description' => 'the host type',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the host',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'hahost' => array(
                'description' => 'if true, list only hosts dedicated to HA',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'hypervisor type of host: XenServer,KVM,VMware,Hyperv,BareMetal,Simulator',
                'type'        => 'string',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the Pod ID for the host',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'details' => array(
                'description' => 'comma separated list of host details requested, value can be a list of [ min, all, capacity, events, stats]',
                'type'        => 'list',
                'required'    => false,
            ),
        ),
    ),
    'updateAutoScaleVmGroup' => array(
        'description' => 'Updates an existing autoscale vm group.',
        'isasync'     => true,
        'params'      => array(
            'scaledownpolicyids' => array(
                'description' => 'list of scaledown autoscale policies',
                'type'        => 'list',
                'required'    => false,
            ),
            'scaleuppolicyids' => array(
                'description' => 'list of scaleup autoscale policies',
                'type'        => 'list',
                'required'    => false,
            ),
            'maxmembers' => array(
                'description' => 'the maximum number of members in the vmgroup, The number of instances in the vm group will be equal to or less than this number.',
                'type'        => 'integer',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'an optional field, whether to the display the group to the end user or not',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'minmembers' => array(
                'description' => 'the minimum number of members in the vmgroup, the number of instances in the vm group will be equal to or more than this number.',
                'type'        => 'integer',
                'required'    => false,
            ),
            'interval' => array(
                'description' => 'the frequency at which the conditions have to be evaluated',
                'type'        => 'integer',
                'required'    => false,
            ),
            'customid' => array(
                'description' => 'an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the autoscale group',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateTemplatePermissions' => array(
        'description' => 'Updates a template visibility permissions. A public template is visible to all accounts within the same domain. A private template is visible only to the owner of the template. A priviledged template is a private template with account permissions added. Only accounts specified under the template permissions are visible to them.',
        'isasync'     => false,
        'params'      => array(
            'projectids' => array(
                'description' => 'a comma delimited list of projects. If specified, \"op\" parameter has to be passed in.',
                'type'        => 'list',
                'required'    => false,
            ),
            'accounts' => array(
                'description' => 'a comma delimited list of accounts. If specified, \"op\" parameter has to be passed in.',
                'type'        => 'list',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the template ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'isextractable' => array(
                'description' => 'true if the template/iso is extractable, false other wise. Can be set only by root admin',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'op' => array(
                'description' => 'permission operator (add, remove, reset)',
                'type'        => 'string',
                'required'    => false,
            ),
            'isfeatured' => array(
                'description' => 'true for featured template/iso, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'ispublic' => array(
                'description' => 'true for public template/iso, false for private templates/isos',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'listVlanIpRanges' => array(
        'description' => 'Lists all VLAN IP ranges.',
        'isasync'     => false,
        'params'      => array(
            'account' => array(
                'description' => 'the account with which the VLAN IP range is associated. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'project who will own the VLAN',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'physicalnetworkid' => array(
                'description' => 'physical network id of the VLAN IP range',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'the Pod ID of the VLAN IP range',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the ID of the VLAN IP range',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'forvirtualnetwork' => array(
                'description' => 'true if VLAN is of Virtual type, false if Direct',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'vlan' => array(
                'description' => 'the ID or VID of the VLAN. Default is an \"untagged\" VLAN.',
                'type'        => 'string',
                'required'    => false,
            ),
            'networkid' => array(
                'description' => 'network id of the VLAN IP range',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID of the VLAN IP range',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'the domain ID with which the VLAN IP range is associated.  If used with the account parameter, returns all VLAN IP ranges for that account in the specified domain.',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listBaremetalRct' => array(
        'description' => 'list baremetal rack configuration',
        'isasync'     => false,
        'params'      => array(
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listPhysicalNetworks' => array(
        'description' => 'Lists physical networks',
        'isasync'     => false,
        'params'      => array(
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'search by name',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the Zone ID for the physical network',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list physical network by id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listStorageNetworkIpRange' => array(
        'description' => 'List a storage network IP range.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'optional parameter. Storaget network IP range uuid, if specicied, using it to search the range.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'optional parameter. Zone uuid, if specicied and both pod uuid and range uuid are absent, using it to search the range.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'optional parameter. Pod uuid, if specicied and range uuid is absent, using it to search the range.',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listVpnConnections' => array(
        'description' => 'Lists site to site vpn connection gateways',
        'isasync'     => false,
        'params'      => array(
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'fordisplay' => array(
                'description' => 'list resources by display flag; only ROOT admin is eligible to pass this parameter',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'id of the vpn connection',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'vpcid' => array(
                'description' => 'id of vpc',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'deleteHost' => array(
        'description' => 'Deletes a host.',
        'isasync'     => false,
        'params'      => array(
            'forced' => array(
                'description' => 'Force delete the host. All HA enabled vms running on the host will be put to HA; HA disabled ones will be stopped',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the host ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'forcedestroylocalstorage' => array(
                'description' => 'Force destroy local storage on this host. All VMs created on this local storage will be destroyed',
                'type'        => 'boolean',
                'required'    => false,
            ),
        ),
    ),
    'listVPCOfferings' => array(
        'description' => 'Lists VPC offerings',
        'isasync'     => false,
        'params'      => array(
            'name' => array(
                'description' => 'list VPC offerings by name',
                'type'        => 'string',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'list VPC offerings by display text',
                'type'        => 'string',
                'required'    => false,
            ),
            'isdefault' => array(
                'description' => 'true if need to list only default VPC offerings. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'list VPC offerings by state',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list VPC offerings by id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'supportedservices' => array(
                'description' => 'list VPC offerings supporting certain services',
                'type'        => 'list',
                'required'    => false,
            ),
        ),
    ),
    'updateNetworkOffering' => array(
        'description' => 'Updates a network offering.',
        'isasync'     => false,
        'params'      => array(
            'keepaliveenabled' => array(
                'description' => 'if true keepalive will be turned on in the loadbalancer. At the time of writing this has only an effect on haproxy; the mode http and httpclose options are unset in the haproxy conf file.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'the id of the network offering',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'displaytext' => array(
                'description' => 'the display text of the network offering',
                'type'        => 'string',
                'required'    => false,
            ),
            'maxconnections' => array(
                'description' => 'maximum number of concurrent connections supported by the network offering',
                'type'        => 'integer',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the network offering',
                'type'        => 'string',
                'required'    => false,
            ),
            'availability' => array(
                'description' => 'the availability of network offering. Default value is Required for Guest Virtual network offering; Optional for Guest Direct network offering',
                'type'        => 'string',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'update state for the network offering',
                'type'        => 'string',
                'required'    => false,
            ),
            'sortkey' => array(
                'description' => 'sort key of the network offering, integer',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'deletePhysicalNetwork' => array(
        'description' => 'Deletes a Physical Network.',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the Physical network',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteInstanceGroup' => array(
        'description' => 'Deletes a vm group',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the instance group',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'addBaremetalDhcp' => array(
        'description' => 'adds a baremetal dhcp server',
        'isasync'     => true,
        'params'      => array(
            'dhcpservertype' => array(
                'description' => 'Type of dhcp device',
                'type'        => 'string',
                'required'    => true,
            ),
            'url' => array(
                'description' => 'URL of the external dhcp appliance.',
                'type'        => 'string',
                'required'    => true,
            ),
            'password' => array(
                'description' => 'Credentials to reach external dhcp device',
                'type'        => 'string',
                'required'    => true,
            ),
            'physicalnetworkid' => array(
                'description' => 'the Physical Network ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'username' => array(
                'description' => 'Credentials to reach external dhcp device',
                'type'        => 'string',
                'required'    => true,
            ),
        ),
    ),
    'deleteVPCOffering' => array(
        'description' => 'Deletes VPC offering',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the VPC offering',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listVpnUsers' => array(
        'description' => 'Lists vpn users',
        'isasync'     => false,
        'params'      => array(
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'username' => array(
                'description' => 'the username of the vpn user.',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'The uuid of the Vpn user',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'updatePod' => array(
        'description' => 'Updates a Pod.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the Pod',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'gateway' => array(
                'description' => 'the gateway for the Pod',
                'type'        => 'string',
                'required'    => false,
            ),
            'allocationstate' => array(
                'description' => 'Allocation state of this cluster for allocation of new resources',
                'type'        => 'string',
                'required'    => false,
            ),
            'netmask' => array(
                'description' => 'the netmask of the Pod',
                'type'        => 'string',
                'required'    => false,
            ),
            'startip' => array(
                'description' => 'the starting IP address for the Pod',
                'type'        => 'string',
                'required'    => false,
            ),
            'endip' => array(
                'description' => 'the ending IP address for the Pod',
                'type'        => 'string',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'the name of the Pod',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'deleteOpenDaylightController' => array(
        'description' => 'Removes an OpenDyalight controler',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'OpenDaylight Controller ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'deleteCluster' => array(
        'description' => 'Deletes a cluster.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the cluster ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'updateNetworkServiceProvider' => array(
        'description' => 'Updates a network serviceProvider of a physical network',
        'isasync'     => true,
        'params'      => array(
            'servicelist' => array(
                'description' => 'the list of services to be enabled for this physical network service provider',
                'type'        => 'list',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'network service provider id',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'state' => array(
                'description' => 'Enabled/Disabled/Shutdown the physical network service provider',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'listUsers' => array(
        'description' => 'Lists user accounts',
        'isasync'     => false,
        'params'      => array(
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'accounttype' => array(
                'description' => 'List users by account type. Valid types include admin, domain-admin, read-only-admin, or user.',
                'type'        => 'long',
                'required'    => false,
            ),
            'state' => array(
                'description' => 'List users by state of the user account.',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'List user by ID.',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'username' => array(
                'description' => 'List user by the username',
                'type'        => 'string',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'findStoragePoolsForMigration' => array(
        'description' => 'Lists storage pools available for migration of a volume.',
        'isasync'     => false,
        'params'      => array(
            'id' => array(
                'description' => 'the ID of the volume',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'upgradeRouterTemplate' => array(
        'description' => 'Upgrades router to use newer template',
        'isasync'     => false,
        'params'      => array(
            'clusterid' => array(
                'description' => 'upgrades all routers within the specified cluster',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'upgrades router with the specified Id',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'upgrades all routers owned by the specified domain',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'upgrades all routers owned by the specified account',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'upgrades all routers within the specified zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'podid' => array(
                'description' => 'upgrades all routers within the specified pod',
                'type'        => 'uuid',
                'required'    => false,
            ),
        ),
    ),
    'listSupportedNetworkServices' => array(
        'description' => 'Lists all network services provided by CloudStack or for the given Provider.',
        'isasync'     => false,
        'params'      => array(
            'provider' => array(
                'description' => 'network service provider name',
                'type'        => 'string',
                'required'    => false,
            ),
            'service' => array(
                'description' => 'network service name to list providers and capabilities of',
                'type'        => 'string',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
        ),
    ),
    'addStratosphereSsp' => array(
        'description' => 'Adds stratosphere ssp server',
        'isasync'     => false,
        'params'      => array(
            'name' => array(
                'description' => 'stratosphere ssp api name',
                'type'        => 'string',
                'required'    => true,
            ),
            'tenantuuid' => array(
                'description' => 'stratosphere ssp tenant uuid',
                'type'        => 'string',
                'required'    => false,
            ),
            'password' => array(
                'description' => 'stratosphere ssp api password',
                'type'        => 'string',
                'required'    => false,
            ),
            'url' => array(
                'description' => 'stratosphere ssp server url',
                'type'        => 'string',
                'required'    => true,
            ),
            'zoneid' => array(
                'description' => 'the zone ID',
                'type'        => 'uuid',
                'required'    => true,
            ),
            'username' => array(
                'description' => 'stratosphere ssp api username',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'addGuestOs' => array(
        'description' => 'Add a new guest OS type',
        'isasync'     => true,
        'params'      => array(
            'osdisplayname' => array(
                'description' => 'Unique display name for Guest OS',
                'type'        => 'string',
                'required'    => true,
            ),
            'name' => array(
                'description' => 'Optional name for Guest OS',
                'type'        => 'string',
                'required'    => false,
            ),
            'oscategoryid' => array(
                'description' => 'ID of Guest OS category',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
    'listIsos' => array(
        'description' => 'Lists all available ISO files.',
        'isasync'     => false,
        'params'      => array(
            'keyword' => array(
                'description' => 'List by keyword',
                'type'        => 'string',
                'required'    => false,
            ),
            'zoneid' => array(
                'description' => 'the ID of the zone',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'projectid' => array(
                'description' => 'list objects by project',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'pagesize' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'listall' => array(
                'description' => 'If set to false, list only resources belonging to the command\'s caller; if set to true - list resources that the caller is authorized to see. Default value is false',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'page' => array(
                'description' => '',
                'type'        => 'integer',
                'required'    => false,
            ),
            'domainid' => array(
                'description' => 'list only resources belonging to the domain specified',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'isrecursive' => array(
                'description' => 'defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'name' => array(
                'description' => 'list all ISOs by name',
                'type'        => 'string',
                'required'    => false,
            ),
            'isready' => array(
                'description' => 'true if this ISO is ready to be deployed',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'showremoved' => array(
                'description' => 'show removed ISOs as well',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'id' => array(
                'description' => 'list ISO by ID',
                'type'        => 'uuid',
                'required'    => false,
            ),
            'bootable' => array(
                'description' => 'true if the ISO is bootable, false otherwise',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'tags' => array(
                'description' => 'List resources by tags (key/value pairs)',
                'type'        => 'map',
                'required'    => false,
            ),
            'ispublic' => array(
                'description' => 'true if the ISO is publicly available to all users, false otherwise.',
                'type'        => 'boolean',
                'required'    => false,
            ),
            'isofilter' => array(
                'description' => 'possible values are \"featured\", \"self\", \"selfexecutable\",\"sharedexecutable\",\"executable\", and \"community\". * featured : templates that have been marked as featured and public. * self : templates that have been registered or created by the calling user. * selfexecutable : same as self, but only returns templates that can be used to deploy a new VM. * sharedexecutable : templates ready to be deployed that have been granted to the calling user by another user. * executable : templates that are owned by the calling user, or public templates, that can be used to deploy a VM. * community : templates that have been marked as public but not featured. * all : all templates (only usable by admins).',
                'type'        => 'string',
                'required'    => false,
            ),
            'hypervisor' => array(
                'description' => 'the hypervisor for which to restrict the search',
                'type'        => 'string',
                'required'    => false,
            ),
            'account' => array(
                'description' => 'list resources by account. Must be used with the domainId parameter.',
                'type'        => 'string',
                'required'    => false,
            ),
        ),
    ),
    'revertSnapshot' => array(
        'description' => 'This is supposed to revert a volume snapshot. This command is only supported with KVM so far',
        'isasync'     => true,
        'params'      => array(
            'id' => array(
                'description' => 'The ID of the snapshot',
                'type'        => 'uuid',
                'required'    => true,
            ),
        ),
    ),
);
